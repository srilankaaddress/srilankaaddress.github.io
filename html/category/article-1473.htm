<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://srilankaaddress.github.io/html/category/article-1473.htm" />
    <title>jackson在springboot中的使用-自定义参数转换器 - Sri Lanka Address</title>
        <meta charset="utf-8">
    <link rel="icon" href="/assets/addons/xcblog/img/srilankaaddress/favicon.ico" type="image/x-icon"/>
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="description" content="AerobicsFit template project">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?e8fff5fa52c11c99c5cdad6284174bdb";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/srilankaaddress/bootstrap-4.1.2/bootstrap.min.css">
    <link href="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/font-awesome-4.7.0/css/font-awesome.min.css" rel="stylesheet" type="text/css">
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/owl.carousel.css">
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/owl.theme.default.css">
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/animate.css">
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/srilankaaddress/about.css">
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/srilankaaddress/about_responsive.css">
</head>

<body>
    <div class="super_container">
                <!-- Header -->
        <header class="header">
            <div class="container">
                <div class="row">
                    <div class="col">
                        <div class="header_content d-flex flex-row align-items-center justify-content-start">
                            <div class="logo">Sri Lanka<span> Address</span></div>
                            <nav class="main_nav">
                                <ul class="d-flex flex-row align-items-center justify-content-start">
                                                                        <li><a href="/">首页</a></li>
                                                                        <li><a href="/html/category/">文章分类</a></li>
                                                                        <li><a href="#">关于</a></li>
                                    <li><a href="#">联系</a></li>
                                </ul>
                            </nav>
                            <div class="social header_social">
                                <ul class="d-flex flex-row align-items-center justify-content-start">
                                    <li><a href="#"><i class="fa fa-pinterest" aria-hidden="true"></i></a></li>
                                    <li><a href="#"><i class="fa fa-linkedin" aria-hidden="true"></i></a></li>
                                    <li><a href="#"><i class="fa fa-instagram" aria-hidden="true"></i></a></li>
                                    <li><a href="#"><i class="fa fa-facebook" aria-hidden="true"></i></a></li>
                                    <li><a href="#"><i class="fa fa-twitter" aria-hidden="true"></i></a></li>
                                </ul>
                            </div>
                            <div class="hamburger ml-auto"><i class="fa fa-bars" aria-hidden="true"></i></div>
                        </div>
                    </div>
                </div>
            </div>
        </header>
        <!-- Menu -->
        <div class="menu">
            <div class="menu_content d-flex flex-column align-items-center justify-content-center">
                <ul class="menu_nav_list text-center">
                                        <li><a href="index.html">Home</a></li>
                                        <li><a href="index.html">Home</a></li>
                                        <li><a href="#">关于</a></li>
                    <li><a href="#">联系</a></li>
                </ul>
            </div>
        </div>
        <!-- Home -->
        <div class="home">
            <div class="parallax_background parallax-window" data-parallax="scroll" data-image-src="/assets/addons/xcblog/img/srilankaaddress/about.jpg" data-speed="0.8"></div>
            <div class="home_container">
                <div class="container">
                    <div class="row">
                        <div class="col">
                            <div class="home_content">
                                <div class="home_title">jackson在springboot中的使用-自定义参数转换器</div>
                                <div class="breadcrumbs">
                                    <ul class="d-flex flex-row align-items-center justify-content-start">
                                        <li><a href="/">首页</a></li>
                                        <li><a href="/html/category/">文章分类</a></li>
                                        <li>正文</li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- Classes -->
        <div class="classes">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                        <div class="row row-eq-height">
                            <div class="col-md-12">
                                  				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <div class="toc"> <h3>目录</h3> <ul> <li>要实现的功能</li> <li>思路</li> <li>关键代码</li> </ul> </div> <p> springboot中默认使用jackson，且实现了很多参数转换器，其中就有EnumToStringConverter和StringToEnumConverterFactory，用于字符串和枚举的互转。但是是根据枚举名称互转。</p> <h1> 要实现的功能</h1> <ol> <li>空属性我不希望转成json字符串</li> <li>日期对象我希望按照指定格式转换</li> <li>我存在多个枚举，类似<code>public enum ChannelWayEnum { Bluetooth(0, "蓝牙"), NB(1, "NB-IOT"), G4(2, "自建4G"), Ali(3, "ali-4G");</code>},用默认转换器无法转换。需要自定义转换。</li> </ol> <h1> 思路</h1> <ol> <li>覆盖默认注入的ObjectMapper，自己实现objectMapper，可设置忽略null字段</li> <li>自定义针对日期对象的Converter</li> <li>枚举需要实现接口IEnum，然后自定义针对IEnum接口的转换器</li> </ol> <h1> 关键代码</h1> <ol> <li>注入ObjectMapper</li> </ol> <pre><code class="prism language-java"><span class="token annotation punctuation">@Configuration</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JacksonConfig</span> <span class="token punctuation">{<!-- --></span>     <span class="token annotation punctuation">@Bean</span>     <span class="token keyword">public</span> ObjectMapper <span class="token function">objectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">return</span> <span class="token function">createObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>      <span class="token keyword">private</span> ObjectMapper <span class="token function">createObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         ObjectMapper objectMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         SimpleModule simpleModule <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">/**          * 序列化：对象=>jsonString          */</span>         simpleModule<span class="token punctuation">.</span><span class="token function">addSerializer</span><span class="token punctuation">(</span>WashEnum<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">WashEnumSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         simpleModule<span class="token punctuation">.</span><span class="token function">addSerializer</span><span class="token punctuation">(</span>IEnum<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">EnumSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         simpleModule<span class="token punctuation">.</span><span class="token function">addSerializer</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DateSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         simpleModule<span class="token punctuation">.</span><span class="token function">addSerializer</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BooleanSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//忽略null字段</span>         objectMapper<span class="token punctuation">.</span><span class="token function">setSerializationInclusion</span><span class="token punctuation">(</span>JsonInclude<span class="token punctuation">.</span>Include<span class="token punctuation">.</span>NON_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">/**          * 反序列化：jsonString=>对象          */</span>         <span class="token comment">//允许json属性名不使用双引号</span>         objectMapper<span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span>JsonParser<span class="token punctuation">.</span>Feature<span class="token punctuation">.</span>ALLOW_UNQUOTED_FIELD_NAMES<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//忽略不存在字段</span>         objectMapper<span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span>DeserializationFeature<span class="token punctuation">.</span>FAIL_ON_UNKNOWN_PROPERTIES<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         simpleModule<span class="token punctuation">.</span><span class="token function">addDeserializer</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">StringDeserializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         simpleModule<span class="token punctuation">.</span><span class="token function">addDeserializer</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DateDeserializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         simpleModule<span class="token punctuation">.</span><span class="token function">addDeserializer</span><span class="token punctuation">(</span>WashEnum<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">WashEnumDeserializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         simpleModule<span class="token punctuation">.</span><span class="token function">addDeserializer</span><span class="token punctuation">(</span>Enum<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">EnumDeserializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//反序列化枚举，</span>         simpleModule<span class="token punctuation">.</span><span class="token function">addDeserializer</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BooleanDeserializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         objectMapper<span class="token punctuation">.</span><span class="token function">registerModule</span><span class="token punctuation">(</span>simpleModule<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> objectMapper<span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <ol start="2"> <li>日期对象的转换</li> </ol> <pre><code class="prism language-java"><span class="token annotation punctuation">@JsonComponent</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DateDeserializer</span> <span class="token keyword">extends</span> <span class="token class-name">JsonDeserializer</span><span class="token generics function"><span class="token punctuation"><</span>Date<span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">Converter</span><span class="token generics function"><span class="token punctuation"><</span>String<span class="token punctuation">,</span> Date<span class="token punctuation">></span></span> <span class="token punctuation">{<!-- --></span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> Date <span class="token function">deserialize</span><span class="token punctuation">(</span>JsonParser p<span class="token punctuation">,</span> DeserializationContext ctxt<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">try</span> <span class="token punctuation">{<!-- --></span>             <span class="token keyword">return</span> <span class="token function">convert</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>             e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">return</span> null<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> Date <span class="token function">convert</span><span class="token punctuation">(</span>String source<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtil<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>             <span class="token keyword">return</span> null<span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">return</span> TimeUtil<span class="token punctuation">.</span><span class="token function">toDate</span><span class="token punctuation">(</span>TimeUtil<span class="token punctuation">.</span><span class="token function">str2Time</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> TimeFormat<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token annotation punctuation">@JsonComponent</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DateSerializer</span> <span class="token keyword">extends</span> <span class="token class-name">JsonSerializer</span><span class="token generics function"><span class="token punctuation"><</span>Date<span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">Converter</span><span class="token generics function"><span class="token punctuation"><</span>Date<span class="token punctuation">,</span>String<span class="token punctuation">></span></span> <span class="token punctuation">{<!-- --></span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">serialize</span><span class="token punctuation">(</span>Date value<span class="token punctuation">,</span> JsonGenerator gen<span class="token punctuation">,</span> SerializerProvider serializers<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         <span class="token keyword">try</span> <span class="token punctuation">{<!-- --></span>              gen<span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span><span class="token function">convert</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>             e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> String <span class="token function">convert</span><span class="token punctuation">(</span>Date source<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">return</span> TimeUtil<span class="token punctuation">.</span><span class="token function">time2Str</span><span class="token punctuation">(</span>TimeUtil<span class="token punctuation">.</span><span class="token function">date2Time</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">,</span>TimeFormat<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <ol start="3"> <li>接口</li> </ol> <pre><code class="prism language-java"><span class="token comment">/**  * 枚举都要继承此接口，  * @param <V> 枚举实际值的数据类型  */</span> <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IEnum</span><span class="token generics function"><span class="token punctuation"><</span>V<span class="token punctuation">></span></span> <span class="token punctuation">{<!-- --></span>     <span class="token comment">//枚举实际值</span>     V <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">static</span><span class="token operator"><</span>T <span class="token keyword">extends</span> <span class="token class-name">IEnum</span><span class="token operator">></span> T <span class="token function">getBean</span><span class="token punctuation">(</span>String value<span class="token punctuation">,</span>Class<span class="token generics function"><span class="token punctuation"><</span>T<span class="token punctuation">></span></span> tClass<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtil<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>             <span class="token keyword">return</span> null<span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span>T enumObj <span class="token operator">:</span> tClass<span class="token punctuation">.</span><span class="token function">getEnumConstants</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>enumObj<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>                 <span class="token keyword">return</span> enumObj<span class="token punctuation">;</span>             <span class="token punctuation">}</span>         <span class="token punctuation">}</span>         <span class="token keyword">return</span> null<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">default</span> String <span class="token function">getStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         <span class="token keyword">return</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <ol start="4"> <li>枚举的转换器</li> </ol> <pre><code class="prism language-java"><span class="token comment">/**  * json=>对象  */</span> <span class="token annotation punctuation">@JsonComponent</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EnumDeserializer</span><span class="token operator"><</span>T <span class="token keyword">extends</span> <span class="token class-name">IEnum</span><span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">JsonDeserializer</span><span class="token generics function"><span class="token punctuation"><</span>T<span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">ContextualDeserializer</span><span class="token punctuation">{<!-- --></span>     <span class="token keyword">private</span> Class<span class="token generics function"><span class="token punctuation"><</span>T<span class="token punctuation">></span></span> targetClass <span class="token operator">=</span> null<span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token function">EnumDeserializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>     <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token function">EnumDeserializer</span><span class="token punctuation">(</span>Class<span class="token generics function"><span class="token punctuation"><</span>T<span class="token punctuation">></span></span> targetClass<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">this</span><span class="token punctuation">.</span>targetClass <span class="token operator">=</span> targetClass<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> T <span class="token function">deserialize</span><span class="token punctuation">(</span>JsonParser p<span class="token punctuation">,</span> DeserializationContext ctxt<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> <span class="token comment">//        if(targetClass!=null&&IEnum.class.isAssignableFrom(targetClass)){<!-- --></span>             <span class="token keyword">try</span> <span class="token punctuation">{<!-- --></span>                 <span class="token keyword">return</span> IEnum<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>targetClass<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>                 e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span> <span class="token comment">//        }</span>         <span class="token keyword">return</span> null<span class="token punctuation">;</span>     <span class="token punctuation">}</span>      <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> JsonDeserializer<span class="token operator"><</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">createContextual</span><span class="token punctuation">(</span>DeserializationContext ctxt<span class="token punctuation">,</span> BeanProperty property<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         Class<span class="token generics function"><span class="token punctuation"><</span>T<span class="token punctuation">></span></span> targetClass <span class="token operator">=</span> <span class="token punctuation">(</span>Class<span class="token generics function"><span class="token punctuation"><</span>T<span class="token punctuation">></span></span><span class="token punctuation">)</span> ctxt<span class="token punctuation">.</span><span class="token function">getContextualType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRawClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">EnumDeserializer</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token comment">/**  * 序列化，将enum枚举转为json  * @author chenzy  * @since 2019.12.19  */</span> <span class="token annotation punctuation">@JsonComponent</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EnumSerializer</span><span class="token operator"><</span>T <span class="token keyword">extends</span> <span class="token class-name">IEnum</span><span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">JsonSerializer</span><span class="token generics function"><span class="token punctuation"><</span>T<span class="token punctuation">></span></span> <span class="token punctuation">{<!-- --></span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">serialize</span><span class="token punctuation">(</span>T value<span class="token punctuation">,</span> JsonGenerator gen<span class="token punctuation">,</span> SerializerProvider serializers<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{<!-- --></span>         Optional<span class="token generics function"><span class="token punctuation"><</span>T<span class="token punctuation">></span></span> data <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span><span class="token comment">//非空</span>             gen<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{<!-- --></span> <span class="token comment">//            gen.writeString("");</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <p>下面才是真正的转换器</p> <pre><code class="prism language-java"><span class="token comment">/**  * IEnum=>str  */</span> <span class="token annotation punctuation">@Component</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Enum2StrConverter</span><span class="token operator"><</span>T <span class="token keyword">extends</span> <span class="token class-name">IEnum</span><span class="token operator"><</span><span class="token operator">?</span><span class="token operator">>></span> <span class="token keyword">implements</span> <span class="token class-name">ConditionalConverter</span><span class="token punctuation">,</span>Converter<span class="token generics function"><span class="token punctuation"><</span>T<span class="token punctuation">,</span> String<span class="token punctuation">></span></span><span class="token punctuation">{<!-- --></span>     <span class="token keyword">private</span> <span class="token keyword">final</span> ConversionService conversionService<span class="token punctuation">;</span>     <span class="token keyword">protected</span> <span class="token function">Enum2StrConverter</span><span class="token punctuation">(</span>ConversionService conversionService<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">this</span><span class="token punctuation">.</span>conversionService <span class="token operator">=</span> conversionService<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> String <span class="token function">convert</span><span class="token punctuation">(</span>T source<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">return</span> source<span class="token punctuation">.</span><span class="token function">getStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">matches</span><span class="token punctuation">(</span>TypeDescriptor sourceType<span class="token punctuation">,</span> TypeDescriptor targetType<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">for</span> <span class="token punctuation">(</span>Class<span class="token operator"><</span><span class="token operator">?</span><span class="token operator">></span> interfaceType <span class="token operator">:</span> ClassUtils<span class="token punctuation">.</span><span class="token function">getAllInterfacesForClassAsSet</span><span class="token punctuation">(</span>sourceType<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>             <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>conversionService<span class="token punctuation">.</span><span class="token function">canConvert</span><span class="token punctuation">(</span>TypeDescriptor<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>interfaceType<span class="token punctuation">)</span><span class="token punctuation">,</span> targetType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>                 <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>         <span class="token punctuation">}</span>         <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token comment">/**  * str=>IEnum  */</span> <span class="token annotation punctuation">@Component</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Str2EnumConverte</span> <span class="token keyword">implements</span> <span class="token class-name">ConverterFactory</span><span class="token generics function"><span class="token punctuation"><</span>String<span class="token punctuation">,</span> IEnum<span class="token punctuation">></span></span> <span class="token punctuation">{<!-- --></span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token operator"><</span>T <span class="token keyword">extends</span> <span class="token class-name">IEnum</span><span class="token operator">></span> Converter<span class="token generics function"><span class="token punctuation"><</span>String<span class="token punctuation">,</span> T<span class="token punctuation">></span></span> <span class="token function">getConverter</span><span class="token punctuation">(</span>Class<span class="token generics function"><span class="token punctuation"><</span>T<span class="token punctuation">></span></span> targetType<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Str2Enum</span><span class="token punctuation">(</span>targetType<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Str2Enum</span><span class="token operator"><</span>T <span class="token keyword">extends</span> <span class="token class-name">IEnum</span><span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">Converter</span><span class="token generics function"><span class="token punctuation"><</span>String<span class="token punctuation">,</span> T<span class="token punctuation">></span></span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">private</span> <span class="token keyword">final</span> Class<span class="token generics function"><span class="token punctuation"><</span>T<span class="token punctuation">></span></span> enumType<span class="token punctuation">;</span>         <span class="token keyword">public</span> <span class="token function">Str2Enum</span><span class="token punctuation">(</span>Class<span class="token generics function"><span class="token punctuation"><</span>T<span class="token punctuation">></span></span> enumType<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>             <span class="token keyword">this</span><span class="token punctuation">.</span>enumType <span class="token operator">=</span> enumType<span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token annotation punctuation">@Override</span>         <span class="token keyword">public</span> T <span class="token function">convert</span><span class="token punctuation">(</span>String source<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtil<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>                 <span class="token keyword">return</span> null<span class="token punctuation">;</span>             <span class="token punctuation">}</span>             <span class="token keyword">return</span> IEnum<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span>enumType<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token comment">/**  * @author chenzy  * @since 2020-12-02  */</span> <span class="token annotation punctuation">@Configuration</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JacksonConfig</span>  <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{<!-- --></span>     <span class="token annotation punctuation">@Autowired</span> <span class="token keyword">private</span> Str2EnumConverte str2EnumConverte<span class="token punctuation">;</span>      <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addFormatters</span><span class="token punctuation">(</span>FormatterRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         registry<span class="token punctuation">.</span><span class="token function">addConverterFactory</span><span class="token punctuation">(</span>str2EnumConverte<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token annotation punctuation">@Bean</span>     <span class="token keyword">public</span> ObjectMapper <span class="token function">objectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">return</span> JsonUtil<span class="token punctuation">.</span><span class="token function">getObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <p>以上代码比较简单，就没有写注释，有问题请留言。</p> </p></div> 			
                                <div class="col-md-12 mt-5">
                                                                        <p>上一个：<a href="/html/category/article-1472.htm">java遍历map、map键排序、值排序</a></p>
                                                                        <p>下一个：<a href="/html/category/article-1474.htm">Android 图像显示系统基础知识之 BitTube</a></p>
                                                                    </div>

                                                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-4560.htm" title="宠物猫咪驱虫多少钱一只（猫驱虫多少钱一次?）">宠物猫咪驱虫多少钱一只（猫驱虫多少钱一次?）</a></li>
                        <li class="py-2"><a href="/html/category/article-2833.htm" title="windows查看已经连过wifi的密码">windows查看已经连过wifi的密码</a></li>
                        <li class="py-2"><a href="/html/category/article-3132.htm" title="SpringBoot和RocketMQ的实例RocketMQTemplate">SpringBoot和RocketMQ的实例RocketMQTemplate</a></li>
                        <li class="py-2"><a href="/html/category/article-4105.htm" title="Java：Arrays.fill() 方法">Java：Arrays.fill() 方法</a></li>
                        <li class="py-2"><a href="/html/category/article-4077.htm" title="Vuex状态管理-mapState的基本用法详细介绍">Vuex状态管理-mapState的基本用法详细介绍</a></li>
                        <li class="py-2"><a href="/html/category/article-4453.htm" title="大香肠披萨（大香肠披萨梗）">大香肠披萨（大香肠披萨梗）</a></li>
                        <li class="py-2"><a href="/html/category/article-4378.htm" title="宠物领养平台app推荐哪个软件好（宠物领养 app）">宠物领养平台app推荐哪个软件好（宠物领养 app）</a></li>
                        <li class="py-2"><a href="/html/category/article-4559.htm" title="动物疫苗价格表最新图片大全（动物疫苗的使用方法及注意事项）">动物疫苗价格表最新图片大全（动物疫苗的使用方法及注意事项）</a></li>
                        <li class="py-2"><a href="/html/category/article-3433.htm" title="一文看懂HBase倒序分页查询（实现分页跳转）">一文看懂HBase倒序分页查询（实现分页跳转）</a></li>
                        <li class="py-2"><a href="/html/category/article-4332.htm" title="公务员国考报考指南最新（公务员国考报考指南最新版本）">公务员国考报考指南最新（公务员国考报考指南最新版本）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">46</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </div>
                <!-- Footer -->
        <footer class="footer">
            <div class="parallax_background parallax-window" data-parallax="scroll" data-image-src="/assets/addons/xcblog/img/srilankaaddress/footer.jpg" data-speed="0.8"></div>
            <div class="footer_overlay"></div>
            <div class="container">
                <div class="row">
                    <div class="col">
                        <div class="footer_content text-center d-flex flex-column align-items-center justify-content-center">
                            <p>
                                Sri Lanka Address 版权所有
                                <br />
                                Powered by WordPress
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </footer>
    </div>
    <script src="/assets/addons/xcblog/js/frontend/srilankaaddress/jquery-3.2.1.min.js"></script>
    <script src="/assets/addons/xcblog/css/srilankaaddress/bootstrap-4.1.2/popper.js"></script>
    <script src="/assets/addons/xcblog/css/srilankaaddress/bootstrap-4.1.2/bootstrap.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/owl.carousel.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/easing/easing.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/parallax-js-master/parallax.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/srilankaaddress/about.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>