<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://srilankaaddress.github.io/html/category/article-4077.htm" />
    <title>Vuex状态管理-mapState的基本用法详细介绍 - Sri Lanka Address</title>
        <meta charset="utf-8">
    <link rel="icon" href="/assets/addons/xcblog/img/srilankaaddress/favicon.ico" type="image/x-icon"/>
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="description" content="AerobicsFit template project">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?e8fff5fa52c11c99c5cdad6284174bdb";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/srilankaaddress/bootstrap-4.1.2/bootstrap.min.css">
    <link href="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/font-awesome-4.7.0/css/font-awesome.min.css" rel="stylesheet" type="text/css">
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/owl.carousel.css">
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/owl.theme.default.css">
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/animate.css">
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/srilankaaddress/about.css">
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/srilankaaddress/about_responsive.css">
</head>

<body>
    <div class="super_container">
                <!-- Header -->
        <header class="header">
            <div class="container">
                <div class="row">
                    <div class="col">
                        <div class="header_content d-flex flex-row align-items-center justify-content-start">
                            <div class="logo">Sri Lanka<span> Address</span></div>
                            <nav class="main_nav">
                                <ul class="d-flex flex-row align-items-center justify-content-start">
                                                                        <li><a href="/">首页</a></li>
                                                                        <li><a href="/html/category/">文章分类</a></li>
                                                                        <li><a href="#">关于</a></li>
                                    <li><a href="#">联系</a></li>
                                </ul>
                            </nav>
                            <div class="social header_social">
                                <ul class="d-flex flex-row align-items-center justify-content-start">
                                    <li><a href="#"><i class="fa fa-pinterest" aria-hidden="true"></i></a></li>
                                    <li><a href="#"><i class="fa fa-linkedin" aria-hidden="true"></i></a></li>
                                    <li><a href="#"><i class="fa fa-instagram" aria-hidden="true"></i></a></li>
                                    <li><a href="#"><i class="fa fa-facebook" aria-hidden="true"></i></a></li>
                                    <li><a href="#"><i class="fa fa-twitter" aria-hidden="true"></i></a></li>
                                </ul>
                            </div>
                            <div class="hamburger ml-auto"><i class="fa fa-bars" aria-hidden="true"></i></div>
                        </div>
                    </div>
                </div>
            </div>
        </header>
        <!-- Menu -->
        <div class="menu">
            <div class="menu_content d-flex flex-column align-items-center justify-content-center">
                <ul class="menu_nav_list text-center">
                                        <li><a href="index.html">Home</a></li>
                                        <li><a href="index.html">Home</a></li>
                                        <li><a href="#">关于</a></li>
                    <li><a href="#">联系</a></li>
                </ul>
            </div>
        </div>
        <!-- Home -->
        <div class="home">
            <div class="parallax_background parallax-window" data-parallax="scroll" data-image-src="/assets/addons/xcblog/img/srilankaaddress/about.jpg" data-speed="0.8"></div>
            <div class="home_container">
                <div class="container">
                    <div class="row">
                        <div class="col">
                            <div class="home_content">
                                <div class="home_title">Vuex状态管理-mapState的基本用法详细介绍</div>
                                <div class="breadcrumbs">
                                    <ul class="d-flex flex-row align-items-center justify-content-start">
                                        <li><a href="/">首页</a></li>
                                        <li><a href="/html/category/">文章分类</a></li>
                                        <li>正文</li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- Classes -->
        <div class="classes">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                        <div class="row row-eq-height">
                            <div class="col-md-12">
                                  				  				  				<div id="content_views" class="markdown_views prism-tomorrow-night-eighties"> <h1>使用vuex集中管理状态</h1> <ul> <li>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化</li> </ul> <pre><code class="prism language-js"><span class="token comment">// store.js</span><span class="token comment">/* vuex的核心管理对象模块:store  */</span><span class="token keyword">import</span> Vue<span class="token keyword">from</span><span class="token string">'vue'</span><span class="token keyword">import</span> Vuex<span class="token keyword">from</span><span class="token string">'vuex'</span>  Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token comment">// 状态对象</span><span class="token keyword">const</span> state<span class="token operator">=</span><span class="token punctuation">{<!-- --></span><span class="token comment">// 初始化状态 这里放置的状态可以被多个组件共享</span>   count<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>   name<span class="token punctuation">:</span><span class="token string">'daming'</span><span class="token punctuation">}</span><span class="token keyword">const</span> mutations<span class="token operator">=</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span><span class="token keyword">const</span> action<span class="token operator">=</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span><span class="token keyword">const</span> getters<span class="token operator">=</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span><span class="token keyword">export</span><span class="token keyword">default</span><span class="token keyword">new</span><span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span>   state<span class="token punctuation">,</span><span class="token comment">// 状态</span>   mutations<span class="token punctuation">,</span><span class="token comment">// 包含多个更新state函数的对象</span>   actions<span class="token punctuation">,</span><span class="token comment">// 包含多个队形事件回调函数的对象</span>   getters<span class="token comment">// 包含多个getter计算属性函数的对象</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre> <pre><code class="prism language-js"><span class="token comment">// main.js</span><span class="token comment">/* 入口JS  */</span><span class="token keyword">import</span> Vue<span class="token keyword">from</span><span class="token string">'vue'</span><span class="token keyword">import</span> App<span class="token keyword">from</span><span class="token string">'./App.vue'</span><span class="token keyword">import</span> store<span class="token keyword">from</span><span class="token string">'./store'</span><span class="token comment">// 创建vm</span><span class="token comment">/* eslint-disable no-new */</span><span class="token keyword">new</span><span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span>   el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>   components<span class="token punctuation">:</span><span class="token punctuation">{<!-- --></span>App<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">// 映射组件标签</span>   template<span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token comment">// 指定需要渲染到页面的模板</span>   store<span class="token comment">// 所有的组件对象都多了一个属性:$store</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre> <h1><a id="vuex_56" rel="nofollow">在组件中获取vuex状态</h1> <p>虽然将所有的状态放入Vuex，会使状态变化更显式和易调试，但也会使代码变得冗长和不直观。如果有些状态严格属于单个组件，最好还是作为组件的局部状态，比如temp变量,tempcount,tempcount2作为组件的局部状态。</p> <pre><code class="prism language-html"><span class="token comment"><!-- App.vue --></span><span class="token tag"><span class="token tag"><span class="token punctuation"><</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation"><</span>div</span><span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>example<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     {<!-- -->{count}}     {<!-- -->{name}}     {<!-- -->{nameAlias}}<span class="token tag"><span class="token tag"><span class="token punctuation"></</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation"></</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation"><</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span><span class="token punctuation">{<!-- --></span> mapState<span class="token punctuation">}</span><span class="token keyword">from</span><span class="token string">'vuex'</span><span class="token comment">// 引入mapState</span><span class="token keyword">export</span><span class="token keyword">default</span><span class="token punctuation">{<!-- --></span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token punctuation">{<!-- --></span><span class="token comment">// 使用 Vuex 并不意味着你需要将所有的状态放入 Vuex。虽然将所有的状态放到 Vuex 会使状态变化更显式和易调试，但也会使代码变得冗长和不直观。</span><span class="token comment">// 如果有些状态严格属于单个组件，最好还是作为组件的局部状态。你应该根据你的应用开发需要进行权衡和确定。</span><span class="token comment">// 下面的temp变量,tempcount,tempcount2作为组件的局部状态</span>       temp<span class="token punctuation">:</span><span class="token string">'hello'</span><span class="token punctuation">,</span>       tempcount<span class="token punctuation">:</span><span class="token number">1</span>，       tempcount2<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>   computed<span class="token punctuation">:</span><span class="token punctuation">{<!-- --></span><span class="token comment">// tempCountPlusTempCount2 这个计算属性并没有涉及到vuex管理的状态</span><span class="token function">tempCountPlusTempCount2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>tempcount<span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>tempcount2<span class="token punctuation">}</span><span class="token comment">// 由于 Vuex 的状态存储是响应式的，所以可以使用计算属性来获得某个状态</span><span class="token comment">// 当状态改变时，都会重新求取计算属性，并且触发更新相关联的 DOM</span><span class="token comment">// 通过下面的计算属性，就可以在当前组件中访问到count,name,nameAlias等了 在模板中我们通过大括号符号打印出来</span><span class="token comment">// 下面的计算属性涉及到了vuex管理的状态</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">// 这实际上是ES6中对象的简化写法 完整写法是 count: function { return this.$store.state.count }</span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>age<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">// 这实际上是ES6中对象的简化写法 完整写法是 name: function { return this.$store.state.age }</span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>age<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">nameAlias</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>name<span class="token punctuation">}</span>       countplustempcount<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>tempcount<span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">countplustempcount2</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>tempcount2<span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token comment">// 但有一个问题</span><span class="token comment">// 当一个组件需要获取多个状态的时候，将这些状态都声明为计算属性会有些重复和冗余。比如上面的name(),count(),nameAlias(),显得重复，代码冗长</span><span class="token comment">// 为了解决这个问题，我们可以使用 mapState 辅助函数帮助我们生成计算属性，让你少按几次键：</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation"></</span>script</span><span class="token punctuation">></span></span></code></pre> <p>但有一个问题，当一个组件需要获取多个状态的时候，将这些状态都声明为计算属性会有些重复和冗余。比如上面的name(),count(),nameAlias(),显得重复，代码冗长。为了解决这个问题，我们可以使用 mapState 辅助函数帮助我们生成计算属性，让你少按几次键</p> <h1>mapState接收一个对象</h1> <p>mapState函数的可以接受一个对象Object<string | function>。对象中可以包含字符串或函数。mapState()函数的返回结果是一个对象。</p> <pre><code class="prism language-html"><span class="token tag"><span class="token tag"><span class="token punctuation"><</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation"><</span>div</span><span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>example<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     {<!-- -->{count}}     {<!-- -->{name}}     {<!-- -->{nameAlias}}<span class="token tag"><span class="token tag"><span class="token punctuation"></</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation"></</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation"><</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span><span class="token punctuation">{<!-- --></span> mapState<span class="token punctuation">}</span><span class="token keyword">from</span><span class="token string">'vuex'</span><span class="token keyword">export</span><span class="token keyword">default</span><span class="token punctuation">{<!-- --></span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token punctuation">{<!-- --></span>       temp<span class="token punctuation">:</span><span class="token string">'hello'</span><span class="token punctuation">,</span>       tempcount<span class="token punctuation">:</span><span class="token number">1</span>，       tempcount2<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>   computed<span class="token punctuation">:</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span>     count<span class="token punctuation">:</span><span class="token string">'count'</span><span class="token punctuation">,</span><span class="token comment">// string    映射 this.count 为 store.state.count的值</span><span class="token comment">// 箭头函数可使代码更简练</span>     name<span class="token punctuation">:</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token operator">=></span> state<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token comment">// function   映射 this.name 为 store.state.name的值</span>     nameAlias<span class="token punctuation">:</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token comment">// string   映射 this.nameAlias 为 store.state.name的值</span>     countplustempcount<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">// 用普通函数this指向vue实例,但是在箭头函数中this就不是指向vue实例了，所以这里必须用普通哈数</span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>tempcount<span class="token operator">+</span> state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">countplustempcount2</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>tempcount2<span class="token operator">+</span> state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation"></</span>script</span><span class="token punctuation">></span></span></code></pre> <ul> <li>我们继续看上面的mapState函数</li> </ul> <pre><code class="prism language-js">computed<span class="token punctuation">:</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span>     count<span class="token punctuation">:</span><span class="token string">'count'</span><span class="token punctuation">,</span><span class="token comment">// string    映射 this.count 为 store.state.count的值</span><span class="token comment">// 箭头函数可使代码更简练</span>     name<span class="token punctuation">:</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token operator">=></span> state<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token comment">// function   映射 this.name 为 store.state.name的值</span>     nameAlias<span class="token punctuation">:</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token comment">// string   映射 this.nameAlias 为 store.state.name的值</span>     countplustempcount<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">// 用普通函数this指向vue实例,但是在箭头函数中this就不是指向vue实例了，所以这里必须用普通哈数</span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>tempcount<span class="token operator">+</span> state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">countplustempcount2</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>tempcount2<span class="token operator">+</span> state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre> <ul> <li>上面mapState()函数接收了一个对象。</li> </ul> <p>对象的第一个属性是string类型的，<code>count: 'count'</code>, 这条语句映射出了this.count， 值等于store.state.count的值。</p> <p>对象的第二个属性是一个箭头函数，<code>name: (state) => state.name,</code>，映射 this.name 为 store.state.name的值。</p> <p>对象的第三个属性是一个string类型，<code>nameAlias: 'name'</code>，映射 this.nameAlias 为 store.state.name的值， 和第一个属性的用法本质是一致的，不过这里映射出的计算属性的名称与 state 的子节点名称不同。</p> <p>对象的第四个属性是一个普通函数，普通函数和箭头函数的不同之处在于，普通函数中的this指向了vue实例，因为可以访问到当前组件的局部状态，比如this.tempcount。</p> <p>对象的第五个属性是一个普通函数，第五个和第四个的用法本质是一样的，只不过第五个用了ES6中对象的简化写法。</p> <ul> <li>上面的mapState函数的返回值是一个对象，我们可以看作是这样的</li> </ul> <pre><code class="prism language-js">computed<span class="token punctuation">:</span><span class="token punctuation">{<!-- --></span><span class="token comment">// 这个对象就是mapState的返回值</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token function">nameAlias</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>name<span class="token punctuation">}</span>     countplustempcount<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>tempcount<span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">countplustempcount2</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>tempcount2<span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>把这个对象赋值给computed不就和原始的写法一样了吗，所以mapState起到了简化的作用。但是我们可以发现比起直接给computed赋值，这里少了tempCountPlusTempCount2这个计算属性。tempCountPlusTempCount2不是有vuex状态计算而来的，是根据组件内的局部状态计算来的。</p> <h1>mapState函数结合对象的扩展运算符运算符使用</h1> <p>对象的扩展运算符（<code>...</code>）用于取出参数对象的所有可遍历属性，拷贝到当前对象之中。为什么要用扩展运算符呢，我们观察到上面直接将mapState函数的返回值赋给computed对象的话，那么computed中就只有对vuex状态的获取，而没有了当前组件的局部状态，比如tempCountPlusTempCount2就没地方放了，所以我们用扩展运算符。</p> <pre><code class="prism language-js"><span class="token keyword">let</span> z<span class="token operator">=</span><span class="token punctuation">{<!-- --></span> a<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> n<span class="token operator">=</span><span class="token punctuation">{<!-- --></span><span class="token operator">...</span>z<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 对象的扩展运算符（...）用于取出参数对象的所有可遍历属性，拷贝到当前对象之中</span> n<span class="token comment">// { a: 3, b: 4 }</span></code></pre> <p>所以利用扩展运算符将下面mapState函数的返回值对象</p> <pre><code class="prism language-js">computed<span class="token punctuation">:</span><span class="token punctuation">{<!-- --></span><span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span>         count<span class="token punctuation">:</span><span class="token string">'count'</span><span class="token punctuation">,</span><span class="token comment">// string    映射 this.count 为 store.state.count的值</span><span class="token comment">// 箭头函数可使代码更简练</span>         name<span class="token punctuation">:</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token operator">=></span> state<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token comment">// function   映射 this.name 为 store.state.name的值</span>         nameAlias<span class="token punctuation">:</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token comment">// string   映射 this.nameAlias 为 store.state.name的值</span>         countplustempcount<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">// 用普通函数this指向vue实例,但是在箭头函数中this就不是指向vue实例了，所以这里必须用普通哈数</span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>tempcount<span class="token operator">+</span> state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">countplustempcount2</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>tempcount2<span class="token operator">+</span> state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre> <p>上面的结果</p> <pre><code class="prism language-js">computed<span class="token punctuation">:</span><span class="token punctuation">{<!-- --></span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token function">nameAlias</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>name<span class="token punctuation">}</span>     countplustempcount<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>tempcount<span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">countplustempcount2</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>tempcount2<span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>于是可以将组将内的计算属性和获取vuex状态的计算属性写在一起了。</p> <pre><code class="prism language-js">computed<span class="token punctuation">:</span><span class="token punctuation">{<!-- --></span><span class="token function">tempCountPlusTempCount2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>tempcount<span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>tempcount2<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span>         count<span class="token punctuation">:</span><span class="token string">'count'</span><span class="token punctuation">,</span><span class="token comment">// string    映射 this.count 为 store.state.count的值</span><span class="token comment">// 箭头函数可使代码更简练</span>         name<span class="token punctuation">:</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token operator">=></span> state<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token comment">// function   映射 this.name 为 store.state.name的值</span>         nameAlias<span class="token punctuation">:</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token comment">// string   映射 this.nameAlias 为 store.state.name的值</span>         countplustempcount<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">// 用普通函数this指向vue实例,但是在箭头函数中this就不是指向vue实例了，所以这里必须用普通哈数</span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>tempcount<span class="token operator">+</span> state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">countplustempcount2</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>tempcount2<span class="token operator">+</span> state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre> <p>这就是mapState的基本用法。</p> <h1>mapState函数接受一个数组</h1> <p>当映射的计算属性的名称与 state 的子节点名称相同时，我们也可以给<code>mapState</code> 传一个字符串数组。</p> <pre><code class="prism language-js">computed<span class="token punctuation">:</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token comment">// 映射 this.count 为 store.state.count</span><span class="token string">'count'</span><span class="token punctuation">,</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre> <p>上面的写法可以看作</p> <pre><code class="prism language-js">computed<span class="token punctuation">:</span><span class="token punctuation">{<!-- --></span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <h1>最终版的mapState</h1> <pre><code class="prism language-js">computed<span class="token punctuation">:</span><span class="token punctuation">{<!-- --></span><span class="token function">tempCountPlusTempCount2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>tempcount<span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>tempcount2<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'count'</span><span class="token punctuation">,</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span>         nameAlias<span class="token punctuation">:</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token comment">// string   映射 this.nameAlias 为 store.state.name的值</span>         countplustempcount<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">// 用普通函数this指向vue实例,但是在箭头函数中this就不是指向vue实例了，所以这里必须用普通哈数</span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>tempcount<span class="token operator">+</span> state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">countplustempcount2</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>tempcount2<span class="token operator">+</span> state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre> </div> 			
                                <div class="col-md-12 mt-5">
                                                                        <p>上一个：<a href="/html/category/article-3766.htm">vue更新数据后重新请求数据并刷新页面</a></p>
                                                                        <p>下一个：<a href="/html/category/article-4078.htm">Android 弹窗设计规范</a></p>
                                                                    </div>

                                                                <div class="panel panel-default mt-5">
                                    <div class="panel-heading">
                                        <h3 class="m-0">推荐文章</h3>
                                    </div>
                                    <div class="panel-body">
                                        <ul class="p-0 x-0">
                                                                                        <li class="py-2"><a href="/html/category/article-1599.htm">vue实现可以快进后退的跑马灯组件_vue.js</a></li>
                                                                                        <li class="py-2"><a href="/html/category/article-1584.htm">access update语句执行_用pymysql实现对多行数据的insert和update加速</a></li>
                                                                                        <li class="py-2"><a href="/html/category/article-1582.htm">Qt 实现文字输入框，带字数限制</a></li>
                                                                                        <li class="py-2"><a href="/html/category/article-1522.htm">C ++中的虚拟基类</a></li>
                                                                                        <li class="py-2"><a href="/html/category/article-1472.htm">java遍历map、map键排序、值排序</a></li>
                                                                                        <li class="py-2"><a href="/html/category/article-1466.htm">asyncio 异步编程_在线工具</a></li>
                                                                                        <li class="py-2"><a href="/html/category/article-1447.htm">Feign 异常传递</a></li>
                                                                                        <li class="py-2"><a href="/html/category/article-1438.htm">PHP数组运算符</a></li>
                                                                                        <li class="py-2"><a href="/html/category/article-1400.htm">FreeRTOS实时操作系统队列的API函数讲解_操作系统</a></li>
                                                                                        <li class="py-2"><a href="/html/category/article-1389.htm">vue init download template_vue.extend和vue.component的区别</a></li>
                                                                                    </ul>
                                    </div>
                                </div>
                                                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-7361.htm" title="哪种猫粮比较健康又不贵（哪种猫粮比较健康又不贵的）">哪种猫粮比较健康又不贵（哪种猫粮比较健康又不贵的）</a></li>
                        <li class="py-2"><a href="/html/category/article-7499.htm" title="天津宠物店寄养宠物一天多少钱（天津宠物店寄养宠物一天多少钱费用）">天津宠物店寄养宠物一天多少钱（天津宠物店寄养宠物一天多少钱费用）</a></li>
                        <li class="py-2"><a href="/html/category/article-7867.htm" title="动物疫苗接种方法有哪几种类型（动物疫苗接种方法有哪几种类型的）">动物疫苗接种方法有哪几种类型（动物疫苗接种方法有哪几种类型的）</a></li>
                        <li class="py-2"><a href="/html/category/article-7544.htm" title="宠物医院参观体会（参观宠物医院实验报告）">宠物医院参观体会（参观宠物医院实验报告）</a></li>
                        <li class="py-2"><a href="/html/category/article-6946.htm" title="吉川春代啥意思（学到了）吉川春代日语是什么意思，仙剑剧情，吉川，">吉川春代啥意思（学到了）吉川春代日语是什么意思，仙剑剧情，吉川，</a></li>
                        <li class="py-2"><a href="/html/category/article-6854.htm" title="狗粮生产赚钱吗现在（狗粮生产赚钱吗现在多少钱）">狗粮生产赚钱吗现在（狗粮生产赚钱吗现在多少钱）</a></li>
                        <li class="py-2"><a href="/html/category/article-7637.htm" title="动物医院社会实践报告范文 动物医院社会实践报告范文怎么写">动物医院社会实践报告范文 动物医院社会实践报告范文怎么写</a></li>
                        <li class="py-2"><a href="/html/category/article-6993.htm" title="南京宠物寄养（南京宠物寄养家庭）">南京宠物寄养（南京宠物寄养家庭）</a></li>
                        <li class="py-2"><a href="/html/category/article-6763.htm" title="动物医院英语短语怎么说怎么写的（动物医院的英文单词）">动物医院英语短语怎么说怎么写的（动物医院的英文单词）</a></li>
                        <li class="py-2"><a href="/html/category/article-7590.htm" title="茅台 上市时间(茅台上市是哪一年)">茅台 上市时间(茅台上市是哪一年)</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">38</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </div>
                <!-- Footer -->
        <footer class="footer">
            <div class="parallax_background parallax-window" data-parallax="scroll" data-image-src="/assets/addons/xcblog/img/srilankaaddress/footer.jpg" data-speed="0.8"></div>
            <div class="footer_overlay"></div>
            <div class="container">
                <div class="row">
                    <div class="col">
                        <div class="footer_content text-center d-flex flex-column align-items-center justify-content-center">
                            <p>
                                Sri Lanka Address 版权所有
                                <br />
                                Powered by WordPress
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </footer>
    </div>
    <script src="/assets/addons/xcblog/js/frontend/srilankaaddress/jquery-3.2.1.min.js"></script>
    <script src="/assets/addons/xcblog/css/srilankaaddress/bootstrap-4.1.2/popper.js"></script>
    <script src="/assets/addons/xcblog/css/srilankaaddress/bootstrap-4.1.2/bootstrap.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/owl.carousel.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/easing/easing.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/parallax-js-master/parallax.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/srilankaaddress/about.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>