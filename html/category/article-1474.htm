<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://srilankaaddress.github.io/html/category/article-1474.htm" />
    <title>Android 图像显示系统基础知识之 BitTube - Sri Lanka Address</title>
        <meta charset="utf-8">
    <link rel="icon" href="/assets/addons/xcblog/img/srilankaaddress/favicon.ico" type="image/x-icon"/>
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="description" content="AerobicsFit template project">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?e8fff5fa52c11c99c5cdad6284174bdb";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/srilankaaddress/bootstrap-4.1.2/bootstrap.min.css">
    <link href="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/font-awesome-4.7.0/css/font-awesome.min.css" rel="stylesheet" type="text/css">
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/owl.carousel.css">
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/owl.theme.default.css">
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/animate.css">
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/srilankaaddress/about.css">
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/srilankaaddress/about_responsive.css">
</head>

<body>
    <div class="super_container">
                <!-- Header -->
        <header class="header">
            <div class="container">
                <div class="row">
                    <div class="col">
                        <div class="header_content d-flex flex-row align-items-center justify-content-start">
                            <div class="logo">Sri Lanka<span> Address</span></div>
                            <nav class="main_nav">
                                <ul class="d-flex flex-row align-items-center justify-content-start">
                                                                        <li><a href="/">首页</a></li>
                                                                        <li><a href="/html/category/">文章分类</a></li>
                                                                        <li><a href="#">关于</a></li>
                                    <li><a href="#">联系</a></li>
                                </ul>
                            </nav>
                            <div class="social header_social">
                                <ul class="d-flex flex-row align-items-center justify-content-start">
                                    <li><a href="#"><i class="fa fa-pinterest" aria-hidden="true"></i></a></li>
                                    <li><a href="#"><i class="fa fa-linkedin" aria-hidden="true"></i></a></li>
                                    <li><a href="#"><i class="fa fa-instagram" aria-hidden="true"></i></a></li>
                                    <li><a href="#"><i class="fa fa-facebook" aria-hidden="true"></i></a></li>
                                    <li><a href="#"><i class="fa fa-twitter" aria-hidden="true"></i></a></li>
                                </ul>
                            </div>
                            <div class="hamburger ml-auto"><i class="fa fa-bars" aria-hidden="true"></i></div>
                        </div>
                    </div>
                </div>
            </div>
        </header>
        <!-- Menu -->
        <div class="menu">
            <div class="menu_content d-flex flex-column align-items-center justify-content-center">
                <ul class="menu_nav_list text-center">
                                        <li><a href="index.html">Home</a></li>
                                        <li><a href="index.html">Home</a></li>
                                        <li><a href="#">关于</a></li>
                    <li><a href="#">联系</a></li>
                </ul>
            </div>
        </div>
        <!-- Home -->
        <div class="home">
            <div class="parallax_background parallax-window" data-parallax="scroll" data-image-src="/assets/addons/xcblog/img/srilankaaddress/about.jpg" data-speed="0.8"></div>
            <div class="home_container">
                <div class="container">
                    <div class="row">
                        <div class="col">
                            <div class="home_content">
                                <div class="home_title">Android 图像显示系统基础知识之 BitTube</div>
                                <div class="breadcrumbs">
                                    <ul class="d-flex flex-row align-items-center justify-content-start">
                                        <li><a href="/">首页</a></li>
                                        <li><a href="/html/category/">文章分类</a></li>
                                        <li>正文</li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- Classes -->
        <div class="classes">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                        <div class="row row-eq-height">
                            <div class="col-md-12">
                                  				  				  				<hr/> <h4 class="postTitle" style="text-align: left"><strong><span style="color: rgba(224, 62, 45, 1); font-size: 16px">必读：</span></strong></h4> <h4 class="postTitle" style="text-align: left; padding-left: 40px"><strong><span style="font-size: 15px">Android 12(S) 图像显示系统 - 开篇</span></strong></h4> <hr/> <h2>一、基本概念</h2> <hr/> <p>在Android显示子系统中，我们会看到有使用BitTube来进行跨进程数据传递。BitTube的实现很简洁，就是一对“parcel-able”模式的socket，用Linux/Unix中的专业术语就是socketpair。socketpair是Linux/Unix系统中用于进程间通信的一种机制，和pipe十分类似。</p> <p>socketpair利用socket为双方建立了全双工的通信管道(communication pipe)。通过文件描述符的复用(dup/dup2)，可以传递socket handle到另一个进程，复用它并开启通信。</p> <p>BitTube使用了Linux/Unix socket中的顺序数据包(sequenced packets，SOCK_SEQPACKET)，像SOCK_DGRAM，它只传送整包数据；又像SOCK_STREAM，面向连接且提供有序的数据报传送。</p> <p>尽管socketpair是一个全双工的管道，但BitTube是按照单向方式使用它的：一端写入数据，另一端读出数据。收、发缓存默认限制为4KB大小。在BitTube中，提供了收发序列化对象的方法(sendObjects, recvObjects)。</p> <h2>二、源码解读</h2> <hr/> <p>BitTube代码量很少,在(frameworks\native\libs\gui\BitTube.cpp)中,我们直接看它的几个重要的接口。</p> <h3>2.1 构造函数</h3> <pre class="language-cpp"><code>[/frameworks/native/libs/gui/include/private/gui/BitTube.h] BitTube() = default; // 默认构造函数，未初始化 explicit BitTube(size_t bufsize); // 创建指定发送、接收缓存大小的BitTube对象，creates a BitTube with a a specified send and receive buffer size explicit BitTube(DefaultSizeType); // 默认缓存大小4KB，creates a BitTube with a default (4KB) send buffer explicit BitTube(const Parcel& data); // 从Parcel中解析创建对象，用于跨进程传递该对象</code></pre> <p>BitTube提供了四个构造函数，用于不同的场景</p> <pre class="language-cpp"><code>[/frameworks/native/libs/gui/BitTube.cpp] BitTube::BitTube(size_t bufsize) {     init(bufsize, bufsize); // 根据指定的buffer size,进行初始化 }  BitTube::BitTube(DefaultSizeType) : BitTube(DEFAULT_SOCKET_BUFFER_SIZE) {}  BitTube::BitTube(const Parcel& data) {     readFromParcel(&data); }</code></pre> <p>构造函数中最主要的还是调用了init方法进行初始化。</p> <h3>2.2 init初始化</h3> <p>init方法中就是去创建/配置sockect pair</p> <pre class="language-cpp"><code>[/frameworks/native/libs/gui/BitTube.cpp] void BitTube::init(size_t rcvbuf, size_t sndbuf) {     int sockets[2];     if (socketpair(AF_UNIX, SOCK_SEQPACKET, 0, sockets) == 0) { // 创建socket pair         size_t size = DEFAULT_SOCKET_BUFFER_SIZE;         setsockopt(sockets[0], SOL_SOCKET, SO_RCVBUF, &rcvbuf, sizeof(rcvbuf)); // //对socketfd进行配置         setsockopt(sockets[1], SOL_SOCKET, SO_SNDBUF, &sndbuf, sizeof(sndbuf));         // since we don't use the "return channel", we keep it small...         setsockopt(sockets[0], SOL_SOCKET, SO_SNDBUF, &size, sizeof(size));         setsockopt(sockets[1], SOL_SOCKET, SO_RCVBUF, &size, sizeof(size));         fcntl(sockets[0], F_SETFL, O_NONBLOCK); //设置为非阻塞         fcntl(sockets[1], F_SETFL, O_NONBLOCK); //设置为非阻塞         mReceiveFd.reset(sockets[0]); //用于数据接收的socket handle         mSendFd.reset(sockets[1]);    //用于数据发送的socket handle     } else {         mReceiveFd.reset();         ALOGE("BitTube: pipe creation failed (%s)", strerror(errno));     } }</code></pre> <p>成员变量mReceiveFd,看起来是一个接收端,实际上这个fd也可以用来发送，同样mSendFd也可以用来接收，只是BitTube是按照单向方式使用它的：一端写入数据，另一端读出数据。</p> <h3 id="sendobjects与recvobjects">2.3 sendObjects 发送数据</h3> <p>先看其定义，sendObject实现为一个模板函数,sendObjects里调用的是write成员函数,write中调用send接口将数据写入mSendFd中。</p> <pre class="language-cpp"><code>[/frameworks/native/libs/gui/include/private/gui/BitTube.h] // send objects (sized blobs). All objects are guaranteed to be written or the call fails. template <typename T> static ssize_t sendObjects(BitTube* tube, T const* events, size_t count) {         return sendObjects(tube, events, count, sizeof(T)); }</code></pre> <p>发送成功则返回：发送的对象的个数</p> <p>发送失败则返回：负数</p> <pre class="language-cpp"><code>[ /frameworks/native/libs/gui/BitTube.cpp] ssize_t BitTube::sendObjects(BitTube* tube, void const* events, size_t count, size_t objSize) {     const char* vaddr = reinterpret_cast<const char*>(events);     ssize_t size = tube->write(vaddr, count * objSize);     ...     return size < 0 ? size : size / static_cast<ssize_t>(objSize); }  ssize_t BitTube::write(void const* vaddr, size_t size) {     ssize_t err, len;     do {         len = ::send(mSendFd, vaddr, size, MSG_DONTWAIT | MSG_NOSIGNAL); // 通过mSendFd，发送数据         // cannot return less than size, since we're using SOCK_SEQPACKET         err = len < 0 ? errno : 0;     } while (err == EINTR);     return err == 0 ? len : -err; }</code></pre> <h3>2.4 recvObjects 接收数据</h3> <p>先看其定义，recvObject实现为一个模板函数,recvObjects里调用的是read成员函数,read中调用rev接口将数据从mReceiveFd中读出。</p> <p>接收成功则返回：接收的对象的个数</p> <p>接收失败则返回：负数</p> <pre class="language-cpp"><code>[ /frameworks/native/libs/gui/include/private/gui/BitTube.h] template <typename T> static ssize_t recvObjects(BitTube* tube, T* events, size_t count) {     return recvObjects(tube, events, count, sizeof(T)); } [/frameworks/native/libs/gui/BitTube.cpp] ssize_t BitTube::recvObjects(BitTube* tube, void* events, size_t count, size_t objSize) {     char* vaddr = reinterpret_cast<char*>(events);     ssize_t size = tube->read(vaddr, count * objSize);     ...     return size < 0 ? size : size / static_cast<ssize_t>(objSize); }  ssize_t BitTube::read(void* vaddr, size_t size) {     ssize_t err, len;     do {         len = ::recv(mReceiveFd, vaddr, size, MSG_DONTWAIT);         err = len < 0 ? errno : 0;     } while (err == EINTR);     if (err == EAGAIN || err == EWOULDBLOCK) {         // EAGAIN means that we have non-blocking I/O but there was no data to be read. Nothing the         // client should care about.         return 0;     }     return err == 0 ? len : -err; }</code></pre> <p><span style="color: rgba(206, 212, 217, 1)">本文作者@</span><span style="color: rgba(206, 212, 217, 1)">二的次方</span><span style="color: rgba(206, 212, 217, 1)">&nbsp; 2022-04-18 发布于博客园</span></p> <h3>2.5 writeToParcel & readFromParcel</h3> <p>writeToParcel & readFromParcel用于跨进程传递BitTube对象，进行序列化和反序列化，主要是传递mReceivedFd 和 mSendFd。</p> <pre class="language-cpp"><code> status_t BitTube::writeToParcel(Parcel* reply) const {     if (mReceiveFd < 0) return -EINVAL;      status_t result = reply->writeDupFileDescriptor(mReceiveFd); // mReceiveFd写入Parcel     mReceiveFd.reset();     if (result != NO_ERROR) {         return result;     }     result = reply->writeDupFileDescriptor(mSendFd);// mSendFd写入Parcel     mSendFd.reset();     return result; }  status_t BitTube::readFromParcel(const Parcel* parcel) {     mReceiveFd.reset(dup(parcel->readFileDescriptor())); // 获取 mReceiveFd     if (mReceiveFd < 0) {         mReceiveFd.reset();         int error = errno;         ALOGE("BitTube::readFromParcel: can't dup file descriptor (%s)", strerror(error));         return -error;     }     mSendFd.reset(dup(parcel->readFileDescriptor())); // 获取 mSendFd     if (mSendFd < 0) {         mSendFd.reset();         int error = errno;         ALOGE("BitTube::readFromParcel: can't dup file descriptor (%s)", strerror(error));         return -error;     }     return NO_ERROR; }</code></pre> <h2>三、使用</h2> <p>关于如何使用BitTube实现跨进程的数据通信，提供一个简单的测试Demo:</p> <p>https://github.com/yrzroger/BitTubeTest</p> <p>在测试demo中，创建了一个BitTube对象，这样就建立了通信的 socketpair。</p> <p>然后使用fork系统调用创建新的进程，来模拟跨进的通信中的不同进程(一个父进程，一个子进程)</p> <p>父进程和子进程就可以使用BitTube对象的sendObjects方法发送数据，或使用recvObjects方法接收数据</p> <p>Demo的主要代码如下：</p> <pre class="language-cpp"><code>struct Event {     int id;     int message; };  int main() {     gui::BitTube* dataChannel = new gui::BitTube(gui::BitTube::DefaultSize);          printf("\033[0mBitTube info: mReceiveFd=%d, mSendFd=%d\n", dataChannel->getFd(), dataChannel->getSendFd());      if(fork()) {         // 父进程发送数据         Event events[] = { {0, 888}, {1, 999} };         ssize_t size = gui::BitTube::sendObjects(dataChannel, events, 2);         if(size < 0)             printf("\033[32mprocess(%d) send failed, in parent process", getpid());         else             printf("\033[32mprocess(%d) send success, object size = %d\n", getpid(), size);         sleep(1);         // 父进程接收数据         size = gui::BitTube::recvObjects(dataChannel, events, 2);         if(size < 0) {             printf("\033[32mprocess(%d) receive failed, in child process", getpid());         }         else {             printf("\033[32mprocess(%d) receive success, object size = %d\n", getpid(), size);             for(int i = 0; i < size; ++i) {                 printf("\033[32mprocess(%d): id=%d, message=%d\n", getpid(), events[i].id, events[i].message);             }         }         sleep(1);              } else {         // 子进程接收数据         Event events[2];         ssize_t size = gui::BitTube::recvObjects(dataChannel, events, 2);         if(size < 0) {             printf("\033[31mprocess(%d) receive failed, in child process", getpid());         }         else {             printf("\033[31mprocess(%d) receive success, object size = %d\n", getpid(), size);             for(int i = 0; i < size; ++i) {                 printf("\033[31mprocess(%d): id=%d, message=%d\n", getpid(), events[i].id, events[i].message);             }         }         // 子进程发送数据         events[0].message+=1; events[1].message+=1;         size = gui::BitTube::sendObjects(dataChannel, events, 2);         if(size < 0)             printf("\033[31mprocess(%d) send failed, in parent process", getpid());         else             printf("\033[31mprocess(%d) send success, object size = %d\n", getpid(), size);         sleep(2);     }     delete dataChannel;      return 0; }</code></pre> <p>放到Android源码下，执行mm，编译得到可执行档BitTubeTest，push到测试板/system/bin/目录下 执行BitTubeTest可以查看打印的结果：</p> <p>绿色字体是父进程的打印(PID=12374)，红色字体是子进程的打印(PID=12375)</p> <p><img fetchpriority="high" decoding="async" style="display: block; margin-left: auto; margin-right: auto" src="http://img.555519.xyz/uploads3/20220509/679e8ee6b27692ce8cb57508da3d4ba8.jpg" alt="Android 图像显示系统基础知识之 BitTube" width="417" height="171"/></p> <p>在Android图像显示子系统中， /frameworks/native/libs/gui/DisplayEventReceiver.cpp 及 &nbsp;/frameworks/native/services/surfaceflinger/Scheduler/EventThread.cpp 中可以看到使用BitTube的身影。</p> <p>BitTube用于建立跨进程传递数据的通道，主要是display evnets， 比如hotplug events , vsync events等等</p> <p>至于具体的使用过程，在接下来的文章中我们会再详细介绍，，本篇就仅先讲解必要的基础知识。</p> 			
                                <div class="col-md-12 mt-5">
                                                                        <p>上一个：<a href="/html/category/article-1473.htm">jackson在springboot中的使用-自定义参数转换器</a></p>
                                                                        <p>下一个：<a href="/html/category/article-1475.htm">MySQL必知必会</a></p>
                                                                    </div>

                                                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-7269.htm" title="猫咪抓破了不***有没有事（猫咪抓伤没***会不会有事）">猫咪抓破了不***有没有事（猫咪抓伤没***会不会有事）</a></li>
                        <li class="py-2"><a href="/html/category/article-7177.htm" title="预制菜第一品牌（新疆预制菜第一品牌）">预制菜第一品牌（新疆预制菜第一品牌）</a></li>
                        <li class="py-2"><a href="/html/category/article-4560.htm" title="宠物猫咪驱虫多少钱一只（猫驱虫多少钱一次?）">宠物猫咪驱虫多少钱一只（猫驱虫多少钱一次?）</a></li>
                        <li class="py-2"><a href="/html/category/article-5580.htm" title="宠物领养哪个平台好（哪个平台可以领养宠物）">宠物领养哪个平台好（哪个平台可以领养宠物）</a></li>
                        <li class="py-2"><a href="/html/category/article-6008.htm" title="上海宠物领养中心官网 上海宠物领养中心官网电话">上海宠物领养中心官网 上海宠物领养中心官网电话</a></li>
                        <li class="py-2"><a href="/html/category/article-7314.htm" title="动物疫苗的作用是什么 动物疫苗的作用是什么呢">动物疫苗的作用是什么 动物疫苗的作用是什么呢</a></li>
                        <li class="py-2"><a href="/html/category/article-6854.htm" title="狗粮生产赚钱吗现在（狗粮生产赚钱吗现在多少钱）">狗粮生产赚钱吗现在（狗粮生产赚钱吗现在多少钱）</a></li>
                        <li class="py-2"><a href="/html/category/article-6717.htm" title="一片枫叶的拼音怎么写的呀怎么读（一片枫叶打一成语）">一片枫叶的拼音怎么写的呀怎么读（一片枫叶打一成语）</a></li>
                        <li class="py-2"><a href="/html/category/article-7084.htm" title="动物疫苗在常温下能放多久不变质呢视频（动物疫苗未冷藏几小时失效）">动物疫苗在常温下能放多久不变质呢视频（动物疫苗未冷藏几小时失效）</a></li>
                        <li class="py-2"><a href="/html/category/article-4559.htm" title="动物疫苗价格表最新图片大全（动物疫苗的使用方法及注意事项）">动物疫苗价格表最新图片大全（动物疫苗的使用方法及注意事项）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">10</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </div>
                <!-- Footer -->
        <footer class="footer">
            <div class="parallax_background parallax-window" data-parallax="scroll" data-image-src="/assets/addons/xcblog/img/srilankaaddress/footer.jpg" data-speed="0.8"></div>
            <div class="footer_overlay"></div>
            <div class="container">
                <div class="row">
                    <div class="col">
                        <div class="footer_content text-center d-flex flex-column align-items-center justify-content-center">
                            <p>
                                Sri Lanka Address 版权所有
                                <br />
                                Powered by WordPress
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </footer>
    </div>
    <script src="/assets/addons/xcblog/js/frontend/srilankaaddress/jquery-3.2.1.min.js"></script>
    <script src="/assets/addons/xcblog/css/srilankaaddress/bootstrap-4.1.2/popper.js"></script>
    <script src="/assets/addons/xcblog/css/srilankaaddress/bootstrap-4.1.2/bootstrap.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/owl.carousel.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/easing/easing.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/parallax-js-master/parallax.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/srilankaaddress/about.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>