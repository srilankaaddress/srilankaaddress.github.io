<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://srilankaaddress.github.io/html/category/article-1612.htm" />
    <title>C语言 模拟实现memcpy与memmove函数详解_C 语言 - Sri Lanka Address</title>
        <meta charset="utf-8">
    <link rel="icon" href="/assets/addons/xcblog/img/srilankaaddress/favicon.ico" type="image/x-icon"/>
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="description" content="AerobicsFit template project">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?e8fff5fa52c11c99c5cdad6284174bdb";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/srilankaaddress/bootstrap-4.1.2/bootstrap.min.css">
    <link href="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/font-awesome-4.7.0/css/font-awesome.min.css" rel="stylesheet" type="text/css">
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/owl.carousel.css">
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/owl.theme.default.css">
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/animate.css">
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/srilankaaddress/about.css">
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/srilankaaddress/about_responsive.css">
</head>

<body>
    <div class="super_container">
                <!-- Header -->
        <header class="header">
            <div class="container">
                <div class="row">
                    <div class="col">
                        <div class="header_content d-flex flex-row align-items-center justify-content-start">
                            <div class="logo">Sri Lanka<span> Address</span></div>
                            <nav class="main_nav">
                                <ul class="d-flex flex-row align-items-center justify-content-start">
                                                                        <li><a href="/">首页</a></li>
                                                                        <li><a href="/html/category/">文章分类</a></li>
                                                                        <li><a href="#">关于</a></li>
                                    <li><a href="#">联系</a></li>
                                </ul>
                            </nav>
                            <div class="social header_social">
                                <ul class="d-flex flex-row align-items-center justify-content-start">
                                    <li><a href="#"><i class="fa fa-pinterest" aria-hidden="true"></i></a></li>
                                    <li><a href="#"><i class="fa fa-linkedin" aria-hidden="true"></i></a></li>
                                    <li><a href="#"><i class="fa fa-instagram" aria-hidden="true"></i></a></li>
                                    <li><a href="#"><i class="fa fa-facebook" aria-hidden="true"></i></a></li>
                                    <li><a href="#"><i class="fa fa-twitter" aria-hidden="true"></i></a></li>
                                </ul>
                            </div>
                            <div class="hamburger ml-auto"><i class="fa fa-bars" aria-hidden="true"></i></div>
                        </div>
                    </div>
                </div>
            </div>
        </header>
        <!-- Menu -->
        <div class="menu">
            <div class="menu_content d-flex flex-column align-items-center justify-content-center">
                <ul class="menu_nav_list text-center">
                                        <li><a href="index.html">Home</a></li>
                                        <li><a href="index.html">Home</a></li>
                                        <li><a href="#">关于</a></li>
                    <li><a href="#">联系</a></li>
                </ul>
            </div>
        </div>
        <!-- Home -->
        <div class="home">
            <div class="parallax_background parallax-window" data-parallax="scroll" data-image-src="/assets/addons/xcblog/img/srilankaaddress/about.jpg" data-speed="0.8"></div>
            <div class="home_container">
                <div class="container">
                    <div class="row">
                        <div class="col">
                            <div class="home_content">
                                <div class="home_title">C语言 模拟实现memcpy与memmove函数详解_C 语言</div>
                                <div class="breadcrumbs">
                                    <ul class="d-flex flex-row align-items-center justify-content-start">
                                        <li><a href="/">首页</a></li>
                                        <li><a href="/html/category/">文章分类</a></li>
                                        <li>正文</li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- Classes -->
        <div class="classes">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                        <div class="row row-eq-height">
                            <div class="col-md-12">
                                  				  				  				<div id="navCategory"> <h5 class="catalogue">目录</h5> <ul class="first_class_ul"> <li>一、memcpy函数的介绍</li> <ul class="second_class_ul"> <li>1.函数的声明</li> <li>2.函数功能与注意事项</li> <li>3.函数的使用</li> </ul> <li>二、模拟实现memcpy函数</li> <ul class="second_class_ul"> <li>1.模拟分析</li> <li>2.模拟实现</li> </ul> <li>三、memmove函数的介绍</li> <ul class="second_class_ul"> <li>1.函数的声明</li> <li>2.为什么会有memmove函数</li> <li>3.函数功能与注意事项</li> <li>4.函数的使用</li> </ul> <li>四、模拟实现memmove函数</li> <ul class="second_class_ul"> <li>1.模拟分析</li> <li>2.模拟实现</li> </ul> </ul> </div> <p class="maodian"></p> <h2>一、memcpy函数的介绍</h2> <p class="maodian"></p> <p class="maodian"></p> <h3>1.函数的声明</h3> <blockquote> <p>void * memcpy ( void * destination, const void * source, size_t num );</p> </blockquote> <p class="maodian"></p> <h3>2.函数功能与注意事项</h3> <ul> <li>函数memcpy从source的位置开始向后复制num个字节的数据到destination的内存位置。</li> <li>注意这个函数在遇到 '\0' 的时候并不会停下来。</li> <li>如果source和destination有任何的重叠，复制的结果都是未定义的。</li> <li>memcpy函数可以拷贝任何的类型的数据，不像strcpy函数只能拷贝字符串。</li> </ul> <p class="maodian"></p> <h3>3.函数的使用</h3> <div class="ay1code"> <pre class="brush:cpp;">#include <stdio.h>  #include <string.h>//使用memcpy函数时记得引用它的头文件  int main()  {  	int arr1[10] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };  	int arr2[5] = { 0 };//总共大小为20字节  	memcpy(arr1, arr2, 20//拷贝20个字节的数据);//将arr2中的数据拷贝到arr1中  	int i = 0;  	printf("拷贝后arr1中的数据为：");  	for (i = 0; i < 10; i++)  	{  		printf("%d ", arr1[i]);  	}  	return 0;  }</pre> </div> <p>运行结果：</p> <p style="text-align:center"><img fetchpriority="high" decoding="async" alt="" height="194" src="http://img.555519.xyz/uploads3/20220420/11395b199ec38a96e11980ebd836c9e9.jpg"></p> <p class="maodian"></p> <h2>二、模拟实现memcpy函数</h2> <p class="maodian"></p> <p class="maodian"></p> <h3>1.模拟分析</h3> <p>1.因为我们不知道我们要拷贝的是什么类型的数据，可能是char类型的数据，也可能是int类型的数据，还有可能是double类型的数据，这些不同类型数据的大小是不同的。为了实现一个能拷贝所有类型数据的memcpy函数，我们就只能一个字节一个字节的拷贝，因为最小类型的大小是一个字节，这样就能将所有类型的数据都进行拷贝了。</p> <p>2.因为我们不知道传到memcpy函数的地址是什么类型，所以我们在接收传过来的地址时要用void*类型的指针来接收。</p> <p>3.由于我们只需要将源地址存储的数据拷贝到目标地址里面，所以只需要改变目标地址处存储的内容，而不需要改变源地址处存储的地址。所以我们就需要用const void*类型的指针来接收源地址。</p> <p>4.为了实现链式访问，我们要将传进来的目标起始地址（destination）返回。由于这个函数在执行的时候会改变destination存储的内容，所以我们要重新创建一个void*类型的指针来存储这个地址。</p> <p>5.为了避免传进来的地址是空指针，我们需要用assert来断言传进来的地址不是空指针。</p> <p class="maodian"></p> <p class="maodian"></p> <h3>2.模拟实现</h3> <div class="ay1code"> <pre class="brush:cpp;">#include<stdio.h>  #include  //模拟实现memcpy  void* my_memcpy(void* dest, const void* scr, size_t count)  {  	assert(dest && scr);//断言传进来的地址不是空指针  	void* ret = dest;//保存目标起始地址  	while (count--)//拷贝源地址存储的数据  	{  		*(char*)dest = *(char*)scr;  		(char*)dest = (char*)dest + 1;  		(char*)scr = (char*)scr + 1;  	}  	return ret;//返回目标起始地址  }              //应用模拟实现的函数  int main()  {  	int arr1[] = { 6, 6, 6, 6, 6, 6, 6, 6, 6, 6 };  	int arr2[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };  	my_memcpy(arr2, arr1, 24);//拷贝6个字节的数据  	int i = 0;  	for (i = 0; i < 10; i++)  	{  		printf("%d ", arr2[i]);  	}  	return 0;  }</pre> </div> <p>运行结果：</p> <p style="text-align:center"><img decoding="async" alt="" height="175" src="http://img.555519.xyz/uploads3/20220420/21f573b210b73fb268ae8408008d0350.jpg"></p> <p class="maodian"><a name="_label2" rel="nofollow"></p> <h2>三、memmove函数的介绍</h2> <h3>1.函数的声明</h3> <blockquote> <p>void * memmove ( void * destination, const void * source, size_t num );</p> </blockquote> <p class="maodian"></p> <h3>2.为什么会有memmove函数</h3> <p>为什么会有memmove这个函数呢，这个还要从上面的memcpy函数说起。因为memcpy函数不能将一个数组的中的数据拷贝到自身（也就是目标数据是自己，源数据也是自己，只不过是一个数组里面不同的位置的数据拷贝到另外一个位置上），如果像这样拷贝就会出现重叠拷贝，会导致结果不是我们预期的结果。</p> <p>就像下面这个代码：</p> <div class="ay1code"> <pre class="brush:cpp;">//应用模拟实现的memcpy函数  int main()  {  	int arr[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };  	my_memcpy(arr + 2, arr, 24);//预期出现结果为1 2 1 2 3 4 5 6 9 10  	int i = 0;  	for (i = 0; i < 10; i++)  	{  		printf("%d ", arr[i]);//实际出现结果  	}  	return 0;  }</pre> </div> <p>运行结果：</p> <p style="text-align:center"><img decoding="async" alt="" height="192" src="http://img.555519.xyz/uploads3/20220420/3cbcac7502ff104260349065eb7507c4.jpg"></p> <p> 出现预期结果和实际结果不同的原因：</p> <p>出现这种结果的原因就是因为memcpy函数将自身数据拷贝到自身不同位置的时候出现了重叠拷贝。源数据的起始地址为arr，目标数据的起始地址arr + 2，当我们一进来memcpy这个函数的时候，我们就先将arr处的数据拷贝到arr + 2处，将arr + 1处的数据拷贝到arr + 3处，当我们想要将arr + 2处的数据拷贝到arr + 4处的时候，我们发现arr + 2处的数据已经被替换成了arr处的数据（1），于是我们就只能将1拷贝到arr + 4处；当我们要将arr + 3处的数据拷贝到arr + 5处的时候，我们发现arr + 3处的数据早已被替换成了arr + 1处的数据（2），所以我们只能将2拷贝到arr + 5处，就像这样反复的重叠拷贝，拷贝的数据一直都是1/2/1/2/1/2，直到拷贝完我们想要拷贝的字节数。</p> <p>于是为了将自身的数据拷贝到自身不同的位置处，我们就需要用memmove函数来实现，memmove函数就是为了解决上面这种问题而被创造的。</p> <p class="maodian"></p> <h3>3.函数功能与注意事项</h3> <ul> <li>memmove和memcpy的差别就是memmove函数处理的源内存块和目标内存块是可以重叠的。</li> <li>如果源空间和目标空间出现重叠，就得使用memmove函数处理。</li> </ul> <p class="maodian"></p> <h3>4.函数的使用</h3> <div class="ay1code"> <pre class="brush:cpp;">#include<stdio.h>  #include<string.h>//使用memmove函数时记得引用它的头文件  int main()                    {  	int arr[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };  	memmove(arr + 2, arr, 24);//预期出现结果为1 2 1 2 3 4 5 6 9 10  	int i = 0;  	for (i = 0; i < 10; i++)  	{  		printf("%d ", arr[i]);//实际出现结果  	}  	return 0;  }</pre> </div> <p style="text-align:center"><img loading="lazy" decoding="async" alt="" height="168" src="http://img.555519.xyz/uploads3/20220420/b15aca85d99fd7a96aec12d5a92792b6.jpg"></p> <p> 这次我们发现用memmove函数来拷贝的预期结果和实际结果就一样了，下面我们就讲讲memmove函数的模拟实现。</p> <p class="maodian"></p> <h2>四、模拟实现memmove函数</h2> <h3>1.模拟分析</h3> <p>1.将地址传进函数和函数接收地址的方法和上面的memcpy函数是一样的，memcpy函数需要注意的地方memmove函数同样需要注意，这里就不重复讲了，嘿嘿。</p> <p>2.memmove函数还需要注意的一点就是需要分析该怎么拷贝才不会重叠，下面为图解：</p> <p>情况一：dest小于等于src的地址</p> <p style="text-align:center"><img loading="lazy" decoding="async" alt="" height="339" src="http://img.555519.xyz/uploads3/20220420/a2be6da09901ec88f116dae4f5d7d15d.jpg"></p> <p>像下面这样从前往后拷贝，这样就不会重叠了。</p> <p style="text-align:center"><img loading="lazy" decoding="async" alt="" height="168" src="http://img.555519.xyz/uploads3/20220420/7e0cbadc13cfa6f089ae9c3d75148d78.jpg"></p> <p> 情况二：dest大于scr的地址</p> <p style="text-align:center"><img loading="lazy" decoding="async" alt="" height="317" src="http://img.555519.xyz/uploads3/20220420/ea305970d0c927a0d3d13b0d7897ef6e.jpg"></p> <p>像下面这样从后往前拷贝，这样就不会重叠了。</p> <p style="text-align:center"><img loading="lazy" decoding="async" alt="" height="201" src="http://img.555519.xyz/uploads3/20220420/d979362fdbc20b56dc724213befedf41.jpg"></p> <h3>2.模拟实现</h3> <div class="ay1code"> <pre class="brush:cpp;">#include<stdio.h>  #include<assert.h>  //模拟实现memmove  void* my_memmove(void* dest, const void* scr, size_t count)  {  	assert(dest && scr);//断言传进来的地址不是空指针  	void* ret = dest; //保存目标起始地址  	if (dest <= scr)//从前往后拷贝  	{  		while (count--)  		{  			*(char*)dest = *(char*)scr;  			(char*)dest = (char*)dest + 1;  			(char*)scr = (char*)scr + 1;  		}  	}  	else//从后往前拷贝  	{  		while (count--)  		{  			*((char*)dest + count) = *((char*)scr + count);  		}  	}  	return ret;  }                 //应用模拟实现的函数  int main()                    {  	int arr[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };  	my_memmove(arr + 2, arr, 24);//预期出现结果为1 2 1 2 3 4 5 6 9 10  	int i = 0;  	for (i = 0; i < 10; i++)  	{  		printf("%d ", arr[i]);//实际出现结果  	}  	return 0;  }</pre> </div> <p>  运行结果</p> <p style="text-align:center"><img loading="lazy" decoding="async" alt="" height="184" src="http://img.555519.xyz/uploads3/20220420/2fa5ed57f2c166ae334f645f8e8cefb9.jpg"></p> 			
                                <div class="col-md-12 mt-5">
                                                                        <p>上一个：<a href="/html/category/article-1611.htm">Druid10 监控</a></p>
                                                                        <p>下一个：<a href="/html/category/article-1613.htm">vue 动态组件组件复用_真正的动态声明性组件</a></p>
                                                                    </div>

                                                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-6008.htm" title="上海宠物领养中心官网 上海宠物领养中心官网电话">上海宠物领养中心官网 上海宠物领养中心官网电话</a></li>
                        <li class="py-2"><a href="/html/category/article-6027.htm" title="宠物店开业怎么做活动吸引人呢（宠物店开业怎么做活动吸引人呢图片）">宠物店开业怎么做活动吸引人呢（宠物店开业怎么做活动吸引人呢图片）</a></li>
                        <li class="py-2"><a href="/html/category/article-2834.htm" title="springboot嵌入式数据库derby初探">springboot嵌入式数据库derby初探</a></li>
                        <li class="py-2"><a href="/html/category/article-1964.htm" title="python查看包版本、更新单个包、卸载单个包">python查看包版本、更新单个包、卸载单个包</a></li>
                        <li class="py-2"><a href="/html/category/article-1922.htm" title="SpringCloud 之Hystrix Dashboard 服务监控">SpringCloud 之Hystrix Dashboard 服务监控</a></li>
                        <li class="py-2"><a href="/html/category/article-6203.htm" title="被猫爪子勾了一下出了一点血会死吗会感染吗（被猫爪子勾了一下出了一点血需要打疫苗吗）">被猫爪子勾了一下出了一点血会死吗会感染吗（被猫爪子勾了一下出了一点血需要打疫苗吗）</a></li>
                        <li class="py-2"><a href="/html/category/article-4453.htm" title="大香肠披萨（大香肠披萨梗）">大香肠披萨（大香肠披萨梗）</a></li>
                        <li class="py-2"><a href="/html/category/article-6202.htm" title="南京领养狗狗的地方有哪些（南京哪里有领养狗狗的地方）">南京领养狗狗的地方有哪些（南京哪里有领养狗狗的地方）</a></li>
                        <li class="py-2"><a href="/html/category/article-4106.htm" title="JAVA容器详解">JAVA容器详解</a></li>
                        <li class="py-2"><a href="/html/category/article-4413.htm" title="动物医院有宠物卖吗现在多少钱（动物医院贵吗）">动物医院有宠物卖吗现在多少钱（动物医院贵吗）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">38</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </div>
                <!-- Footer -->
        <footer class="footer">
            <div class="parallax_background parallax-window" data-parallax="scroll" data-image-src="/assets/addons/xcblog/img/srilankaaddress/footer.jpg" data-speed="0.8"></div>
            <div class="footer_overlay"></div>
            <div class="container">
                <div class="row">
                    <div class="col">
                        <div class="footer_content text-center d-flex flex-column align-items-center justify-content-center">
                            <p>
                                Sri Lanka Address 版权所有
                                <br />
                                Powered by WordPress
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </footer>
    </div>
    <script src="/assets/addons/xcblog/js/frontend/srilankaaddress/jquery-3.2.1.min.js"></script>
    <script src="/assets/addons/xcblog/css/srilankaaddress/bootstrap-4.1.2/popper.js"></script>
    <script src="/assets/addons/xcblog/css/srilankaaddress/bootstrap-4.1.2/bootstrap.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/owl.carousel.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/easing/easing.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/parallax-js-master/parallax.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/srilankaaddress/about.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>