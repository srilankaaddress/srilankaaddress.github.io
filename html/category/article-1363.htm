<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://srilankaaddress.github.io/html/category/article-1363.htm" />
    <title>ASP.NET Core使用AutoMapper组件_实用技巧 - Sri Lanka Address</title>
        <meta charset="utf-8">
    <link rel="icon" href="/assets/addons/xcblog/img/srilankaaddress/favicon.ico" type="image/x-icon"/>
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="description" content="AerobicsFit template project">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?e8fff5fa52c11c99c5cdad6284174bdb";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/srilankaaddress/bootstrap-4.1.2/bootstrap.min.css">
    <link href="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/font-awesome-4.7.0/css/font-awesome.min.css" rel="stylesheet" type="text/css">
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/owl.carousel.css">
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/owl.theme.default.css">
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/animate.css">
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/srilankaaddress/about.css">
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/srilankaaddress/about_responsive.css">
</head>

<body>
    <div class="super_container">
                <!-- Header -->
        <header class="header">
            <div class="container">
                <div class="row">
                    <div class="col">
                        <div class="header_content d-flex flex-row align-items-center justify-content-start">
                            <div class="logo">Sri Lanka<span> Address</span></div>
                            <nav class="main_nav">
                                <ul class="d-flex flex-row align-items-center justify-content-start">
                                                                        <li><a href="/">首页</a></li>
                                                                        <li><a href="/html/category/">文章分类</a></li>
                                                                        <li><a href="#">关于</a></li>
                                    <li><a href="#">联系</a></li>
                                </ul>
                            </nav>
                            <div class="social header_social">
                                <ul class="d-flex flex-row align-items-center justify-content-start">
                                    <li><a href="#"><i class="fa fa-pinterest" aria-hidden="true"></i></a></li>
                                    <li><a href="#"><i class="fa fa-linkedin" aria-hidden="true"></i></a></li>
                                    <li><a href="#"><i class="fa fa-instagram" aria-hidden="true"></i></a></li>
                                    <li><a href="#"><i class="fa fa-facebook" aria-hidden="true"></i></a></li>
                                    <li><a href="#"><i class="fa fa-twitter" aria-hidden="true"></i></a></li>
                                </ul>
                            </div>
                            <div class="hamburger ml-auto"><i class="fa fa-bars" aria-hidden="true"></i></div>
                        </div>
                    </div>
                </div>
            </div>
        </header>
        <!-- Menu -->
        <div class="menu">
            <div class="menu_content d-flex flex-column align-items-center justify-content-center">
                <ul class="menu_nav_list text-center">
                                        <li><a href="index.html">Home</a></li>
                                        <li><a href="index.html">Home</a></li>
                                        <li><a href="#">关于</a></li>
                    <li><a href="#">联系</a></li>
                </ul>
            </div>
        </div>
        <!-- Home -->
        <div class="home">
            <div class="parallax_background parallax-window" data-parallax="scroll" data-image-src="/assets/addons/xcblog/img/srilankaaddress/about.jpg" data-speed="0.8"></div>
            <div class="home_container">
                <div class="container">
                    <div class="row">
                        <div class="col">
                            <div class="home_content">
                                <div class="home_title">ASP.NET Core使用AutoMapper组件_实用技巧</div>
                                <div class="breadcrumbs">
                                    <ul class="d-flex flex-row align-items-center justify-content-start">
                                        <li><a href="/">首页</a></li>
                                        <li><a href="/html/category/">文章分类</a></li>
                                        <li>正文</li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- Classes -->
        <div class="classes">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                        <div class="row row-eq-height">
                            <div class="col-md-12">
                                  				  				  				<h2>1.什么是AutoMapper？</h2> <p>AutoMapper是一个对象-对象映射器。对象-对象映射通过将一种类型的输入对象转换为另一种类型的输出对象来工作。使AutoMapper变得有趣的是，它提供了一些有趣的约定，免去用户不需要了解如何将类型A映射为类型B。只要类型B遵循AutoMapper既定的约定，就需要几乎零配置来映射两个类型。映射代码虽然比较无聊，但是AutoMapper为我们提供简单的类型配置以及简单的映射测试，而映射可以在应用程序中的许多地方发生，但主要发生在层之间的边界中，比如，UI /域层之间或服务/域层之间。一层的关注点通常与另一层的关注点冲突，因此对象-对象映射导致分离的模型，其中每一层的关注点仅会影响该层中的类型。</p> <h2>2.如何在Core上面使用AutoMapper组件？</h2> <p>先在Startup.ConfigureServices注入AutoMapper组件服务，然后在Startup.Configure上获取AutoMapper服务配置扩展类创建对象-对象映射关系，为了好统一管理代码，可以新建一个AutoMapperExtension静态类，把以下代码封装一下：</p> <div class="ay1code"> <pre class="brush:csharp;">public static class AutoMapperExtension  {      /// &lt;summary&gt;      /// 新增自动映射服务      /// &lt;/summary&gt;      /// &lt;param name="service"&gt;&lt;/param&gt;      /// &lt;returns&gt;&lt;/returns&gt;      public static IServiceCollection AddAutoMapper(this IServiceCollection services)      {          #region 方案一          //注册AutoMapper配置扩展类服务          services.TryAddSingleton&lt;MapperConfigurationExpression&gt;();          //注册AutoMapper配置扩展类到AutoMapper配置服务去          services.TryAddSingleton(serviceProvider =&gt;          {              var mapperConfigurationExpression = serviceProvider.GetRequiredService&lt;MapperConfigurationExpression&gt;();              var mapperConfiguration = new MapperConfiguration(mapperConfigurationExpression);              mapperConfiguration.AssertConfigurationIsValid();              return mapperConfiguration;          });          //注入IMapper接口DI服务          services.TryAddSingleton(serviceProvider =&gt;          {              var mapperConfiguration = serviceProvider.GetRequiredService&lt;MapperConfiguration&gt;();              return mapperConfiguration.CreateMapper();          });          return services;          #endregion      }        /// &lt;summary&gt;      /// 使用自动映射配置扩展类      /// &lt;/summary&gt;      /// &lt;param name="applicationBuilder"&gt;&lt;/param&gt;      /// &lt;returns&gt;&lt;/returns&gt;      public static IMapperConfigurationExpression UseAutoMapper(this IApplicationBuilder applicationBuilder)      {          //获取已注册服务AutoMapper配置扩展类          return applicationBuilder.ApplicationServices.GetRequiredService&lt;MapperConfigurationExpression&gt;();      }  }  // This method gets called by the runtime. Use this method to add services to the container.  public void ConfigureServices(IServiceCollection services)  {      ......      //添加自动映射组件DI服务      services.AddAutoMapper();  }  // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.  public void Configure(IApplicationBuilder app, IHostingEnvironment env)  {      ......      //注册组件之后，创建映射对象  　　var expression = app.UseAutoMapper();      expression.CreateMap&lt;Customer, CustomerDto&gt;();      expression.CreateMap&lt;Address, AddressDto&gt;();  }</pre> </div> <p>因为IMapper接口已经在ConfigureServices方法注入DI服务了，所以无需再重新注入，只需要直接使用IMapper调用其方法就可以：</p> <div class="ay1code"> <pre class="brush:csharp;">public class BlogsController : Controller  {      private IMapper _iMapper { get; }      public BlogsController(IMapper iMapper)      {          _iMapper = iMapper;      }      // GET: Blogs      public async Task&lt;IActionResult&gt; Index()      {      //对象-对象数据传输          var dto = _iMapper.Map&lt;CustomerDto&gt;(CustomerInitialize());          ......      }      //手动赋值客户对象数据      private Customer CustomerInitialize()      {          var _customer = new Customer()          {              Id = 1,              Name = "Eduardo Najera",              Credit = 234.7m,              Address = new Address() { City = "istanbul", Country = "turkey", Id = 1, Street = "istiklal cad." },              HomeAddress = new Address() { City = "istanbul", Country = "turkey", Id = 2, Street = "istiklal cad." },              WorkAddresses = new List&lt;Address&gt;()              {                  new Address() {City = "istanbul", Country = "turkey", Id = 5, Street = "istiklal cad."},                  new Address() {City = "izmir", Country = "turkey", Id = 6, Street = "konak"}              },              Addresses = new List&lt;Address&gt;()              {                  new Address() {City = "istanbul", Country = "turkey", Id = 3, Street = "istiklal cad."},                  new Address() {City = "izmir", Country = "turkey", Id = 4, Street = "konak"}              }.ToArray()          };          return _customer;      }  }</pre> </div> <p>运行效果：</p> <p style="text-align:center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220424/060a26ba95dabd17130ea6060d5f76cf.jpg"></p> <h2>3.如果更加灵活使用AutoMapper组件？</h2> <p>相信在第二章节时候，相信大家都会发现一个问题，如果生产场景业务越来越庞大，需创建对应业务对象也会越来越多，如果面对这样的业务场景难道要在Configure方法里面创建越来越多的映射关系吗？例：</p> <div class="ay1code"> <pre class="brush:csharp;">var expression = app.UseAutoMapper();  expression.CreateMap&lt;A, ADto&gt;();  expression.CreateMap&lt;B, BDto&gt;();  expression.CreateMap&lt;C, CDto&gt;();  expression.CreateMap&lt;D, DDto&gt;();  ......</pre> </div> <p>很显然这样子是不可行的，这样会导致后续代码越来越多，难以维护。那么现在让我们来解决这个问题。首先新建一个自动注入属性的AutoInjectAttribute密封类，具体代码如下：</p> <div class="ay1code"> <pre class="brush:csharp;">public sealed class AutoInjectAttribute : Attribute  {      public Type SourceType { get; }      public Type TargetType { get; }      public AutoInjectAttribute(Type sourceType, Type targetType)      {          SourceType = sourceType;          TargetType = targetType;      }  }</pre> </div> <p>新增这个AutoInjectAttribute密封类，目的是声明每个DTO对象（数据传输对象）与对应数据源对象是传输关系，方便在Configure里面自动注册创建映射关系，例：</p> <div class="ay1code"> <pre class="brush:csharp;">//声明源对象，目标对象  [AutoInject(sourceType: typeof(Customer),targetType:typeof(CustomerDto))]  public class CustomerDto  {      public int Id { get; set; }      public string Name { get; set; }      public Address Address { get; set; }      public AddressDto HomeAddress { get; set; }      public AddressDto[] Addresses { get; set; }      public List&lt;AddressDto&gt; WorkAddresses { get; set; }      public string AddressCity { get; set; }  }</pre> </div> <p>然后创建一个自动注入AutoInjectFactory工厂类，检测运行中的程序集是否有AutoInjectAttribute属性声明，如果有则插入一个类型数据集中返回，目的是把所有声明需要映射DTO对象跟数据源对象自动创建映射关系：</p> <div class="ay1code"> <pre class="brush:csharp;">public class AutoInjectFactory  {      public List&lt;(Type, Type)&gt; AddAssemblys      {          get          {              var assemblys =new List&lt;Assembly&gt;() { Assembly.GetExecutingAssembly() };              List&lt;(Type, Type)&gt; ConvertList = new List&lt;(Type, Type)&gt;();              foreach (var assembly in assemblys)              {                  var atributes = assembly.GetTypes()                      .Where(_type =&gt; _type.GetCustomAttribute&lt;AutoInjectAttribute&gt;() != null)                      .Select(_type =&gt; _type.GetCustomAttribute&lt;AutoInjectAttribute&gt;());                  foreach (var atribute in atributes)                  {                      ConvertList.Add((atribute.SourceType, atribute.TargetType));                  }              }              return ConvertList;          }      }  }</pre> </div> <p>在第2小节AutoMapperExtension静态类的AddAutoMapper方法内修改如下代码：</p> <div class="ay1code"> <pre class="brush:csharp;">#region 方案二  //注入AutoMapper配置扩展类服务  services.TryAddSingleton&lt;MapperConfigurationExpression&gt;();  //注入自动注入工厂类服务  services.TryAddSingleton&lt;AutoInjectFactory&gt;();  //注入AutoMapper配置扩展类到AutoMapper配置服务去  services.TryAddSingleton(serviceProvider =&gt;  {      var mapperConfigurationExpression = serviceProvider.GetRequiredService&lt;MapperConfigurationExpression&gt;();      //通过自动注入工厂类获取声明数据源对象与DTO对象自动创建映射关系      var factory = serviceProvider.GetRequiredService&lt;AutoInjectFactory&gt;();      foreach (var (sourceType, targetType) in factory.AddAssemblys)      {          mapperConfigurationExpression.CreateMap(sourceType, targetType);      }      var mapperConfiguration = new MapperConfiguration(mapperConfigurationExpression);      mapperConfiguration.AssertConfigurationIsValid();      return mapperConfiguration;  });  //注入IMapper接口DI服务  services.TryAddSingleton(serviceProvider =&gt;  {      var mapperConfiguration = serviceProvider.GetRequiredService&lt;MapperConfiguration&gt;();      return mapperConfiguration.CreateMapper();  });  return services;  #endregion</pre> </div> <p>再新增一个使用自动注入工厂类服务静态方法：</p> <div class="ay1code"> <pre class="brush:csharp;">/// &lt;summary&gt;  /// 使用自动注入工厂类  /// &lt;/summary&gt;  /// &lt;param name="applicationBuilder"&gt;&lt;/param&gt;  public static void UseAutoInject(this IApplicationBuilder applicationBuilder)  {     applicationBuilder.ApplicationServices.GetRequiredService&lt;AutoInjectFactory&gt;();  }</pre> </div> <p>然后在Startup.ConfigureServices注入AutoMapper组件服务，然后在Startup.Configure上调用UseAutoInject静态方法，具体代码如下：</p> <div class="ay1code"> <pre class="brush:csharp;">app.UseAutoInject();</pre> </div> <p>运行效果：</p> <p style="text-align:center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220424/b7e1132a67556aa6b2eac93b4f642f1a.jpg"></p> 			
                                <div class="col-md-12 mt-5">
                                                                        <p>上一个：<a href="/html/category/article-1362.htm">图解Kafka架构与工作原理</a></p>
                                                                        <p>下一个：<a href="/html/category/article-1364.htm">双向带头循环链表（详解）</a></p>
                                                                    </div>

                                                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-7545.htm" title="集成吊顶led灯哪个牌子好(集成吊顶灯什么牌子好)">集成吊顶led灯哪个牌子好(集成吊顶灯什么牌子好)</a></li>
                        <li class="py-2"><a href="/html/category/article-6946.htm" title="吉川春代啥意思（学到了）吉川春代日语是什么意思，仙剑剧情，吉川，">吉川春代啥意思（学到了）吉川春代日语是什么意思，仙剑剧情，吉川，</a></li>
                        <li class="py-2"><a href="/html/category/article-7452.htm" title="成都兽用疫苗公司排名（成都兽药市场详细地址）">成都兽用疫苗公司排名（成都兽药市场详细地址）</a></li>
                        <li class="py-2"><a href="/html/category/article-7407.htm" title="全国宠物领养 全国宠物领养中心官网">全国宠物领养 全国宠物领养中心官网</a></li>
                        <li class="py-2"><a href="/html/category/article-6624.htm" title="海拉鲁北侧神庙（海拉鲁丘陵神庙）">海拉鲁北侧神庙（海拉鲁丘陵神庙）</a></li>
                        <li class="py-2"><a href="/html/category/article-7131.htm" title="c开头的口红品牌有哪些牌子(c开头的口红品牌有哪些好)">c开头的口红品牌有哪些牌子(c开头的口红品牌有哪些好)</a></li>
                        <li class="py-2"><a href="/html/category/article-6854.htm" title="狗粮生产赚钱吗现在（狗粮生产赚钱吗现在多少钱）">狗粮生产赚钱吗现在（狗粮生产赚钱吗现在多少钱）</a></li>
                        <li class="py-2"><a href="/html/category/article-7775.htm" title="动物疫苗价格一览表图片大全高清图下载（动物疫苗法最新消息2019）">动物疫苗价格一览表图片大全高清图下载（动物疫苗法最新消息2019）</a></li>
                        <li class="py-2"><a href="/html/category/article-6901.htm" title="动物打防疫针的作用（动物打疫苗）">动物打防疫针的作用（动物打疫苗）</a></li>
                        <li class="py-2"><a href="/html/category/article-7130.htm" title="佳雯宠物医院(环城东路分院)怎么样（佳雯宠物医院管理有限公司）">佳雯宠物医院(环城东路分院)怎么样（佳雯宠物医院管理有限公司）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">36</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </div>
                <!-- Footer -->
        <footer class="footer">
            <div class="parallax_background parallax-window" data-parallax="scroll" data-image-src="/assets/addons/xcblog/img/srilankaaddress/footer.jpg" data-speed="0.8"></div>
            <div class="footer_overlay"></div>
            <div class="container">
                <div class="row">
                    <div class="col">
                        <div class="footer_content text-center d-flex flex-column align-items-center justify-content-center">
                            <p>
                                Sri Lanka Address 版权所有
                                <br />
                                Powered by WordPress
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </footer>
    </div>
    <script src="/assets/addons/xcblog/js/frontend/srilankaaddress/jquery-3.2.1.min.js"></script>
    <script src="/assets/addons/xcblog/css/srilankaaddress/bootstrap-4.1.2/popper.js"></script>
    <script src="/assets/addons/xcblog/css/srilankaaddress/bootstrap-4.1.2/bootstrap.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/owl.carousel.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/easing/easing.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/parallax-js-master/parallax.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/srilankaaddress/about.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>