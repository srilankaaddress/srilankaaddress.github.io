<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://srilankaaddress.github.io/html/category/article-1406.htm" />
    <title>Spring Framework源码解析-BeanPostProcessor讲解 - Sri Lanka Address</title>
        <meta charset="utf-8">
    <link rel="icon" href="/assets/addons/xcblog/img/srilankaaddress/favicon.ico" type="image/x-icon"/>
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="description" content="AerobicsFit template project">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?e8fff5fa52c11c99c5cdad6284174bdb";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/srilankaaddress/bootstrap-4.1.2/bootstrap.min.css">
    <link href="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/font-awesome-4.7.0/css/font-awesome.min.css" rel="stylesheet" type="text/css">
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/owl.carousel.css">
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/owl.theme.default.css">
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/animate.css">
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/srilankaaddress/about.css">
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/srilankaaddress/about_responsive.css">
</head>

<body>
    <div class="super_container">
                <!-- Header -->
        <header class="header">
            <div class="container">
                <div class="row">
                    <div class="col">
                        <div class="header_content d-flex flex-row align-items-center justify-content-start">
                            <div class="logo">Sri Lanka<span> Address</span></div>
                            <nav class="main_nav">
                                <ul class="d-flex flex-row align-items-center justify-content-start">
                                                                        <li><a href="/">首页</a></li>
                                                                        <li><a href="/html/category/">文章分类</a></li>
                                                                        <li><a href="#">关于</a></li>
                                    <li><a href="#">联系</a></li>
                                </ul>
                            </nav>
                            <div class="social header_social">
                                <ul class="d-flex flex-row align-items-center justify-content-start">
                                    <li><a href="#"><i class="fa fa-pinterest" aria-hidden="true"></i></a></li>
                                    <li><a href="#"><i class="fa fa-linkedin" aria-hidden="true"></i></a></li>
                                    <li><a href="#"><i class="fa fa-instagram" aria-hidden="true"></i></a></li>
                                    <li><a href="#"><i class="fa fa-facebook" aria-hidden="true"></i></a></li>
                                    <li><a href="#"><i class="fa fa-twitter" aria-hidden="true"></i></a></li>
                                </ul>
                            </div>
                            <div class="hamburger ml-auto"><i class="fa fa-bars" aria-hidden="true"></i></div>
                        </div>
                    </div>
                </div>
            </div>
        </header>
        <!-- Menu -->
        <div class="menu">
            <div class="menu_content d-flex flex-column align-items-center justify-content-center">
                <ul class="menu_nav_list text-center">
                                        <li><a href="index.html">Home</a></li>
                                        <li><a href="index.html">Home</a></li>
                                        <li><a href="#">关于</a></li>
                    <li><a href="#">联系</a></li>
                </ul>
            </div>
        </div>
        <!-- Home -->
        <div class="home">
            <div class="parallax_background parallax-window" data-parallax="scroll" data-image-src="/assets/addons/xcblog/img/srilankaaddress/about.jpg" data-speed="0.8"></div>
            <div class="home_container">
                <div class="container">
                    <div class="row">
                        <div class="col">
                            <div class="home_content">
                                <div class="home_title">Spring Framework源码解析-BeanPostProcessor讲解</div>
                                <div class="breadcrumbs">
                                    <ul class="d-flex flex-row align-items-center justify-content-start">
                                        <li><a href="/">首页</a></li>
                                        <li><a href="/html/category/">文章分类</a></li>
                                        <li>正文</li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- Classes -->
        <div class="classes">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                        <div class="row row-eq-height">
                            <div class="col-md-12">
                                  				  				  				<div id="content_views" class="htmledit_views"> <h1>1. BeanPostProcessor是干什么的？</h1> <p>BeanPostProcessor接口作用是：如果我们需要在Spring容器完成Bean的实例化、配置和其他的初始化前后添加一些自己的逻辑处理，我们就可以定义一个或者多个BeanPostProcessor接口的实现，然后注册到容器中。(类似于拦截器和过滤器)。 BeanPostProcessor分为三大类如下图：</p> <p class="img-center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads/20230205/14edfd9eb5dd4dc30deb69c005c79fff.jpg"></p> <ul> <li>实例化</li> <li>初始化</li> <li>销毁</li> </ul> <blockquote> <p>Bean实例化会执行<br /><strong>InstantiationAwareBeanPostProcessor</strong>&nbsp;、<br /><strong>SmartInstantiationAwareBeanPostProcessor</strong>&nbsp;这两类处理器，Bean实例化后每个bean就会通过&nbsp;<strong>BeanPostProcessor</strong>&nbsp;、<br /><strong>MergedBeanDefinitionPostProcessor</strong>&nbsp;实现的类的处理。Bean销毁会通过<br /><strong>DestructionAwareBeanPostProcessor</strong>&nbsp;处理器。</p> </blockquote> <p>Spring Bean的实例化图解：</p> <p class="img-center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads/20230205/030e1dcc6ebcaad96a2f914645e776b5.jpg"></p> <p>在检查完&nbsp;<strong>Aware</strong>&nbsp;接口后，就开始调用&nbsp;<strong>BeanPostProcessor</strong>&nbsp;进行前置处理后置处理。下面来看一下Spring中的几类继承：</p> <ul> <li>AOP相关的</li> </ul> <p class="img-center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads/20230205/2c64eed935288bf4a4811b5e6c807bd8.jpg"></p> <ul> <li>bean 和 context相关的</li> </ul> <ul> <li>Spring Boot相关的实现</li> </ul> <p class="img-center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads/20230205/a0c7fa9cb79b58aafaf97a1cc1688c7d.jpg"></p> <p>BeanPostProcessor是在Bean实例化后，在自定义初始化方法前后执行。</p> <h1>2. BeanPostProcessor</h1> <p>处理器定义了Bean&nbsp;<strong>初始化</strong>&nbsp;前后执行的方法。</p> <pre><code>public interface BeanPostProcessor {      //自定义初始化方法之前执行     @Nullable     default Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {         return bean;     }      //自定义初始化方法之后执行     @Nullable     default Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {         return bean;     }  } </code></pre> <blockquote> <p>代码示例地址：github.com/mxsm/spring…</p> </blockquote> <p>代码演示：</p> <pre><code>public class MyBeanPostProcessor implements BeanPostProcessor {     @Override     public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {          System.out.println( " ----before----- " + beanName);          return bean;     }       @Override     public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {          System.out.println( " ----after----- " + beanName);          return bean;     } } </code></pre> <pre><code>public class TestBean {      private String name;      public void init(){         System.out.println("TestBean---init()");         this.name = "test";     }      public String getName() {         return name;     }      public void setName(String name) {         this.name = name;     } } </code></pre> <pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;beans xmlns="http://www.springframework.org/schema/beans"        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"        xmlns:context="http://www.springframework.org/schema/context"        xsi:schemaLocation="http://www.springframework.org/schema/beans         https://www.springframework.org/schema/beans/spring-beans.xsd         http://www.springframework.org/schema/context         https://www.springframework.org/schema/context/spring-context.xsd"&gt;      &lt;bean id="testBean" class="com.github.mxsm.bean.TestBean" init-method="init"/&gt;      &lt;bean class="com.github.mxsm.processor.MyBeanPostProcessor" id="myBeanPostProcessor"/&gt;  &lt;/beans&gt; </code></pre> <pre><code>public class ApplicationBoot{     public static void main( String[] args ) {          ApplicationContext applicationContext = new ClassPathXmlApplicationContext("application.xml");         TestBean testBean = applicationContext.getBean(TestBean.class);         System.out.println(testBean.getName());      } } </code></pre> <p class="img-center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads/20230205/52f26746fed8279851e0cc0f930c313c.jpg"></p> <p>通过代码可以看出来执行的结果。</p> <h1>3.InstantiationAwareBeanPostProcessor</h1> <p>该处理器定义了Bean&nbsp;<strong>实例化</strong>&nbsp;前后执行的方法。</p> <pre><code>public interface InstantiationAwareBeanPostProcessor extends BeanPostProcessor {     //实例化之前     @Nullable     default Object postProcessBeforeInstantiation(Class&lt;?&gt; beanClass, String beanName) throws BeansException {          //这里可以自定义代理类         return null;     }      //实例化后-但是执行在初始化之前     default boolean postProcessAfterInstantiation(Object bean, String beanName) throws BeansException {         return true;     }      //处理bean的Properties值     @Nullable     default PropertyValues postProcessProperties(PropertyValues pvs, Object bean, String beanName)             throws BeansException {          return null;     }  } </code></pre> <h1>4.DestructionAwareBeanPostProcessor</h1> <p>该处理器了销毁Bean之前的操作。</p> <pre><code>public interface DestructionAwareBeanPostProcessor extends BeanPostProcessor {      //bean销毁之前     void postProcessBeforeDestruction(Object bean, String beanName) throws BeansException;      //bean是否需要销毁     default boolean requiresDestruction(Object bean) {         return true;     }  }  </code></pre> <h1>5. 看一下Spring自身的实现</h1> <pre><code>class ApplicationContextAwareProcessor implements BeanPostProcessor {      private final ConfigurableApplicationContext applicationContext;      private final StringValueResolver embeddedValueResolver;       /**      * Create a new ApplicationContextAwareProcessor for the given context.      */     public ApplicationContextAwareProcessor(ConfigurableApplicationContext applicationContext) {         this.applicationContext = applicationContext;         this.embeddedValueResolver = new EmbeddedValueResolver(applicationContext.getBeanFactory());     }       @Override     @Nullable     public Object postProcessBeforeInitialization(final Object bean, String beanName) throws BeansException {         AccessControlContext acc = null;          if (System.getSecurityManager() != null &amp;&amp;                 (bean instanceof EnvironmentAware || bean instanceof EmbeddedValueResolverAware ||                         bean instanceof ResourceLoaderAware || bean instanceof ApplicationEventPublisherAware ||                         bean instanceof MessageSourceAware || bean instanceof ApplicationContextAware)) {             acc = this.applicationContext.getBeanFactory().getAccessControlContext();         }          if (acc != null) {             AccessController.doPrivileged((PrivilegedAction&lt;Object&gt;) () -&gt; {                 invokeAwareInterfaces(bean);                 return null;             }, acc);         }         else {             invokeAwareInterfaces(bean);         }          return bean;     }      private void invokeAwareInterfaces(Object bean) {         if (bean instanceof Aware) {             if (bean instanceof EnvironmentAware) {                 ((EnvironmentAware) bean).setEnvironment(this.applicationContext.getEnvironment());             }             if (bean instanceof EmbeddedValueResolverAware) {                 ((EmbeddedValueResolverAware) bean).setEmbeddedValueResolver(this.embeddedValueResolver);             }             if (bean instanceof ResourceLoaderAware) {                 ((ResourceLoaderAware) bean).setResourceLoader(this.applicationContext);             }             if (bean instanceof ApplicationEventPublisherAware) {                 ((ApplicationEventPublisherAware) bean).setApplicationEventPublisher(this.applicationContext);             }             if (bean instanceof MessageSourceAware) {                 ((MessageSourceAware) bean).setMessageSource(this.applicationContext);             }             if (bean instanceof ApplicationContextAware) {                 ((ApplicationContextAware) bean).setApplicationContext(this.applicationContext);             }         }     }      @Override     public Object postProcessAfterInitialization(Object bean, String beanName) {         return bean;     }  } </code></pre> <p>当前主要用来处理继承人了&nbsp;<strong>Aware</strong>&nbsp;接口类。然后根据&nbsp;<strong>Aware</strong>&nbsp;接口的不同实现设置对应的接口对象</p> <h1>6. BeanPostProcessor Spring源码分析</h1> <p>首先明确一点&nbsp;<strong>BeanPostProcessor</strong>&nbsp;实现的类都是Spring容器中的一个Bean。在<br /><strong>AbstractApplicationContext#refresh</strong>&nbsp;是最重要的一个方法：</p> <pre><code>public void refresh() throws BeansException, IllegalStateException {         synchronized (this.startupShutdownMonitor) {                 //省了部分代码              try {                                  //省了部分代码                 // Register bean processors that intercept bean creation.                 registerBeanPostProcessors(beanFactory);                //省了部分代码             }              catch (BeansException ex) {                              }              finally {                 //省了部分代码             }         } } protected void registerBeanPostProcessors(ConfigurableListableBeanFactory beanFactory) {     //通过PostProcessorRegistrationDelegate类的静态方法处理     PostProcessorRegistrationDelegate.registerBeanPostProcessors(beanFactory, this); } </code></pre> <p>下面看一下<br /><strong>PostProcessorRegistrationDelegate.registerBeanPostProcessors(beanFactory, this);</strong>&nbsp;方法</p> <pre><code>    public static void registerBeanPostProcessors(             ConfigurableListableBeanFactory beanFactory, AbstractApplicationContext applicationContext) {          String[] postProcessorNames = beanFactory.getBeanNamesForType(BeanPostProcessor.class, true, false);          // Register BeanPostProcessorChecker that logs an info message when         // a bean is created during BeanPostProcessor instantiation, i.e. when         // a bean is not eligible for getting processed by all BeanPostProcessors.         int beanProcessorTargetCount = beanFactory.getBeanPostProcessorCount() + 1 + postProcessorNames.length;         beanFactory.addBeanPostProcessor(new BeanPostProcessorChecker(beanFactory, beanProcessorTargetCount));          //处理分为三类：1 PriorityOrdered实现 2 Ordered 第三类就是普通的         List&lt;BeanPostProcessor&gt; priorityOrderedPostProcessors = new ArrayList&lt;&gt;();         List&lt;BeanPostProcessor&gt; internalPostProcessors = new ArrayList&lt;&gt;();         List&lt;String&gt; orderedPostProcessorNames = new ArrayList&lt;&gt;();         List&lt;String&gt; nonOrderedPostProcessorNames = new ArrayList&lt;&gt;();         for (String ppName : postProcessorNames) {             if (beanFactory.isTypeMatch(ppName, PriorityOrdered.class)) {                 BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor.class);                 priorityOrderedPostProcessors.add(pp);                 if (pp instanceof MergedBeanDefinitionPostProcessor) {                     internalPostProcessors.add(pp);                 }             }             else if (beanFactory.isTypeMatch(ppName, Ordered.class)) {                 orderedPostProcessorNames.add(ppName);             }             else {                 nonOrderedPostProcessorNames.add(ppName);             }         }          // 处理PriorityOrdered实现         sortPostProcessors(priorityOrderedPostProcessors, beanFactory);         registerBeanPostProcessors(beanFactory, priorityOrderedPostProcessors);          // 处理 Ordered实现.         List&lt;BeanPostProcessor&gt; orderedPostProcessors = new ArrayList&lt;&gt;();         for (String ppName : orderedPostProcessorNames) {             BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor.class);             orderedPostProcessors.add(pp);             if (pp instanceof MergedBeanDefinitionPostProcessor) {                 internalPostProcessors.add(pp);             }         }         sortPostProcessors(orderedPostProcessors, beanFactory);         registerBeanPostProcessors(beanFactory, orderedPostProcessors);          // 处理正常的         List&lt;BeanPostProcessor&gt; nonOrderedPostProcessors = new ArrayList&lt;&gt;();         for (String ppName : nonOrderedPostProcessorNames) {             BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor.class);             nonOrderedPostProcessors.add(pp);             if (pp instanceof MergedBeanDefinitionPostProcessor) {                 internalPostProcessors.add(pp);             }         }         registerBeanPostProcessors(beanFactory, nonOrderedPostProcessors);          //注册MergedBeanDefinitionPostProcessor         sortPostProcessors(internalPostProcessors, beanFactory);         registerBeanPostProcessors(beanFactory, internalPostProcessors);          // Re-register post-processor for detecting inner beans as ApplicationListeners,         // moving it to the end of the processor chain (for picking up proxies etc).         beanFactory.addBeanPostProcessor(new ApplicationListenerDetector(applicationContext));     } </code></pre> <p>通过该方法将&nbsp;<strong>BeanPostProcessor</strong>&nbsp;的以上几种实现类都注册到Spring中。</p> <p>然后在生成Bean的时候去执行，<br /><strong>AbstractAutowireCapableBeanFactory.createBean</strong>&nbsp;创建Bean</p> <pre><code>    protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args)             throws BeanCreationException {                          //省略代码                      try {             // 执行实例化之前方法.             Object bean = resolveBeforeInstantiation(beanName, mbdToUse);             if (bean != null) {                 return bean;             }                       //省略代码             }     }     protected Object resolveBeforeInstantiation(String beanName, RootBeanDefinition mbd) {         Object bean = null;         if (!Boolean.FALSE.equals(mbd.beforeInstantiationResolved)) {                          if (!mbd.isSynthetic() &amp;&amp; hasInstantiationAwareBeanPostProcessors()) {                 Class&lt;?&gt; targetType = determineTargetType(beanName, mbd);                 if (targetType != null) {                     //执行InstantiationAwareBeanPostProcessor#postProcessBeforeInstantiation(实例化之前方法)                     bean = applyBeanPostProcessorsBeforeInstantiation(targetType, beanName);                     if (bean != null) {                         //执行InstantiationAwareBeanPostProcessor#postProcessAfterInitialization(初始化后的方法)                         bean = applyBeanPostProcessorsAfterInitialization(bean, beanName);                     }                 }             }             mbd.beforeInstantiationResolved = (bean != null);         }         return bean;     } </code></pre> <p>通过代码可以知道<br /><strong>resolveBeforeInstantiation</strong>&nbsp;方法是执行实例化之前的方法。如果实例化之前的方法返回了对应Bean那么直接执行初始化后的方法。实例化<br /><strong>InstantiationAwareBeanPostProcessor#postProcessBeforeInstantiation</strong>&nbsp;方法执行返回Bean为空就调用<br /><strong>AbstractAutowireCapableBeanFactory#doCreateBean</strong>&nbsp;方法。在这个方法里面有如下几个重要的方法：</p> <ul> <li> <strong>AbstractAutowireCapableBeanFactory#applyMergedBeanDefinitionPostProcessors</strong>&nbsp;方法</li> <li>执行&nbsp;<strong>MergedBeanDefinitionPostProcessor#postProcessMergedBeanDefinition</strong>&nbsp;方法</li> <li> <strong>AbstractAutowireCapableBeanFactory#populateBean</strong>&nbsp;方法</li> <li>执行&nbsp;<strong>InstantiationAwareBeanPostProcessor#postProcessAfterInstantiation</strong>&nbsp;方法，如果前面方法返回true，执行方法&nbsp;<strong>InstantiationAwareBeanPostProcessor#postProcessProperties</strong>&nbsp;方法</li> <li> <strong>AbstractAutowireCapableBeanFactory#initializeBean</strong>&nbsp;方法</li> <li>执行&nbsp;<strong>BeanPostProcessor#postProcessBeforeInitialization</strong>&nbsp;方法，然后执行&nbsp;<strong>AbstractAutowireCapableBeanFactory#invokeInitMethods</strong>&nbsp;方法(包括实现了InitializingBean接口的方法或者有注解@PostConstruct的方法)，然后执行&nbsp;<strong>BeanPostProcessor#postProcessAfterInitialization</strong> </li> </ul> <p class="img-center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads/20230205/81da63bffef046441f584b77e2b79eda.jpg"></p> <h1>7. 总结</h1> <p><strong>BeanPostProcessor 主要用来处理Bean内部的注解。比如Spring自己实现的@Autowired、@Value， @EJB，@WebServiceRef，@PostConstruct，@PreDestroy等</strong></p> <blockquote> <p>自定义类似于@Value，@Autowired的注解，主要用于Java类变量或者方法上的注解 主要用于处理Bean内部的注解实现，主要是变量或者方法上面的注解</p> </blockquote> <p><strong>如果本文对你有帮助，别忘记给我个3连 ，点赞，转发，评论，，咱们下期见。</strong></p> <p><strong>收藏 等于白嫖，点赞才是真情。</strong></p> <p>作者：蚂蚁背大象<br /> 链接：<br /> https://juejin.cn/post/7107985736992833567</p> </p></div> 			
                                <div class="col-md-12 mt-5">
                                                                        <p>上一个：<a href="/html/category/article-1405.htm">JavaScript查找句子的平均单词长度</a></p>
                                                                        <p>下一个：<a href="/html/category/article-1407.htm">一行代码让你的项目轻松使用Dapr</a></p>
                                                                    </div>

                                                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-2250.htm" title="Citus 11(分布式 PostgreSQL) 文档贡献与本地运行_在线工具">Citus 11(分布式 PostgreSQL) 文档贡献与本地运行_在线工具</a></li>
                        <li class="py-2"><a href="/html/category/article-1623.htm" title="Java集合类型遍历和排序">Java集合类型遍历和排序</a></li>
                        <li class="py-2"><a href="/html/category/article-1590.htm" title="Python  turtle  模块可以编写游戏，是真的吗？">Python  turtle  模块可以编写游戏，是真的吗？</a></li>
                        <li class="py-2"><a href="/html/category/article-1598.htm" title="Unity实现简单的对象池_在线工具">Unity实现简单的对象池_在线工具</a></li>
                        <li class="py-2"><a href="/html/category/article-1935.htm" title="JS脚本按顺序依次加载执行">JS脚本按顺序依次加载执行</a></li>
                        <li class="py-2"><a href="/html/category/article-1921.htm" title="IDEA Debug过程中使用Drop Frame或Reset Frame实现操作回退">IDEA Debug过程中使用Drop Frame或Reset Frame实现操作回退</a></li>
                        <li class="py-2"><a href="/html/category/article-1622.htm" title="Anaconda 创建django不同版本开发环境">Anaconda 创建django不同版本开发环境</a></li>
                        <li class="py-2"><a href="/html/category/article-1618.htm" title="vue3中获取ref元素的几种方式">vue3中获取ref元素的几种方式</a></li>
                        <li class="py-2"><a href="/html/category/article-1609.htm" title="聚类算法——python实现层次聚类（AGNES）">聚类算法——python实现层次聚类（AGNES）</a></li>
                        <li class="py-2"><a href="/html/category/article-1610.htm" title="python3.5上使用virtualenv创建虚拟环境的坑">python3.5上使用virtualenv创建虚拟环境的坑</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </div>
                <!-- Footer -->
        <footer class="footer">
            <div class="parallax_background parallax-window" data-parallax="scroll" data-image-src="/assets/addons/xcblog/img/srilankaaddress/footer.jpg" data-speed="0.8"></div>
            <div class="footer_overlay"></div>
            <div class="container">
                <div class="row">
                    <div class="col">
                        <div class="footer_content text-center d-flex flex-column align-items-center justify-content-center">
                            <p>
                                Sri Lanka Address 版权所有
                                <br />
                                Powered by WordPress
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </footer>
    </div>
    <script src="/assets/addons/xcblog/js/frontend/srilankaaddress/jquery-3.2.1.min.js"></script>
    <script src="/assets/addons/xcblog/css/srilankaaddress/bootstrap-4.1.2/popper.js"></script>
    <script src="/assets/addons/xcblog/css/srilankaaddress/bootstrap-4.1.2/bootstrap.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/owl.carousel.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/easing/easing.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/parallax-js-master/parallax.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/srilankaaddress/about.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>