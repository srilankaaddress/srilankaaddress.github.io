<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://srilankaaddress.github.io/html/category/article-1388.htm" />
    <title>利用策略模式+单例模式+反射 替换if-else - Sri Lanka Address</title>
        <meta charset="utf-8">
    <link rel="icon" href="/assets/addons/xcblog/img/srilankaaddress/favicon.ico" type="image/x-icon"/>
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="description" content="AerobicsFit template project">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?e8fff5fa52c11c99c5cdad6284174bdb";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/srilankaaddress/bootstrap-4.1.2/bootstrap.min.css">
    <link href="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/font-awesome-4.7.0/css/font-awesome.min.css" rel="stylesheet" type="text/css">
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/owl.carousel.css">
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/owl.theme.default.css">
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/animate.css">
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/srilankaaddress/about.css">
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/srilankaaddress/about_responsive.css">
</head>

<body>
    <div class="super_container">
                <!-- Header -->
        <header class="header">
            <div class="container">
                <div class="row">
                    <div class="col">
                        <div class="header_content d-flex flex-row align-items-center justify-content-start">
                            <div class="logo">Sri Lanka<span> Address</span></div>
                            <nav class="main_nav">
                                <ul class="d-flex flex-row align-items-center justify-content-start">
                                                                        <li><a href="/">首页</a></li>
                                                                        <li><a href="/html/category/">文章分类</a></li>
                                                                        <li><a href="#">关于</a></li>
                                    <li><a href="#">联系</a></li>
                                </ul>
                            </nav>
                            <div class="social header_social">
                                <ul class="d-flex flex-row align-items-center justify-content-start">
                                    <li><a href="#"><i class="fa fa-pinterest" aria-hidden="true"></i></a></li>
                                    <li><a href="#"><i class="fa fa-linkedin" aria-hidden="true"></i></a></li>
                                    <li><a href="#"><i class="fa fa-instagram" aria-hidden="true"></i></a></li>
                                    <li><a href="#"><i class="fa fa-facebook" aria-hidden="true"></i></a></li>
                                    <li><a href="#"><i class="fa fa-twitter" aria-hidden="true"></i></a></li>
                                </ul>
                            </div>
                            <div class="hamburger ml-auto"><i class="fa fa-bars" aria-hidden="true"></i></div>
                        </div>
                    </div>
                </div>
            </div>
        </header>
        <!-- Menu -->
        <div class="menu">
            <div class="menu_content d-flex flex-column align-items-center justify-content-center">
                <ul class="menu_nav_list text-center">
                                        <li><a href="index.html">Home</a></li>
                                        <li><a href="index.html">Home</a></li>
                                        <li><a href="#">关于</a></li>
                    <li><a href="#">联系</a></li>
                </ul>
            </div>
        </div>
        <!-- Home -->
        <div class="home">
            <div class="parallax_background parallax-window" data-parallax="scroll" data-image-src="/assets/addons/xcblog/img/srilankaaddress/about.jpg" data-speed="0.8"></div>
            <div class="home_container">
                <div class="container">
                    <div class="row">
                        <div class="col">
                            <div class="home_content">
                                <div class="home_title">利用策略模式+单例模式+反射 替换if-else</div>
                                <div class="breadcrumbs">
                                    <ul class="d-flex flex-row align-items-center justify-content-start">
                                        <li><a href="/">首页</a></li>
                                        <li><a href="/html/category/">文章分类</a></li>
                                        <li>正文</li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- Classes -->
        <div class="classes">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                        <div class="row row-eq-height">
                            <div class="col-md-12">
                                  				  				  				<div id="content_views" class="htmledit_views"> <p>背景啥的就不讲了哈。有这方面需求或者感兴趣的阔以看看。</p> <p>假定有这样的一种情况，需要根据用户传入的参数，选择不同的数据库来进行相应的操作。</p> <p>普通的if-else来实现的话，就类似如下代码：</p> <pre><code class="language-java">public static void main(String[] args) {         String type="hbase";         if (type.equals(DbTypeEnum.MYSQL_DRIVER.type())){             MySQL mySQL=new MySQL();             mySQL.getConnect();             mySQL.excute();             mySQL.disconnect();         }else if (type.equals(DbTypeEnum.HBASE_DRIVER.type())){             Hbase hbase=new Hbase();             hbase.getConnect();             hbase.excute();             hbase.disconnect();         }else if (type.equals(DbTypeEnum.MONGO_DRIVER.type())){             Mongo mongo=new Mongo();             mongo.getConnect();             mongo.excute();             mongo.disconnect();         }else if (type.equals(DbTypeEnum.ORCAL_DRIVER.type())){             Orcal orcal=new Orcal();             orcal.getConnect();             orcal.excute();             orcal.disconnect();         }else if (type.equals(DbTypeEnum.SQLSERVER_DRIVER.type())){             SqlServer sqlServer=new SqlServer();             sqlServer.getConnect();             sqlServer.excute();             sqlServer.disconnect();         }else{             System.out.println("did not have this database");         }//逻辑异常 可以提前     }</code></pre> <p></p> <p>这里的DbTypeEnum是一个枚举类，没啥多讲的，有兴趣的自行baidu。</p> <pre><code class="language-java">public enum DbTypeEnum {      MYSQL_DRIVER("mysql"),      ORCAL_DRIVER("orcal"),      SQLSERVER_DRIVER("sqlserver"),      HBASE_DRIVER("hbase"),      MONGO_DRIVER("mogon")     ;      private String type;      private DbTypeEnum(String type){         this.type=type;     }      public String type() {         return type;     } }</code></pre> <p>至于Mysql,Orcal等等，单纯就是一个普通的类。</p> <pre><code class="language-java">public class MySQL {      public void getConnect(){         System.out.println("mysql connect");     }      public void excute(){         System.out.println("mysql excute sql");     }      public void disconnect(){         System.out.println("mysql disconnect");     }  }</code></pre> <p>其他就不贴了。</p> <p>以上就是普通做法，用if-else来进行判定，可以看出来这里臃肿。</p> <p>如果要用其他方式替换掉，怎么办呢？</p> <p>请让老夫慢慢道来。</p> <p>首先创建一个DbStrategy接口。</p> <pre><code class="language-java">public interface DbStrategy {      public void excute();  }</code></pre> <p>然后各个数据库操作类实现它。</p> <pre><code class="language-java">public class MySqlStrategy implements DbStrategy{     @Override     public void excute() {         MySQL mySQL=new MySQL();         mySQL.getConnect();         mySQL.excute();         mySQL.disconnect();     } }</code></pre> <p>其他HbaseStrategy啥的就不贴了哈。</p> <p>到这里其实没有做太多的改变。无非就是把数据库的三个操作connect excute disconnect合在了一个excute类里面。</p> <p>接下来就是重点了。</p> <p>我们改造下DbTypeEnum将他改造成RefelDbTypeEnum。</p> <pre><code class="language-java">public enum RefelDbTypeEnum {      MYSQL_DRIVER("mysql","optimization.ifelse.strategy.MySqlStrategy"),      ORCAL_DRIVER("orcal","optimization.ifelse.strategy.OrcalStrategy"),      SQLSERVER_DRIVER("sqlserver","optimization.ifelse.strategy.SqlServerStrategy"),      HBASE_DRIVER("hbase","optimization.ifelse.strategy.HbaseStrategy"),      MONGO_DRIVER("mogon","optimization.ifelse.strategy.MongoStrategy"),     ;      private String type;     private String clazz;      private RefelDbTypeEnum(String type,String clazz){         this.type=type;         this.clazz=clazz;     }      public String type() {         return type;     }      public String clazz(){         return  clazz;     } }</code></pre> <p>与DbTypeEnum相比多了一个String clazz的属性。至于为什么要这样改，先不急，后面再讲。</p> <p>最核心的部分来了哈。</p> <p>新建一个ManagerStrategy管理类。</p> <pre><code class="language-java">public class ManagerStrategy {      private static Map&lt;String,String&gt; strategyMap = new HashMap&lt;&gt;();      public static void excuteStrategy(String type){         for (RefelDbTypeEnum t : RefelDbTypeEnum.values())             strategyMap.put(t.type(), t.clazz());         String class_path=strategyMap.get(type);         try {             /*              * 通过反射将RefelDbTypeEnum中映射的类实例化              * */             Class clazz=Class.forName(class_path);             Method excute =clazz.getDeclaredMethod("excute");             excute.invoke(clazz.newInstance());         } catch (ClassNotFoundException e) {             e.printStackTrace();         } catch (NoSuchMethodException e) {             e.printStackTrace();         } catch (IllegalAccessException e) {             e.printStackTrace();         } catch (InvocationTargetException e) {             e.printStackTrace();         } catch (InstantiationException e) {             e.printStackTrace();         }     } }</code></pre> <p>这里先是将RefelDbTypeEnum中的type和clazz属性读到了一个strategyMap的HashMap中。</p> <p>然后根据用户传入的type判断要实例化哪个类。</p> <p>如果传入的是mysql则class_path=<span style="color:#008000;font-weight:bold;">optimization.ifelse.strategy.MySqlStrategy</span></p> <p>通过Class.forName反射出该对象，并且执行其中的excute方法。</p> <p>这里的class_path就是改造RefelDbTypeEnum中的包路径了。</p> <p>这样就实现替换if-else了。</p> <p>接下来是测试类：</p> <pre><code class="language-java"> public static void main(String[] args) {         String type="mysql";         ManagerStrategy.excuteStrategy(type);     }</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads/20230206/11bec880c3459e8fdad07652d4287eb5.jpg" alt="利用策略模式+单例模式+反射 替换if-else"></p> <p>满足需求。</p> <p>倘若如果是新增了一个ES数据库呢？</p> <p>同样新建一个EsStrategy类实现DbStrategy接口。</p> <pre><code class="language-java">public class EsStrategy implements DbStrategy{     @Override     public void excute() {         System.out.println("ES connect");         System.out.println("ES excute sql");         System.out.println("ES disconnect");     } }</code></pre> <p>之后，只需要在RefelDbTypeEnum，多添加一个ES的映射就行了。</p> <pre><code class="language-java">ES_DRIVER("es","optimization.ifelse.strategy.EsStrategy")</code></pre> <p>这里就可以看出来用设计模式的好处了，真正只有一个RefelDbTypeEnum的枚举类被改变了，就可以集成一个新的数据库操作类。</p> <p>细心的人其实已经发现了。</p> <p>上面的ManagerStrategy管理类其实有点问题。</p> <p>因为每次调用excuteStrategy的时候都会重复将RefelDbTypeEnum中的type和clazz属性读到了一个strategyMap的HashMap中，这样是不合理的。</p> <p>所以下面用了一个单例模式来解决这个问题。</p> <p>新建一个StrategySingleton。</p> <pre><code class="language-java">public class StrategySingleton {      /*     * 单例模式     * */     private static StrategySingleton instance=null;      private StrategySingleton(){     }      private static synchronized void syncInit() {         if (instance == null) {             instance = new StrategySingleton();         }     }      public static StrategySingleton getInstance() {         if (instance == null) {             syncInit();         }         return instance;     }      private static Map&lt;String,String&gt; strategyMap = new HashMap&lt;&gt;();     static{         for (RefelDbTypeEnum t : RefelDbTypeEnum.values())             strategyMap.put(t.type(), t.clazz());     }     public String strategy(String type){         return strategyMap.get(type);     } }</code></pre> <p>单例模式就不具体讲了哈，有兴趣的同学自行去了解。</p> <p>同时重新改造ManagerStrategy管理类。</p> <pre><code class="language-java">public static void excuteStrategy(String type){         String clz=StrategySingleton.getInstance().strategy(type);         try {             /*             * 通过反射将RefelDbTypeEnum中映射的类实例化             * */             Class clazz=Class.forName(clz);             Method excute =clazz.getDeclaredMethod("excute");             excute.invoke(clazz.newInstance());         } catch (ClassNotFoundException e) {             e.printStackTrace();         } catch (NoSuchMethodException e) {             e.printStackTrace();         } catch (IllegalAccessException e) {             e.printStackTrace();         } catch (InvocationTargetException e) {             e.printStackTrace();         } catch (InstantiationException e) {             e.printStackTrace();         }     }</code></pre> <p>如上，全部完成。</p> <p>代码托管地址：</p> <p>https://gitee.com/huangxiaoli/Rem-third-java.git</p> <p>很久没搞Java了，如果有问题请指正。</p> <p>如果还有更好的实现方法，请分享出来哈，三人行，必有师焉。</p> <p></p> <p>PS：PHP是世界上最好的语言。</p> </p></div> 			
                                <div class="col-md-12 mt-5">
                                                                        <p>上一个：<a href="/html/category/article-1387.htm">java自带的四种线程池</a></p>
                                                                        <p>下一个：<a href="/html/category/article-1389.htm">vue init download template_vue.extend和vue.component的区别</a></p>
                                                                    </div>

                                                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-3739.htm" title="ASP.NET Core中的Ocelot网关介绍_实用技巧">ASP.NET Core中的Ocelot网关介绍_实用技巧</a></li>
                        <li class="py-2"><a href="/html/category/article-2833.htm" title="windows查看已经连过wifi的密码">windows查看已经连过wifi的密码</a></li>
                        <li class="py-2"><a href="/html/category/article-1625.htm" title="Linux源码安装RabbitMQ高可用集群">Linux源码安装RabbitMQ高可用集群</a></li>
                        <li class="py-2"><a href="/html/category/article-4133.htm" title="Redis4-缓存过期和删除策略">Redis4-缓存过期和删除策略</a></li>
                        <li class="py-2"><a href="/html/category/article-2539.htm" title="Vue如何使用Element-ui表单发送数据与多张图片到后端详解_vue.js">Vue如何使用Element-ui表单发送数据与多张图片到后端详解_vue.js</a></li>
                        <li class="py-2"><a href="/html/category/article-1621.htm" title="SSM三大框架工作流程与原理详解">SSM三大框架工作流程与原理详解</a></li>
                        <li class="py-2"><a href="/html/category/article-3740.htm" title="Vue中transition单个节点过渡与transition-group列表过渡全过程_vue.js">Vue中transition单个节点过渡与transition-group列表过渡全过程_vue.js</a></li>
                        <li class="py-2"><a href="/html/category/article-1608.htm" title="linux下安装tomcat9,linux tomcat 9 安装及配置教程">linux下安装tomcat9,linux tomcat 9 安装及配置教程</a></li>
                        <li class="py-2"><a href="/html/category/article-1640.htm" title="promise和async await的区别">promise和async await的区别</a></li>
                        <li class="py-2"><a href="/html/category/article-4078.htm" title="Android 弹窗设计规范">Android 弹窗设计规范</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">4</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </div>
                <!-- Footer -->
        <footer class="footer">
            <div class="parallax_background parallax-window" data-parallax="scroll" data-image-src="/assets/addons/xcblog/img/srilankaaddress/footer.jpg" data-speed="0.8"></div>
            <div class="footer_overlay"></div>
            <div class="container">
                <div class="row">
                    <div class="col">
                        <div class="footer_content text-center d-flex flex-column align-items-center justify-content-center">
                            <p>
                                Sri Lanka Address 版权所有
                                <br />
                                Powered by WordPress
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </footer>
    </div>
    <script src="/assets/addons/xcblog/js/frontend/srilankaaddress/jquery-3.2.1.min.js"></script>
    <script src="/assets/addons/xcblog/css/srilankaaddress/bootstrap-4.1.2/popper.js"></script>
    <script src="/assets/addons/xcblog/css/srilankaaddress/bootstrap-4.1.2/bootstrap.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/owl.carousel.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/easing/easing.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/parallax-js-master/parallax.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/srilankaaddress/about.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>