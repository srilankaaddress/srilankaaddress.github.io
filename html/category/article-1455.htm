<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://srilankaaddress.github.io/html/category/article-1455.htm" />
    <title>Spring boot+LogBack+MDC实现链路追踪 - Sri Lanka Address</title>
        <meta charset="utf-8">
    <link rel="icon" href="/assets/addons/xcblog/img/srilankaaddress/favicon.ico" type="image/x-icon"/>
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="description" content="AerobicsFit template project">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?e8fff5fa52c11c99c5cdad6284174bdb";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/srilankaaddress/bootstrap-4.1.2/bootstrap.min.css">
    <link href="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/font-awesome-4.7.0/css/font-awesome.min.css" rel="stylesheet" type="text/css">
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/owl.carousel.css">
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/owl.theme.default.css">
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/animate.css">
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/srilankaaddress/about.css">
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/srilankaaddress/about_responsive.css">
</head>

<body>
    <div class="super_container">
                <!-- Header -->
        <header class="header">
            <div class="container">
                <div class="row">
                    <div class="col">
                        <div class="header_content d-flex flex-row align-items-center justify-content-start">
                            <div class="logo">Sri Lanka<span> Address</span></div>
                            <nav class="main_nav">
                                <ul class="d-flex flex-row align-items-center justify-content-start">
                                                                        <li><a href="/">首页</a></li>
                                                                        <li><a href="/html/category/">文章分类</a></li>
                                                                        <li><a href="#">关于</a></li>
                                    <li><a href="#">联系</a></li>
                                </ul>
                            </nav>
                            <div class="social header_social">
                                <ul class="d-flex flex-row align-items-center justify-content-start">
                                    <li><a href="#"><i class="fa fa-pinterest" aria-hidden="true"></i></a></li>
                                    <li><a href="#"><i class="fa fa-linkedin" aria-hidden="true"></i></a></li>
                                    <li><a href="#"><i class="fa fa-instagram" aria-hidden="true"></i></a></li>
                                    <li><a href="#"><i class="fa fa-facebook" aria-hidden="true"></i></a></li>
                                    <li><a href="#"><i class="fa fa-twitter" aria-hidden="true"></i></a></li>
                                </ul>
                            </div>
                            <div class="hamburger ml-auto"><i class="fa fa-bars" aria-hidden="true"></i></div>
                        </div>
                    </div>
                </div>
            </div>
        </header>
        <!-- Menu -->
        <div class="menu">
            <div class="menu_content d-flex flex-column align-items-center justify-content-center">
                <ul class="menu_nav_list text-center">
                                        <li><a href="index.html">Home</a></li>
                                        <li><a href="index.html">Home</a></li>
                                        <li><a href="#">关于</a></li>
                    <li><a href="#">联系</a></li>
                </ul>
            </div>
        </div>
        <!-- Home -->
        <div class="home">
            <div class="parallax_background parallax-window" data-parallax="scroll" data-image-src="/assets/addons/xcblog/img/srilankaaddress/about.jpg" data-speed="0.8"></div>
            <div class="home_container">
                <div class="container">
                    <div class="row">
                        <div class="col">
                            <div class="home_content">
                                <div class="home_title">Spring boot+LogBack+MDC实现链路追踪</div>
                                <div class="breadcrumbs">
                                    <ul class="d-flex flex-row align-items-center justify-content-start">
                                        <li><a href="/">首页</a></li>
                                        <li><a href="/html/category/">文章分类</a></li>
                                        <li>正文</li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- Classes -->
        <div class="classes">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                        <div class="row row-eq-height">
                            <div class="col-md-12">
                                  				  				  				<div id="content_views" class="htmledit_views"> <h1>MDC介绍</h1> <p>MDC(Mapped Diagnostic Context，映射调试上下文)是 log4j 、logback及log4j2 提供的一种方便在多线程条件下记录日志的功能。<strong>MDC</strong>&nbsp;可以看成是一个<strong>与当前线程绑定的哈希表</strong>，可以往其中添加键值对。MDC 中包含的内容可以<strong>被同一线程中执行的代码所访问</strong>。当前线程的子线程会继承其父线程中的 MDC 的内容。当需要记录日志时，只需要从 MDC 中获取所需的信息即可。</p> <h1>API说明：</h1> <ul> <li>clear() =&gt; 移除所有MDC</li> <li>get (String key) =&gt; 获取当前线程MDC中指定key的值</li> <li>getContext() =&gt; 获取当前线程MDC的MDC</li> <li>put(String key, Object o) =&gt; 往当前线程的MDC中存入指定的键值对</li> <li>remove(String key) =&gt; 删除当前线程MDC中指定的键值对 。</li> </ul> <h1>MDC使用</h1> <ol> <li>拦截器</li> </ol> <pre><code>@Component public class LogInterceptor implements HandlerInterceptor {     @Override     public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {         //如果有上层调用就用上层的ID         String traceId = request.getHeader(TraceIdUtil.TRACE_ID);         if (StringUtil.isEmpty(traceId))          {             TraceIdUtil.setTraceId(TraceIdUtil.generateTraceId());         }         else         {             TraceIdUtil.setTraceId(traceId);         }         return true;     }      @Override     public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)             throws Exception      {              }      @Override     public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)             throws Exception {         //调用结束后删除         TraceIdUtil.remove();     } }</code></pre> <ol> <li>工具类</li> </ol> <pre><code>public class TraceIdUtil {   public static final String TRACE_ID = "requestId";        public static String getTraceId()   {      String traceId =(String) MDC.get(TRACE_ID);      return traceId == null ? "" : traceId;   }      public static void setTraceId(String traceId)   {       MDC.put(TRACE_ID,traceId);   }      public static void remove()   {       MDC.remove(TRACE_ID);          }      public static void clear()   {       MDC.clear();   }      public static String generateTraceId() {      return UUID.randomUUID().toString().replace("-", "");   }</code></pre> <ol> <li>日志文件配置</li> </ol> <pre><code>&lt;property name="LOG_PATTERN" value="%date{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{requestId}] %logger{36} - %msg%n" /&gt;</code></pre> <p>重点是%X{requestId},requestId和MDC中的键名称保持一致。</p> <h1>MDC 存在的问题</h1> <p>至此基本的功能已经实现，但是存在一下几个问题</p> <ul> <li>多线程情况下，子线程中打印日志会丢失traceId.</li> <li>HTTP跨服务之间的调用丢失traceId.</li> </ul> <h1>子线程日志打印丢失traceId</h1> <p>问题重现</p> <pre><code>  @LogAnnotation(model="用户管理",func="查询用户信息",desc="根据用户名称")     @GetMapping("getUserByName")     public Result getUserByName(@RequestParam String name)     {         //主线程日志         logger.info("getUserByName paramter name:"+name);         for(int i=0;i&lt;5;i++)         {            //子线程日志             threadPoolTaskExecutor.execute(()-&gt;{                 logger.info("child thread:{}",name);                 userService.getUserByName(name);              });         }                  return Result.success();     }</code></pre> <p>运行结果</p> <pre><code>2022-03-13 12:45:44.156 [http-nio-8089-exec-1] INFO  [ec05a600ed1a4556934a3afa4883766a] c.s.fw.controller.UserController - getUserByName paramter name:1 2022-03-13 12:45:44.173 [Pool-A1] INFO  [] c.s.fw.controller.UserController - child thread:1</code></pre> <p>从运行的结果来看，子线程打印日志，日志中的traceId信息已经丢失。</p> <p>解决方案</p> <p>子线程在打印日志的过程中traceId将丢失，解决方案为重写线程池(对于直接new Thread 创建线程的情况不考略),实际开发中也需要禁止这种情况。</p> <pre><code>public class ThreadPoolExecutorMdcWrapper extends ThreadPoolTaskExecutor {     private static final long serialVersionUID = 3940722618853093830L;      @Override     public void execute(Runnable task)     {         super.execute(ThreadMdcUtil.wrap(task, MDC.getCopyOfContextMap()));     }      @Override     public &lt;T&gt; Future&lt;T&gt; submit(Callable&lt;T&gt; task)     {         return super                 .submit(ThreadMdcUtil.wrap(task, MDC.getCopyOfContextMap()));     }      @Override     public Future&lt;?&gt; submit(Runnable task)     {         return super                 .submit(ThreadMdcUtil.wrap(task, MDC.getCopyOfContextMap()));     } }</code></pre> <p>因为Spring Boot ThreadPoolTaskExecutor 已经对ThreadPoolExecutor进行封装，只需要继承ThreadPoolTaskExecutor重写相关的执行方法即可。</p> <pre><code>public class ThreadMdcUtil {     public static void setTraceIdIfAbsent() {         if (MDC.get(TraceIdUtil.TRACE_ID) == null)          {             MDC.put(TraceIdUtil.TRACE_ID, TraceIdUtil.generateTraceId());         }     }      public static &lt;T&gt; Callable&lt;T&gt; wrap(final Callable&lt;T&gt; callable, final Map&lt;String, String&gt; context) {         return () -&gt; {             if (context == null) {                 MDC.clear();             } else {                 MDC.setContextMap(context);             }             setTraceIdIfAbsent();             try {                 return callable.call();             } finally {                 MDC.clear();             }         };     }      public static Runnable wrap(final Runnable runnable, final Map&lt;String, String&gt; context) {         return () -&gt; {             if (context == null) {                 MDC.clear();             } else {                 MDC.setContextMap(context);             }             //设置traceId             setTraceIdIfAbsent();             try {                 runnable.run();             } finally {                 MDC.clear();             }         };     } }</code></pre> <p>代码说明：</p> <ul> <li>判断当前线程对应MDC的Map是否存在，如果存在则设置</li> <li>设置MDC中的traceId值，不存在则新生成，如果是子线程，MDC中traceId不为null</li> <li>执行run方法</li> </ul> <p>线程池配置</p> <pre><code>@Configuration public class ThreadPoolTaskExecutorConfig {     //最大可用的CPU核数     public static final int PROCESSORS = Runtime.getRuntime().availableProcessors();          @Bean     public ThreadPoolExecutorMdcWrapper getExecutor()     {         ThreadPoolExecutorMdcWrapper executor =new ThreadPoolExecutorMdcWrapper();         executor.setCorePoolSize(PROCESSORS *2);         executor.setMaxPoolSize(PROCESSORS * 4);         executor.setQueueCapacity(50);         executor.setKeepAliveSeconds(60);         executor.setThreadNamePrefix("Task-A");         executor.setRejectedExecutionHandler(new ThreadPoolExecutor.AbortPolicy());         executor.initialize();         return executor;     } }</code></pre> <p>重新运行结果发现子线程能够正常获取traceid信息进行跟踪。</p> <pre><code>2022-03-13 13:19:30.688 [Task-A1] INFO  [482929425cbc4476a4e7168615af7890] c.s.fw.controller.UserController - child thread:1 2022-03-13 13:19:31.003 [Task-A1] INFO  [482929425cbc4476a4e7168615af7890] c.s.fw.service.impl.UserServiceImpl - name:1</code></pre> <h1>HTTP调用丢失traceId</h1> <p>HTTP调用第三方服务接口时traceId丢失，需要在发送请求时在Request Header中添加traceId，在被调用方添加拦截器获取header中的traceId添加到MDC中。</p> <p>HTTP调用有多种方式，比较常见的有HttpClient、OKHttp、RestTemplate，以RestTemplate调用为例。</p> <ol> <li>接口调用方</li> </ol> <pre><code>public class RestTemplateTraceIdInterceptor implements         ClientHttpRequestInterceptor {     @Override     public ClientHttpResponse intercept(HttpRequest request, byte[] body,             ClientHttpRequestExecution clientHttpRequestExecution) throws IOException     {         String traceId=MDC.get("requestId");         if(traceId!=null)         {             request.getHeaders().set("requestId", traceId);         }         else         {             request.getHeaders().set("requestId", UUID.randomUUID().toString().replace("-", ""));         }         return clientHttpRequestExecution.execute(request, body);     }  }</code></pre> <p>RestTemplate添加拦截器即可。</p> <pre><code>restTemplate.setInterceptors(Arrays.asList(new RestTemplateTraceIdInterceptor()));</code></pre> <p>2.第三方服务需要添加拦截器。</p> <pre><code>@Component public class LogInterceptor implements HandlerInterceptor {     @Override     public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {         //如果有上层调用就用上层的ID         String traceId = request.getHeader(TraceIdUtil.TRACE_ID);         if (StringUtil.isEmpty(traceId))          {             TraceIdUtil.setTraceId(TraceIdUtil.generateTraceId());         }         else         {             TraceIdUtil.setTraceId(traceId);         }         return true;     }      @Override     public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)             throws Exception      {              }      @Override     public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)             throws Exception {         //调用结束后删除         TraceIdUtil.remove();     } }</code></pre> <p>其他HttpClient、OKHttp的实现方式与RestTemplate基本相同，这里就不一一列举。 Spring boot +logback+MDC实现全链路跟踪内容已经讲完了。在实际开发中，我也发现了大家对于日志的使用存在一些问题，下一章将讲解开发中日志使用规约。</p> <p class="img-center"></p> </div> 			
                                <div class="col-md-12 mt-5">
                                                                        <p>上一个：<a href="/html/category/article-1454.htm">手写useState与useEffect_在线工具</a></p>
                                                                        <p>下一个：<a href="/html/category/article-1456.htm">在Java中从控制台读取输入的方法</a></p>
                                                                    </div>

                                                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-1612.htm" title="C语言 模拟实现memcpy与memmove函数详解_C 语言">C语言 模拟实现memcpy与memmove函数详解_C 语言</a></li>
                        <li class="py-2"><a href="/html/category/article-1604.htm" title="go语言panic函数详解">go语言panic函数详解</a></li>
                        <li class="py-2"><a href="/html/category/article-1935.htm" title="JS脚本按顺序依次加载执行">JS脚本按顺序依次加载执行</a></li>
                        <li class="py-2"><a href="/html/category/article-1619.htm" title="sql server排查死锁优化性能_MsSql_">sql server排查死锁优化性能_MsSql_</a></li>
                        <li class="py-2"><a href="/html/category/article-4133.htm" title="Redis4-缓存过期和删除策略">Redis4-缓存过期和删除策略</a></li>
                        <li class="py-2"><a href="/html/category/article-1639.htm" title="Spring源码分析Spring BeanFactory 是怎么创建的？">Spring源码分析Spring BeanFactory 是怎么创建的？</a></li>
                        <li class="py-2"><a href="/html/category/article-4303.htm" title="宠物领养条件和要求（宠物领养的法律法规）">宠物领养条件和要求（宠物领养的法律法规）</a></li>
                        <li class="py-2"><a href="/html/category/article-1922.htm" title="SpringCloud 之Hystrix Dashboard 服务监控">SpringCloud 之Hystrix Dashboard 服务监控</a></li>
                        <li class="py-2"><a href="/html/category/article-3132.htm" title="SpringBoot和RocketMQ的实例RocketMQTemplate">SpringBoot和RocketMQ的实例RocketMQTemplate</a></li>
                        <li class="py-2"><a href="/html/category/article-2833.htm" title="windows查看已经连过wifi的密码">windows查看已经连过wifi的密码</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">6</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </div>
                <!-- Footer -->
        <footer class="footer">
            <div class="parallax_background parallax-window" data-parallax="scroll" data-image-src="/assets/addons/xcblog/img/srilankaaddress/footer.jpg" data-speed="0.8"></div>
            <div class="footer_overlay"></div>
            <div class="container">
                <div class="row">
                    <div class="col">
                        <div class="footer_content text-center d-flex flex-column align-items-center justify-content-center">
                            <p>
                                Sri Lanka Address 版权所有
                                <br />
                                Powered by WordPress
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </footer>
    </div>
    <script src="/assets/addons/xcblog/js/frontend/srilankaaddress/jquery-3.2.1.min.js"></script>
    <script src="/assets/addons/xcblog/css/srilankaaddress/bootstrap-4.1.2/popper.js"></script>
    <script src="/assets/addons/xcblog/css/srilankaaddress/bootstrap-4.1.2/bootstrap.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/owl.carousel.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/easing/easing.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/parallax-js-master/parallax.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/srilankaaddress/about.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>