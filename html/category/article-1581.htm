<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://srilankaaddress.github.io/html/category/article-1581.htm" />
    <title>SpringBoot导入导出数据 - Sri Lanka Address</title>
        <meta charset="utf-8">
    <link rel="icon" href="/assets/addons/xcblog/img/srilankaaddress/favicon.ico" type="image/x-icon"/>
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="description" content="AerobicsFit template project">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?e8fff5fa52c11c99c5cdad6284174bdb";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/srilankaaddress/bootstrap-4.1.2/bootstrap.min.css">
    <link href="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/font-awesome-4.7.0/css/font-awesome.min.css" rel="stylesheet" type="text/css">
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/owl.carousel.css">
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/owl.theme.default.css">
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/animate.css">
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/srilankaaddress/about.css">
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/srilankaaddress/about_responsive.css">
</head>

<body>
    <div class="super_container">
                <!-- Header -->
        <header class="header">
            <div class="container">
                <div class="row">
                    <div class="col">
                        <div class="header_content d-flex flex-row align-items-center justify-content-start">
                            <div class="logo">Sri Lanka<span> Address</span></div>
                            <nav class="main_nav">
                                <ul class="d-flex flex-row align-items-center justify-content-start">
                                                                        <li><a href="/">首页</a></li>
                                                                        <li><a href="/html/category/">文章分类</a></li>
                                                                        <li><a href="#">关于</a></li>
                                    <li><a href="#">联系</a></li>
                                </ul>
                            </nav>
                            <div class="social header_social">
                                <ul class="d-flex flex-row align-items-center justify-content-start">
                                    <li><a href="#"><i class="fa fa-pinterest" aria-hidden="true"></i></a></li>
                                    <li><a href="#"><i class="fa fa-linkedin" aria-hidden="true"></i></a></li>
                                    <li><a href="#"><i class="fa fa-instagram" aria-hidden="true"></i></a></li>
                                    <li><a href="#"><i class="fa fa-facebook" aria-hidden="true"></i></a></li>
                                    <li><a href="#"><i class="fa fa-twitter" aria-hidden="true"></i></a></li>
                                </ul>
                            </div>
                            <div class="hamburger ml-auto"><i class="fa fa-bars" aria-hidden="true"></i></div>
                        </div>
                    </div>
                </div>
            </div>
        </header>
        <!-- Menu -->
        <div class="menu">
            <div class="menu_content d-flex flex-column align-items-center justify-content-center">
                <ul class="menu_nav_list text-center">
                                        <li><a href="index.html">Home</a></li>
                                        <li><a href="index.html">Home</a></li>
                                        <li><a href="#">关于</a></li>
                    <li><a href="#">联系</a></li>
                </ul>
            </div>
        </div>
        <!-- Home -->
        <div class="home">
            <div class="parallax_background parallax-window" data-parallax="scroll" data-image-src="/assets/addons/xcblog/img/srilankaaddress/about.jpg" data-speed="0.8"></div>
            <div class="home_container">
                <div class="container">
                    <div class="row">
                        <div class="col">
                            <div class="home_content">
                                <div class="home_title">SpringBoot导入导出数据</div>
                                <div class="breadcrumbs">
                                    <ul class="d-flex flex-row align-items-center justify-content-start">
                                        <li><a href="/">首页</a></li>
                                        <li><a href="/html/category/">文章分类</a></li>
                                        <li>正文</li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- Classes -->
        <div class="classes">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                        <div class="row row-eq-height">
                            <div class="col-md-12">
                                  				  				  				<div id="content_views" class="htmledit_views"> <p>今天给大家带来的是一个 <strong>SpringBoot导入导出数据</strong></p> <hr/> <p>首先我们先创建项目 <strong>注意：创建SpringBoot项目时一定要联网不然会报错</strong><img fetchpriority="high" decoding="async" alt="" height="678" src="http://img.555519.xyz/uploads/20221230/92f082aed2c0865b73aaa78c0bea0ccc.jpg"></p> <p>项目创建好后我们首先对 <strong>application.yml 进行编译</strong></p> <p><img decoding="async" alt="" height="101" src="http://img.555519.xyz/uploads/20221230/7f6dd89af4dfa78ec0a21683ccf32d89.jpg"></p> <pre><code>server:   port: 8081  # mysql spring:   datasource:     driver-class-name: com.mysql.cj.jdbc.Driver     url: jdbc:mysql://127.0.0.1:3306/dvd?characterEncoding=utf-8&amp;&amp;severTimezone=utc     username: root     password: root    thymeleaf:     mode: HTML5     cache: false     suffix: .html     prefix: classpath:/  mybatis:   mapperLocations: classpath:mapper/**/*.xml   configuration:     map-underscore-to-camel-case: true  pagehelper:   helper-dialect: mysql   offset-as-page-num: true   params: count=countSql   reasonable: true   row-bounds-with-count: true   support-methods-arguments: true</code></pre> <p><strong>注意：在 ：后一定要空格，这是他的语法，不空格就会运行报错</strong></p> <p>接下来我们进行对项目的构建 <strong>创建好如下几个包</strong><strong> </strong>可根据自己实际需要创建其他的工具包之类的</p> <p><img decoding="async" alt="" height="182" src="http://img.555519.xyz/uploads/20221230/2f73aaeda28e8b0b834fe81406833093.jpg"></p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mapper：用于存放dao层接口</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pojo：用于存放实体类</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;service：用于存放service层接口，以及service层实现类</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; controller：用于存放controller控制层&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p> <hr/> <p>接下来我们开始编写代码</p> <p>首先是实体类</p> <pre><code class="language-java">package com.bdqn.springbootexcel.pojo;  import lombok.Data;  import java.io.Serializable; import java.util.List;  @Data public class ExcelData implements Serializable{      //文件名称     private String fileName;     //表头数据     private String[] head;     //数据     private List&lt;String[]&gt; data;  } </code></pre> <p>&nbsp;然后是service层</p> <pre><code class="language-java">package com.bdqn.springbootexcel.service;  import com.bdqn.springbootexcel.pojo.User; import org.apache.ibatis.annotations.Select;  import javax.servlet.http.HttpServletResponse; import java.util.List;  public interface ExcelService {      Boolean exportExcel(HttpServletResponse response, String fileName, Integer pageNum, Integer pageSize);      Boolean importExcel(String fileName);      List&lt;User&gt; find(); } </code></pre> <pre><code class="language-java">package com.bdqn.springbootexcel.service;  import com.bdqn.springbootexcel.mapper.UserMapper; import com.bdqn.springbootexcel.pojo.ExcelData; import com.bdqn.springbootexcel.pojo.User; import com.bdqn.springbootexcel.util.ExcelUtil; import lombok.extern.slf4j.Slf4j; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service;  import javax.servlet.http.HttpServletResponse; import java.util.ArrayList; import java.util.List;  @Slf4j @Service public class ExcelServiceImpl implements ExcelService {      @Autowired     private UserMapper userMapper;      @Override     public Boolean exportExcel(HttpServletResponse response, String fileName, Integer pageNum, Integer pageSize) {         log.info("导出数据开始。。。。。。");         //查询数据并赋值给ExcelData         List&lt;User&gt; userList = userMapper.find();         List&lt;String[]&gt; list = new ArrayList&lt;String[]&gt;();         for (User user : userList) {             String[] arrs = new String[userList.size()];             arrs[0] = String.valueOf(user.getId());             arrs[1] = String.valueOf(user.getName());             arrs[2] = String.valueOf(user.getAge());             arrs[3] = String.valueOf(user.getSex());             list.add(arrs);         }         //表头赋值         String[] head = {"序列", "名字", "年龄", "性别"};         ExcelData data = new ExcelData();         data.setHead(head);         data.setData(list);         data.setFileName(fileName);         //实现导出         try {             ExcelUtil.exportExcel(response, data);             log.info("导出数据结束。。。。。。");             return true;         } catch (Exception e) {             log.info("导出数据失败。。。。。。");             return false;         }     }      @Override     public Boolean importExcel(String fileName) {         log.info("导入数据开始。。。。。。");         try {             List&lt;Object[]&gt; list = ExcelUtil.importExcel(fileName);             System.out.println(list.toString());             for (int i = 0; i &lt; list.size(); i++) {                 User user = new User();                 user.setName((String) list.get(i)[0]);                 user.setAge((String) list.get(i)[1]);                 user.setSex((String) list.get(i)[2]);                 userMapper.add(user);             }             log.info("导入数据结束。。。。。。");             return true;         } catch (Exception e) {             log.info("导入数据失败。。。。。。");             e.printStackTrace();         }         return false;     }      @Override     public List&lt;User&gt; find() {         return userMapper.find();     } } </code></pre> <p>工具类</p> <pre><code class="language-java">package com.bdqn.springbootexcel.util;  import com.bdqn.springbootexcel.pojo.ExcelData; import com.bdqn.springbootexcel.pojo.User; import lombok.extern.slf4j.Slf4j; import org.apache.poi.hssf.usermodel.*; import org.apache.poi.ss.usermodel.*;  import javax.servlet.http.HttpServletResponse; import java.io.BufferedOutputStream; import java.io.FileInputStream; import java.io.InputStream; import java.io.OutputStream; import java.util.ArrayList; import java.util.List;  import static org.apache.poi.ss.usermodel.CellType.*;  @Slf4j public class ExcelUtil {     public static void exportExcel(HttpServletResponse response, ExcelData data) {         log.info("导出解析开始，fileName:{}",data.getFileName());         try {             //实例化HSSFWorkbook             HSSFWorkbook workbook = new HSSFWorkbook();             //创建一个Excel表单，参数为sheet的名字             HSSFSheet sheet = workbook.createSheet("sheet");             //设置表头             setTitle(workbook, sheet, data.getHead());             //设置单元格并赋值             setData(sheet, data.getData());             //设置浏览器下载             setBrowser(response, workbook, data.getFileName());             log.info("导出解析成功!");         } catch (Exception e) {             log.info("导出解析失败!");             e.printStackTrace();         }     }      private static void setTitle(HSSFWorkbook workbook, HSSFSheet sheet, String[] str) {         try {             HSSFRow row = sheet.createRow(0);             //设置列宽，setColumnWidth的第二个参数要乘以256，这个参数的单位是1/256个字符宽度             for (int i = 0; i &lt;= str.length; i++) {                 sheet.setColumnWidth(i, 15 * 256);             }             //设置为居中加粗,格式化时间格式             HSSFCellStyle style = workbook.createCellStyle();             HSSFFont font = workbook.createFont();             font.setBold(true);             style.setFont(font);             style.setDataFormat(HSSFDataFormat.getBuiltinFormat("m/d/yy h:mm"));             //创建表头名称             HSSFCell cell;             for (int j = 0; j &lt; str.length; j++) {                 cell = row.createCell(j);                 cell.setCellValue(str[j]);                 cell.setCellStyle(style);             }         } catch (Exception e) {             log.info("导出时设置表头失败！");             e.printStackTrace();         }     }      private static void setData(HSSFSheet sheet, List&lt;String[]&gt; data) {         try{             int rowNum = 1;             for (int i = 0; i &lt; data.size(); i++) {                 HSSFRow row = sheet.createRow(rowNum);                 for (int j = 0; j &lt; data.get(i).length; j++) {                     row.createCell(j).setCellValue(data.get(i)[j]);                 }                 rowNum++;             }             log.info("表格赋值成功！");         }catch (Exception e){             log.info("表格赋值失败！");             e.printStackTrace();         }     }      private static void setBrowser(HttpServletResponse response, HSSFWorkbook workbook, String fileName) {         try {             //清空response             response.reset();             //设置response的Header             response.addHeader("Content-Disposition", "attachment;filename=" + fileName);             OutputStream os = new BufferedOutputStream(response.getOutputStream());             response.setContentType("application/vnd.ms-excel;charset=gb2312");             //将excel写入到输出流中             workbook.write(os);             os.flush();             os.close();             log.info("设置浏览器下载成功！");         } catch (Exception e) {             log.info("设置浏览器下载失败！");             e.printStackTrace();         }      }      public static List&lt;Object[]&gt; importExcel(String fileName) {         log.info("导入解析开始，fileName:{}",fileName);         try {             List&lt;Object[]&gt; list = new ArrayList&lt;&gt;();             InputStream inputStream = new FileInputStream(fileName);             Workbook workbook = WorkbookFactory.create(inputStream);             Sheet sheet = workbook.getSheetAt(0);             //获取sheet的行数             int rows = sheet.getPhysicalNumberOfRows();             for (int i = 0; i &lt; rows; i++) {                 //过滤表头行                 if (i == 0) {                     continue;                 }                 //获取当前行的数据                 Row row = sheet.getRow(i);                 Object[] objects = new Object[row.getPhysicalNumberOfCells()];                 int index = 0;                 for (Cell cell : row) {                     if (cell.getCellType().equals(NUMERIC)) {                         objects[index] = (int) cell.getNumericCellValue();                     }                     if (cell.getCellType().equals(STRING)) {                         objects[index] = cell.getStringCellValue();                     }                     if (cell.getCellType().equals(BOOLEAN)) {                         objects[index] = cell.getBooleanCellValue();                     }                     if (cell.getCellType().equals(ERROR)) {                         objects[index] = cell.getErrorCellValue();                     }                     index++;                 }                 list.add(objects);             }             log.info("导入文件解析成功！");             return list;         }catch (Exception e){             log.info("导入文件解析失败！");             e.printStackTrace();         }         return null;     }      //测试导入     public static void main(String[] args) {         try {             String fileName = "G:/test.xlsx";             List&lt;Object[]&gt; list = importExcel(fileName);             for (int i = 0; i &lt; list.size(); i++) {                 User user = new User();                 user.setName((String) list.get(i)[0]);                 user.setAge((String) list.get(i)[1]);                 user.setSex((String) list.get(i)[2]);                 System.out.println(user.toString());             }         } catch (Exception e) {             e.printStackTrace();         }     }  } </code></pre> <p>最后是controller层</p> <pre><code class="language-java">package com.bdqn.springbootexcel.controller;  import com.bdqn.springbootexcel.pojo.User; import com.bdqn.springbootexcel.service.ExcelService; import lombok.extern.slf4j.Slf4j; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.ResponseBody; import org.springframework.web.bind.annotation.RestController;  import javax.servlet.http.HttpServletResponse; import java.util.List;  @Slf4j @RestController public class ExcelController {      @Autowired     private ExcelService excelService;      @GetMapping("/export")     public String exportExcel(HttpServletResponse response, String fileName, Integer pageNum, Integer pageSize) {         fileName = "test.xlsx";         if (fileName == null || "".equals(fileName)) {             return "文件名不能为空！";         } else {             if (fileName.endsWith("xls") || fileName.endsWith("xlsx")) {                 Boolean isOk = excelService.exportExcel(response, fileName, 1, 10);                 if (isOk) {                     return "导出成功！";                 } else {                     return "导出失败！";                 }             }             return "文件格式有误！";         }     }      @GetMapping("/import")     public String importExcel(String fileName) {         fileName = "G:/test.xlsx";         if (fileName == null &amp;&amp; "".equals(fileName)) {             return "文件名不能为空！";         } else {             if (fileName.endsWith("xls") || fileName.endsWith("xlsx")) {                 Boolean isOk = excelService.importExcel(fileName);                 if (isOk) {                     return "导入成功！";                 } else {                     return "导入失败！";                 }             }             return "文件格式错误！";         }     }      //饼状图的数据查询     //@ResponseBody     @RequestMapping("/pojos_bing")     public List&lt;User&gt; gotoIndex() {         List&lt;User&gt; pojos = excelService.find();         return pojos;     }  } </code></pre> <hr/> <p>到现在为止我们的后端代码就已经完全搞定了，前端页面如下</p> <p>写了一个简单前端用于测试</p> <p>index.html</p> <pre><code class="language-java">&lt;!DOCTYPE html&gt; &lt;html lang="en" xmlns:th="http://www.thymeleaf.org"&gt; &lt;html lang="en"&gt; &lt;head&gt;     &lt;meta charset="UTF-8"&gt;     &lt;title&gt;Title&lt;/title&gt; &lt;/head&gt; &lt;body&gt;     &lt;div align="center"&gt;         &lt;a th:href="@{'/export'}"&gt;导出&lt;/a&gt;         &lt;a th:href="@{'/import'}"&gt;导入&lt;/a&gt;     &lt;/div&gt; &lt;/body&gt; &lt;/html&gt;</code></pre> <p>当我们点击导出按钮时浏览器会自动下载</p> <p>当我们点击导入按钮时会往数据库中添加表格数据</p> <hr/> <p><strong>今天给大家带来的就是这些内容，感谢观看！</strong></p> <p><strong>有问题可以在评论区指正，我会及时修改！</strong></p> </p></div> 			
                                <div class="col-md-12 mt-5">
                                                                        <p>上一个：<a href="/html/category/article-1580.htm">EFCore 6.0入门看这篇就够了</a></p>
                                                                        <p>下一个：<a href="/html/category/article-1582.htm">Qt 实现文字输入框，带字数限制</a></p>
                                                                    </div>

                                                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-1964.htm" title="python查看包版本、更新单个包、卸载单个包">python查看包版本、更新单个包、卸载单个包</a></li>
                        <li class="py-2"><a href="/html/category/article-1627.htm" title="go语言编译过程概述">go语言编译过程概述</a></li>
                        <li class="py-2"><a href="/html/category/article-3740.htm" title="Vue中transition单个节点过渡与transition-group列表过渡全过程_vue.js">Vue中transition单个节点过渡与transition-group列表过渡全过程_vue.js</a></li>
                        <li class="py-2"><a href="/html/category/article-4106.htm" title="JAVA容器详解">JAVA容器详解</a></li>
                        <li class="py-2"><a href="/html/category/article-2249.htm" title=".NET Core Hangfire任务计划_在线工具">.NET Core Hangfire任务计划_在线工具</a></li>
                        <li class="py-2"><a href="/html/category/article-3766.htm" title="vue更新数据后重新请求数据并刷新页面">vue更新数据后重新请求数据并刷新页面</a></li>
                        <li class="py-2"><a href="/html/category/article-3132.htm" title="SpringBoot和RocketMQ的实例RocketMQTemplate">SpringBoot和RocketMQ的实例RocketMQTemplate</a></li>
                        <li class="py-2"><a href="/html/category/article-1619.htm" title="sql server排查死锁优化性能_MsSql_">sql server排查死锁优化性能_MsSql_</a></li>
                        <li class="py-2"><a href="/html/category/article-4078.htm" title="Android 弹窗设计规范">Android 弹窗设计规范</a></li>
                        <li class="py-2"><a href="/html/category/article-4489.htm" title="板栗乌鸡汤的做法与功效与作用(板栗乌鸡汤的做法大全)">板栗乌鸡汤的做法与功效与作用(板栗乌鸡汤的做法大全)</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">20</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </div>
                <!-- Footer -->
        <footer class="footer">
            <div class="parallax_background parallax-window" data-parallax="scroll" data-image-src="/assets/addons/xcblog/img/srilankaaddress/footer.jpg" data-speed="0.8"></div>
            <div class="footer_overlay"></div>
            <div class="container">
                <div class="row">
                    <div class="col">
                        <div class="footer_content text-center d-flex flex-column align-items-center justify-content-center">
                            <p>
                                Sri Lanka Address 版权所有
                                <br />
                                Powered by WordPress
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </footer>
    </div>
    <script src="/assets/addons/xcblog/js/frontend/srilankaaddress/jquery-3.2.1.min.js"></script>
    <script src="/assets/addons/xcblog/css/srilankaaddress/bootstrap-4.1.2/popper.js"></script>
    <script src="/assets/addons/xcblog/css/srilankaaddress/bootstrap-4.1.2/bootstrap.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/owl.carousel.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/easing/easing.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/parallax-js-master/parallax.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/srilankaaddress/about.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>