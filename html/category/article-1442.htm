<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://srilankaaddress.github.io/html/category/article-1442.htm" />
    <title>SpringBoot整合Shiro和Redis的示例代码_java - Sri Lanka Address</title>
        <meta charset="utf-8">
    <link rel="icon" href="/assets/addons/xcblog/img/srilankaaddress/favicon.ico" type="image/x-icon"/>
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="description" content="AerobicsFit template project">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?e8fff5fa52c11c99c5cdad6284174bdb";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/srilankaaddress/bootstrap-4.1.2/bootstrap.min.css">
    <link href="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/font-awesome-4.7.0/css/font-awesome.min.css" rel="stylesheet" type="text/css">
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/owl.carousel.css">
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/owl.theme.default.css">
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/animate.css">
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/srilankaaddress/about.css">
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/srilankaaddress/about_responsive.css">
</head>

<body>
    <div class="super_container">
                <!-- Header -->
        <header class="header">
            <div class="container">
                <div class="row">
                    <div class="col">
                        <div class="header_content d-flex flex-row align-items-center justify-content-start">
                            <div class="logo">Sri Lanka<span> Address</span></div>
                            <nav class="main_nav">
                                <ul class="d-flex flex-row align-items-center justify-content-start">
                                                                        <li><a href="/">首页</a></li>
                                                                        <li><a href="/html/category/">文章分类</a></li>
                                                                        <li><a href="#">关于</a></li>
                                    <li><a href="#">联系</a></li>
                                </ul>
                            </nav>
                            <div class="social header_social">
                                <ul class="d-flex flex-row align-items-center justify-content-start">
                                    <li><a href="#"><i class="fa fa-pinterest" aria-hidden="true"></i></a></li>
                                    <li><a href="#"><i class="fa fa-linkedin" aria-hidden="true"></i></a></li>
                                    <li><a href="#"><i class="fa fa-instagram" aria-hidden="true"></i></a></li>
                                    <li><a href="#"><i class="fa fa-facebook" aria-hidden="true"></i></a></li>
                                    <li><a href="#"><i class="fa fa-twitter" aria-hidden="true"></i></a></li>
                                </ul>
                            </div>
                            <div class="hamburger ml-auto"><i class="fa fa-bars" aria-hidden="true"></i></div>
                        </div>
                    </div>
                </div>
            </div>
        </header>
        <!-- Menu -->
        <div class="menu">
            <div class="menu_content d-flex flex-column align-items-center justify-content-center">
                <ul class="menu_nav_list text-center">
                                        <li><a href="index.html">Home</a></li>
                                        <li><a href="index.html">Home</a></li>
                                        <li><a href="#">关于</a></li>
                    <li><a href="#">联系</a></li>
                </ul>
            </div>
        </div>
        <!-- Home -->
        <div class="home">
            <div class="parallax_background parallax-window" data-parallax="scroll" data-image-src="/assets/addons/xcblog/img/srilankaaddress/about.jpg" data-speed="0.8"></div>
            <div class="home_container">
                <div class="container">
                    <div class="row">
                        <div class="col">
                            <div class="home_content">
                                <div class="home_title">SpringBoot整合Shiro和Redis的示例代码_java</div>
                                <div class="breadcrumbs">
                                    <ul class="d-flex flex-row align-items-center justify-content-start">
                                        <li><a href="/">首页</a></li>
                                        <li><a href="/html/category/">文章分类</a></li>
                                        <li>正文</li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- Classes -->
        <div class="classes">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                        <div class="row row-eq-height">
                            <div class="col-md-12">
                                  				  				  				<div id="navCategory"> <h5 class="catalogue">目录</h5> <ul class="first_class_ul"> <li>1.准备工作</li> <li>2.编写index,login,register三个JSP</li> <li>3.实现User、Role、Permission三个POJO</li> <li>4.实现Controller、Service、Dao</li> <li>5.实现SaltUtil和ApplicationContextUtil两个工具类</li> <li>6.实现核心Shiro</li> <li>7.实现Redis分布式缓存</li> </ul> </div> <p>demo源码</p> <p>此demo用SpringBoot+Shiro简单实现了登陆、注册、认证、授权的功能，并用redis做分布式缓存提高性能。</p> <p class="maodian"></p> <h2>1.准备工作</h2> <p>导入pom.xml</p> <div class="ay1code"> <pre class="brush:xml;"><?xml version="1.0" encoding="UTF-8"?>  <project xmlns="http://maven.apache.org/POM/4.0.0"           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"           xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">      <modelVersion>4.0.0</modelVersion>        <parent>          <groupId>org.springframework.boot</groupId>          spring-boot-starter-parent</artifactId>          <version>2.3.2.RELEASE</version>      </parent>      <groupId>com.ego</groupId>      <artifactId>shirodemo</artifactId>      <version>1.0-SNAPSHOT</version>      <properties>          <java.version>1.8</java.version>      </properties>      <dependencies>          <dependency>              <groupId>org.springframework.boot</groupId>              <artifactId>spring-boot-starter-web</artifactId>          </dependency>          <dependency>              <groupId>org.projectlombok</groupId>              <artifactId>lombok</artifactId>          </dependency>          <dependency>              <groupId>mysql</groupId>              <artifactId>mysql-connector-java</artifactId>          </dependency>          <dependency>              <groupId>org.springframework.boot</groupId>              <artifactId>spring-boot-starter-validation</artifactId>          </dependency>          <dependency>              <groupId>org.apache.httpcomponents</groupId>              <artifactId>httpcore</artifactId>              <version>4.4.13</version>          </dependency>            <!-- 引入jsp依赖 -->          <dependency>              <groupId>org.apache.tomcat.embed</groupId>              <artifactId>tomcat-embed-jasper</artifactId>          </dependency>            <dependency>              <groupId>jstl</groupId>              <artifactId>jstl</artifactId>              <version>1.2</version>          </dependency>            <!-- shiro -->          <dependency>              <groupId>org.apache.shiro</groupId>              <artifactId>shiro-spring-boot-starter</artifactId>              <version>1.5.3</version>          </dependency>            <!-- mybatis plus -->          <dependency>              <groupId>com.baomidou</groupId>              <artifactId>mybatis-plus-boot-starter</artifactId>              <version>3.4.1</version>          </dependency>            <!-- Druid数据源 -->          <dependency>              <groupId>com.alibaba</groupId>              <artifactId>druid-spring-boot-starter</artifactId>              <version>1.1.10</version>          </dependency>            <!-- Mysql -->          <dependency>              <groupId>mysql</groupId>              <artifactId>mysql-connector-java</artifactId>              <scope>runtime</scope>          </dependency>          <dependency>              <groupId>io.springfox</groupId>              <artifactId>springfox-swagger2</artifactId>              <version>2.9.2</version>          </dependency>          <dependency>              <groupId>io.springfox</groupId>              <artifactId>springfox-swagger-ui</artifactId>              <version>2.9.2</version>          </dependency>          <dependency>              <groupId>log4j</groupId>              <artifactId>log4j</artifactId>              <version>1.2.17</version>          </dependency>          <dependency>              <groupId>org.apache.shiro</groupId>              <artifactId>shiro-ehcache</artifactId>              <version>1.5.3</version>          </dependency>          <!-- 引入redis -->          <dependency>              <groupId>org.springframework.boot</groupId>              <artifactId>spring-boot-starter-data-redis</artifactId>          </dependency>        </dependencies>    </project>  </pre> </div> <p>配置yml文件</p> <div class="ay1code"> <pre class="brush:java;">spring:    # 设置视图模板为jsp    mvc:      view:        prefix: /        suffix: .jsp    datasource:      type: com.alibaba.druid.pool.DruidDataSource      druid:        driver-class-name: com.mysql.cj.jdbc.Driver        url: jdbc:mysql://localhost:3306/test?useUnicode=true&characterEncoding=UTF-8&allowMultiQueries=true&serverTimezone=UTC        username: root        password: root        # 监控统计拦截的filters        filters: stat,wall,log4j,config        # 配置初始化大小/最小/最大        initial-size: 5        min-idle: 5        max-active: 20        # 获取连接等待超时时间        max-wait: 60000        # 间隔多久进行一次检测，检测需要关闭的空闲连接        time-between-eviction-runs-millis: 60000        # 一个连接在池中最小生存的时间        min-evictable-idle-time-millis: 300000        validation-query: SELECT 'x'        test-while-idle: true        test-on-borrow: false        test-on-return: false        # 打开PSCache，并指定每个连接上PSCache的大小。oracle设为true，mysql设为false。分库分表较多推荐设置为false        pool-prepared-statements: false        max-pool-prepared-statement-per-connection-size: 20    redis:      host: 127.0.0.1      port: 6379      password: abc123456      database: 0    mybatis-plus:    type-aliases-package: com.ego.pojo    configuration:      map-underscore-to-camel-case: true  </pre> </div> <p class="maodian"><a name="_label1" rel="nofollow"></p> <h2>2.编写index,login,register三个JSP</h2> <div class="ay1code"> <pre class="brush:plain;"><%--解决页面乱码--%>  <%@page contentType="text/html; UTF-8" pageEncoding="UTF-8" isELIgnored="false" %>  <!doctype html>  <html lang="en">  <head>      <meta charset="UTF-8">      <meta name="viewport" content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">      <meta http-equiv="X-UA-Compatible" content="ie=edge">      <title>index</title>  </head>  <body>      <form action="${pageContext.request.contextPath}/user/login" method="post">          用户名:<input type="text" name="username" > <br/>          密码  : <input type="text" name="password"> <br>          <input type="submit" value="登录">      </form>  </body>  </html>  <%--解决页面乱码--%>  <%@page contentType="text/html; UTF-8" pageEncoding="UTF-8" isELIgnored="false" %>  <%@taglib prefix="shiro" uri="http://shiro.apache.org/tags" %>  <!doctype html>  <html lang="en">  <head>    <meta charset="UTF-8">    <meta name="viewport"          content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">    <meta http-equiv="X-UA-Compatible" content="ie=edge">    <title>index</title>  </head>  <body>  <h1>系统主页</h1>  退出用户  <ul>    <%-- admin角色的用户能同时拥有用户管理和订单管理的权限，user角色的用户只拥有订单管理的权限 --%>    <shiro:hasRole name="admin">      <li>        用户管理      </li>    </shiro:hasRole>    <%-- admin角色的用户对订单有增删改查的权限，user角色的用户只能查看订单 --%>    <shiro:hasAnyRoles name="admin,user">      <li>        订单管理        <ul>          <shiro:hasPermission name="order:add:*">            <li>新增</li>          </shiro:hasPermission>          <shiro:hasPermission name="order:del:*">            <li>删除</li>          </shiro:hasPermission>          <shiro:hasPermission name="order:upd:*">            <li>修改</li>          </shiro:hasPermission>          <shiro:hasPermission name="order:find:*">            <li>查询</li>          </shiro:hasPermission>        </ul>      </li>    </shiro:hasAnyRoles>  </ul>  </body>  </html>  <%--解决页面乱码--%>  <%@page contentType="text/html; UTF-8" pageEncoding="UTF-8" isELIgnored="false" %>  <!doctype html>  <html lang="en">  <head>      <meta charset="UTF-8">      <meta name="viewport"            content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">      <meta http-equiv="X-UA-Compatible" content="ie=edge">      <title>register</title>  </head>  <body>  <h1>用户注册</h1>  <form action="${pageContext.request.contextPath}/user/register" method="post">      用户名:<input type="text" name="username" > <br/>      密码  : <input type="text" name="password"> <br>      <input type="submit" value="立即注册">  </form>  </body>  </html>  </pre> </div> <p class="maodian"></p> <h2>3.实现User、Role、Permission三个POJO</h2> <div class="ay1code"> <pre class="brush:java;">package com.ego.pojo;  import com.baomidou.mybatisplus.annotation.*;  import io.swagger.annotations.ApiModel;  import io.swagger.annotations.ApiModelProperty;  import lombok.AllArgsConstructor;  import lombok.Data;  import lombok.NoArgsConstructor;  import java.io.Serializable;  import java.util.ArrayList;  import java.util.List;  /**   * @author 袁梦达 2019012364   */  @Data  @NoArgsConstructor  @AllArgsConstructor  @TableName("t_user")  @ApiModel("用户实体类")  public class User implements Serializable {      /** 数据库中设置该字段自增时该注解不能少 **/      @TableId(type = IdType.AUTO)      @ApiModelProperty(name = "id", value = "ID 主键")      private Integer id;      @TableField(fill = FieldFill.INSERT_UPDATE)      @ApiModelProperty(name = "username", value = "用户名")      private String username;      @TableField(fill = FieldFill.INSERT_UPDATE)      @ApiModelProperty(name = "password", value = "密码")      private String password;      @TableField(fill = FieldFill.INSERT)      @ApiModelProperty(name = "salt", value = "盐")      private String salt;      @TableField(fill = FieldFill.INSERT_UPDATE)      @ApiModelProperty(name = "age", value = "年龄")      private Integer age;      @TableField(fill = FieldFill.INSERT_UPDATE)      @ApiModelProperty(name = "email", value = "邮箱")      private String email;      @TableField(fill = FieldFill.INSERT_UPDATE)      @ApiModelProperty(name = "address", value = "地址")      private String address;      @TableField(exist = false)      private List<Role> roles = new ArrayList<>();  }  package com.ego.pojo;  import com.baomidou.mybatisplus.annotation.*;  import io.swagger.annotations.ApiModel;  import io.swagger.annotations.ApiModelProperty;  import lombok.AllArgsConstructor;  import lombok.Data;  import lombok.NoArgsConstructor;  import java.io.Serializable;  import java.util.ArrayList;  import java.util.List;  /**   * @author 袁梦达 2019012364   */  @Data  @NoArgsConstructor  @AllArgsConstructor  @TableName("t_role")  @ApiModel("角色实体类")  public class Role implements Serializable {      /** 数据库中设置该字段自增时该注解不能少 **/      @TableId(type = IdType.AUTO)      @ApiModelProperty(name = "id", value = "ID 主键")      private Integer id;      @TableField(fill = FieldFill.INSERT_UPDATE)      @ApiModelProperty(name = "name", value = "角色名称")      private String name;      @TableField(exist = false)      private List<Permission> permissions = new ArrayList<>();  }  package com.ego.pojo;  import com.baomidou.mybatisplus.annotation.*;  import io.swagger.annotations.ApiModel;  import io.swagger.annotations.ApiModelProperty;  import lombok.AllArgsConstructor;  import lombok.Data;  import lombok.NoArgsConstructor;  import java.io.Serializable;  /**   * @author 袁梦达 2019012364   */  @Data  @NoArgsConstructor  @AllArgsConstructor  @TableName("t_permission")  @ApiModel("权限实体类")  public class Permission implements Serializable {      /** 数据库中设置该字段自增时该注解不能少 **/      @TableId(type = IdType.AUTO)      @ApiModelProperty(name = "id", value = "ID主键")      private Integer id;      @TableField(fill = FieldFill.INSERT_UPDATE)      @ApiModelProperty(name = "name", value = "权限名称")      private String name;      @TableField(fill = FieldFill.INSERT_UPDATE)      @ApiModelProperty(name = "url", value = "权限菜单URL")      private String url;  }  </pre> </div> <p class="maodian"></p> <h2>4.实现Controller、Service、Dao</h2> <p>这里dao采用了mybatis-plus</p> <div class="ay1code"> <pre class="brush:java;">package com.ego.controller;  import com.ego.pojo.User;  import com.ego.service.UserService;  import org.apache.shiro.SecurityUtils;  import org.apache.shiro.authc.IncorrectCredentialsException;  import org.apache.shiro.authc.UnknownAccountException;  import org.apache.shiro.authc.UsernamePasswordToken;  import org.apache.shiro.subject.Subject;  import org.springframework.beans.factory.annotation.Autowired;  import org.springframework.stereotype.Controller;  import org.springframework.web.bind.annotation.RequestMapping;  /**   * @author 袁梦达 2019012364   */  @Controller  @RequestMapping("/user")  public class UserController {      @Autowired      private UserService userService;      /**       * 用户登录       * @param username       * @param password       * @return       */      @RequestMapping("/login")      public String login(String username,String password){          // 获取当前登录用户          Subject subject = SecurityUtils.getSubject();          try {              // 执行登录操作              subject.login(new UsernamePasswordToken(username,password));              // 认证通过后直接跳转到index.jsp              return "redirect:/index.jsp";          } catch (UnknownAccountException e) {              e.printStackTrace();              System.out.println("用户名错误！");          } catch (IncorrectCredentialsException e) {              System.out.println("密码错误！");          } catch (Exception e) {          }          // 如果认证失败仍然回到登录页面          return "redirect:/login.jsp";      }      @RequestMapping("/logout")      public String logout(){          subject.logout();          // 退出后仍然会到登录页面       * 用户注册       * @param user      @RequestMapping("/register")      public String register(User user){              userService.register(user);              return "redirect:/login.jsp";          return "redirect:/register.jsp";  }  package com.ego.service.impl;  import com.ego.dao.mapper.UserMapper;  import com.ego.shiro.ShiroConstant;  import com.ego.utils.SaltUtil;  import org.apache.shiro.crypto.hash.Md5Hash;  import org.springframework.stereotype.Service;  @Service("userService")  public class UserServiceImpl implements UserService {      private UserMapper userMapper;      @Override      public void register(User user) {          //生成随机盐          String salt = SaltUtil.getSalt(ShiroConstant.SALT_LENGTH);          //保存随机盐          user.setSalt(salt);          //生成密码          Md5Hash password = new Md5Hash(user.getPassword(), salt, ShiroConstant.HASH_ITERATORS);          //保存密码          user.setPassword(password.toHex());          userMapper.insert(user);      public User findUserByUserName(String userName) {          return userMapper.findUserByUserName(userName);  import com.ego.dao.mapper.RoleMapper;  import com.ego.pojo.Role;  import com.ego.service.RoleService;  import java.util.List;  @Service("roleService")  public class RoleServiceImpl implements RoleService {      private RoleMapper roleMapper;      public List<Role> getRolesByUserId(Integer userId) {          return roleMapper.getRolesByUserId(userId);  import com.ego.dao.mapper.PermissionMapper;  import com.ego.pojo.Permission;  import com.ego.service.PermissionService;  @Service("permissionService")  public class PermissionServiceImpl implements PermissionService {      private PermissionMapper permissionMapper;      public List<Permission> getPermissionsByRoleId(Integer roleId) {          return permissionMapper.getPermissionsByRoleId(roleId);  package com.ego.dao.mapper;  import com.baomidou.mybatisplus.core.mapper.BaseMapper;  import org.apache.ibatis.annotations.Mapper;  import org.apache.ibatis.annotations.Select;  @Mapper  public interface UserMapper extends BaseMapper<User> {      @Select("SELECT u.id,u.username,u.password,u.salt,u.age,u.email,u.address FROM t_user u WHERE u.username = #{username}")      User findUserByUserName(String username);  public interface RoleMapper extends BaseMapper<Role> {      @Select("select r.id,r.name from t_role r left join t_user_role ur on ur.role_id = r.id where ur.user_id = #{userId}")      List<Role> getRolesByUserId(Integer userId);  public interface PermissionMapper extends BaseMapper<Permission> {      @Select("select p.id,p.name,p.url from t_permission p left join t_role_permission rp on rp.permission_id = p.id where rp.role_id = #{roleId}")      List<Permission> getPermissionsByRoleId(Integer roleId);  </pre> </div> <p class="maodian"></p> <h2>5.实现SaltUtil和ApplicationContextUtil两个工具类</h2> <div class="ay1code"> <pre class="brush:java;">package com.ego.utils;  import java.util.Random;  /**   * @author 袁梦达 2019012364   */  public class SaltUtil {      public static String getSalt(int n){          char[] chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz01234567890!@#$%^&*()".toCharArray();          StringBuilder sb = new StringBuilder();          for (int i = 0; i < n; i++) {              char aChar = chars[new Random().nextInt(chars.length)];              sb.append(aChar);          }          return sb.toString();      }  }  import org.springframework.beans.BeansException;  import org.springframework.context.ApplicationContext;  import org.springframework.context.ApplicationContextAware;  import org.springframework.stereotype.Component;  @Component  public class ApplicationContextUtil implements ApplicationContextAware {      public static ApplicationContext context;      @Override      public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {          this.context = applicationContext;      /**       * 根据工厂中的类名获取类实例       */      public static Object getBean(String beanName){          return context.getBean(beanName);  </pre> </div> <p class="maodian"></p> <h2>6.实现核心Shiro</h2> <div class="ay1code"> <pre class="brush:java;">package com.ego.utils;  import java.util.Random;  /**   * @author 袁梦达 2019012364   */  public class SaltUtil {      public static String getSalt(int n){          char[] chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz01234567890!@#$%^&*()".toCharArray();          StringBuilder sb = new StringBuilder();          for (int i = 0; i < n; i++) {              char aChar = chars[new Random().nextInt(chars.length)];              sb.append(aChar);          }          return sb.toString();      }  }  package com.ego.utils;  import org.springframework.beans.BeansException;  import org.springframework.context.ApplicationContext;  import org.springframework.context.ApplicationContextAware;  import org.springframework.stereotype.Component;  /**   * @author 袁梦达 2019012364   */  @Component  public class ApplicationContextUtil implements ApplicationContextAware {      public static ApplicationContext context;      @Override      public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {          this.context = applicationContext;      }      /**       * 根据工厂中的类名获取类实例       */      public static Object getBean(String beanName){          return context.getBean(beanName);      }  }  </pre> </div> <p class="maodian"></p> <h2>7.实现Redis分布式缓存</h2> <div class="ay1code"> <pre class="brush:java;">package com.ego.shiro;  import com.ego.shiro.cache.RedisCacheManager;  import org.apache.shiro.authc.credential.HashedCredentialsMatcher;  import org.apache.shiro.realm.Realm;  import org.apache.shiro.spring.web.ShiroFilterFactoryBean;  import org.apache.shiro.web.mgt.DefaultWebSecurityManager;  import org.springframework.context.annotation.Bean;  import org.springframework.context.annotation.Configuration;  import java.util.HashMap;  import java.util.Map;  /**   * @author 袁梦达 2019012364   */  @Configuration  public class ShiroConfiguration {      //1.创建shiroFilter  //负责拦截所有请求      @Bean      public ShiroFilterFactoryBean getShiroFilterFactoryBean(DefaultWebSecurityManager defaultWebSecurityManager){          ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();          //给filter设置安全管理器          shiroFilterFactoryBean.setSecurityManager(defaultWebSecurityManager);          //配置系统受限资源          //配置系统公共资源          Map<String,String> map = new HashMap<String,String>();          map.put("/user/login", "anon");          map.put("/user/register","anon");          map.put("/register.jsp","anon");          map.put("/index.jsp","authc");//authc 请求这个资源需要认证和授权          //默认认证界面路径          shiroFilterFactoryBean.setLoginUrl("/login.jsp");          shiroFilterFactoryBean.setFilterChainDefinitionMap(map);          return shiroFilterFactoryBean;      }      //2.创建安全管理器      public DefaultWebSecurityManager getDefaultWebSecurityManager(Realm realm){          DefaultWebSecurityManager defaultWebSecurityManager = new DefaultWebSecurityManager();          //给安全管理器设置          defaultWebSecurityManager.setRealm(realm);          return defaultWebSecurityManager;      //3.创建自定义realm      public Realm getRealm(){          CustomerRealm customerRealm = new CustomerRealm();          // 设置密码匹配器          HashedCredentialsMatcher credentialsMatcher = new HashedCredentialsMatcher();          // 设置加密方式          credentialsMatcher.setHashAlgorithmName(ShiroConstant.HASH_ALGORITHM_NAME.MD5);          // 设置散列次数          credentialsMatcher.setHashIterations(ShiroConstant.HASH_ITERATORS);          customerRealm.setCredentialsMatcher(credentialsMatcher);          // 设置缓存管理器          customerRealm.setCacheManager(new RedisCacheManager());          // 开启全局缓存          customerRealm.setCachingEnabled(true);          // 开启认证缓存并指定缓存名称          customerRealm.setAuthenticationCachingEnabled(true);          customerRealm.setAuthenticationCacheName("authenticationCache");          // 开启授权缓存并指定缓存名称          customerRealm.setAuthorizationCachingEnabled(true);          customerRealm.setAuthorizationCacheName("authorizationCache");          return customerRealm;  }  public class ShiroConstant {      /** 随机盐的位数 **/      public static final int SALT_LENGTH = 8;      /** hash的散列次数 **/      public static final int HASH_ITERATORS = 1024;      public interface HASH_ALGORITHM_NAME {          String MD5 = "MD5";  import com.ego.pojo.Permission;  import com.ego.pojo.Role;  import com.ego.pojo.User;  import com.ego.service.PermissionService;  import com.ego.service.RoleService;  import com.ego.service.UserService;  import com.ego.utils.ApplicationContextUtil;  import org.apache.shiro.authc.AuthenticationException;  import org.apache.shiro.authc.AuthenticationInfo;  import org.apache.shiro.authc.AuthenticationToken;  import org.apache.shiro.authc.SimpleAuthenticationInfo;  import org.apache.shiro.authz.AuthorizationInfo;  import org.apache.shiro.authz.SimpleAuthorizationInfo;  import org.apache.shiro.realm.AuthorizingRealm;  import org.apache.shiro.subject.PrincipalCollection;  import org.springframework.util.CollectionUtils;  import org.springframework.util.ObjectUtils;  import java.util.List;  public class CustomerRealm extends AuthorizingRealm {      //授权      @Override      protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) {          // 获取主身份信息          String principal = (String) principals.getPrimaryPrincipal();          // 根据主身份信息获取角色信息          UserService userService = (UserService) ApplicationContextUtil.getBean("userService");          User user = userService.findUserByUserName(principal);          RoleService roleService = (RoleService) ApplicationContextUtil.getBean("roleService");          List<Role> roles = roleService.getRolesByUserId(user.getId());          if(!CollectionUtils.isEmpty(roles)){              SimpleAuthorizationInfo simpleAuthorizationInfo = new SimpleAuthorizationInfo();              roles.forEach(role -> {                  simpleAuthorizationInfo.addRole(role.getName());                  PermissionService permissionService = (PermissionService) ApplicationContextUtil.getBean("permissionService");                  List<Permission> permissions = permissionService.getPermissionsByRoleId(role.getId());                  if(!CollectionUtils.isEmpty(permissions)){                      permissions.forEach(permission -> {                          simpleAuthorizationInfo.addStringPermission(permission.getName());                      });                  }              });              return simpleAuthorizationInfo;          }          return null;      //认证      protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException {          String principal = (String) token.getPrincipal();          if(!ObjectUtils.isEmpty(user)){              return new SimpleAuthenticationInfo(user.getUsername(),user.getPassword(), new CustomerByteSource(user.getSalt()),this.getName());  import org.apache.shiro.codec.Base64;  import org.apache.shiro.codec.CodecSupport;  import org.apache.shiro.codec.Hex;  import org.apache.shiro.util.ByteSource;  import java.io.File;  import java.io.InputStream;  import java.io.Serializable;  import java.util.Arrays;  //自定义salt实现  实现序列化接口  public class CustomerByteSource implements ByteSource, Serializable {      private byte[] bytes;      private String cachedHex;      private String cachedBase64;      public CustomerByteSource() {      public CustomerByteSource(byte[] bytes) {          this.bytes = bytes;      public CustomerByteSource(char[] chars) {          this.bytes = CodecSupport.toBytes(chars);      public CustomerByteSource(String string) {          this.bytes = CodecSupport.toBytes(string);      public CustomerByteSource(ByteSource source) {          this.bytes = source.getBytes();      public CustomerByteSource(File file) {          this.bytes = (new CustomerByteSource.BytesHelper()).getBytes(file);      public CustomerByteSource(InputStream stream) {          this.bytes = (new CustomerByteSource.BytesHelper()).getBytes(stream);      public static boolean isCompatible(Object o) {          return o instanceof byte[] || o instanceof char[] || o instanceof String || o instanceof ByteSource || o instanceof File || o instanceof InputStream;      public byte[] getBytes() {          return this.bytes;      public boolean isEmpty() {          return this.bytes == null || this.bytes.length == 0;      public String toHex() {          if (this.cachedHex == null) {              this.cachedHex = Hex.encodeToString(this.getBytes());          return this.cachedHex;      public String toBase64() {          if (this.cachedBase64 == null) {              this.cachedBase64 = Base64.encodeToString(this.getBytes());          return this.cachedBase64;      public String toString() {          return this.toBase64();      public int hashCode() {          return this.bytes != null && this.bytes.length != 0 ? Arrays.hashCode(this.bytes) : 0;      public boolean equals(Object o) {          if (o == this) {              return true;          } else if (o instanceof ByteSource) {              ByteSource bs = (ByteSource) o;              return Arrays.equals(this.getBytes(), bs.getBytes());          } else {              return false;      private static final class BytesHelper extends CodecSupport {          private BytesHelper() {          public byte[] getBytes(File file) {              return this.toBytes(file);          public byte[] getBytes(InputStream stream) {              return this.toBytes(stream);  </pre> </div> 			
                                <div class="col-md-12 mt-5">
                                                                        <p>上一个：<a href="/html/category/article-1441.htm">Sqlalchemy异步操作详解</a></p>
                                                                        <p>下一个：<a href="/html/category/article-1443.htm">Vue3实现跑马灯效果_vue.js</a></p>
                                                                    </div>

                                                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-7315.htm" title="预制菜包装袋可以直接加热嘛">预制菜包装袋可以直接加热嘛</a></li>
                        <li class="py-2"><a href="/html/category/article-6625.htm" title="蓝顶亚马逊鹦鹉是什么品种？(蓝顶亚马逊鹦鹉的饲养知识有哪些？)">蓝顶亚马逊鹦鹉是什么品种？(蓝顶亚马逊鹦鹉的饲养知识有哪些？)</a></li>
                        <li class="py-2"><a href="/html/category/article-6671.htm" title="茶吧机哪个品牌最好最实用(茶吧机排名前10名)">茶吧机哪个品牌最好最实用(茶吧机排名前10名)</a></li>
                        <li class="py-2"><a href="/html/category/article-6855.htm" title="卫生纸品牌加盟 开个卫生纸专卖店怎么样(卫生纸品牌加盟 开个卫生纸专卖店要多少钱)">卫生纸品牌加盟 开个卫生纸专卖店怎么样(卫生纸品牌加盟 开个卫生纸专卖店要多少钱)</a></li>
                        <li class="py-2"><a href="/html/category/article-6901.htm" title="动物打防疫针的作用（动物打疫苗）">动物打防疫针的作用（动物打疫苗）</a></li>
                        <li class="py-2"><a href="/html/category/article-6947.htm" title="动物疫病预防控制中心给宠物看病吗 动物疫病预防控制中心给宠物看病吗安全吗">动物疫病预防控制中心给宠物看病吗 动物疫病预防控制中心给宠物看病吗安全吗</a></li>
                        <li class="py-2"><a href="/html/category/article-6009.htm" title="水生动物医学兽医证（水生动物兽医证报考条件）">水生动物医学兽医证（水生动物兽医证报考条件）</a></li>
                        <li class="py-2"><a href="/html/category/article-6763.htm" title="动物医院英语短语怎么说怎么写的（动物医院的英文单词）">动物医院英语短语怎么说怎么写的（动物医院的英文单词）</a></li>
                        <li class="py-2"><a href="/html/category/article-7085.htm" title="有名的宠物品牌（宠物类品牌名）">有名的宠物品牌（宠物类品牌名）</a></li>
                        <li class="py-2"><a href="/html/category/article-7084.htm" title="动物疫苗在常温下能放多久不变质呢视频（动物疫苗未冷藏几小时失效）">动物疫苗在常温下能放多久不变质呢视频（动物疫苗未冷藏几小时失效）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">24</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </div>
                <!-- Footer -->
        <footer class="footer">
            <div class="parallax_background parallax-window" data-parallax="scroll" data-image-src="/assets/addons/xcblog/img/srilankaaddress/footer.jpg" data-speed="0.8"></div>
            <div class="footer_overlay"></div>
            <div class="container">
                <div class="row">
                    <div class="col">
                        <div class="footer_content text-center d-flex flex-column align-items-center justify-content-center">
                            <p>
                                Sri Lanka Address 版权所有
                                <br />
                                Powered by WordPress
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </footer>
    </div>
    <script src="/assets/addons/xcblog/js/frontend/srilankaaddress/jquery-3.2.1.min.js"></script>
    <script src="/assets/addons/xcblog/css/srilankaaddress/bootstrap-4.1.2/popper.js"></script>
    <script src="/assets/addons/xcblog/css/srilankaaddress/bootstrap-4.1.2/bootstrap.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/owl.carousel.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/easing/easing.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/parallax-js-master/parallax.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/srilankaaddress/about.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>