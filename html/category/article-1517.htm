<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://srilankaaddress.github.io/html/category/article-1517.htm" />
    <title>Python中的基本数据类型（7个） - Sri Lanka Address</title>
        <meta charset="utf-8">
    <link rel="icon" href="/assets/addons/xcblog/img/srilankaaddress/favicon.ico" type="image/x-icon"/>
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="description" content="AerobicsFit template project">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?e8fff5fa52c11c99c5cdad6284174bdb";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/srilankaaddress/bootstrap-4.1.2/bootstrap.min.css">
    <link href="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/font-awesome-4.7.0/css/font-awesome.min.css" rel="stylesheet" type="text/css">
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/owl.carousel.css">
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/owl.theme.default.css">
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/animate.css">
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/srilankaaddress/about.css">
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/srilankaaddress/about_responsive.css">
</head>

<body>
    <div class="super_container">
                <!-- Header -->
        <header class="header">
            <div class="container">
                <div class="row">
                    <div class="col">
                        <div class="header_content d-flex flex-row align-items-center justify-content-start">
                            <div class="logo">Sri Lanka<span> Address</span></div>
                            <nav class="main_nav">
                                <ul class="d-flex flex-row align-items-center justify-content-start">
                                                                        <li><a href="/">首页</a></li>
                                                                        <li><a href="/html/category/">文章分类</a></li>
                                                                        <li><a href="#">关于</a></li>
                                    <li><a href="#">联系</a></li>
                                </ul>
                            </nav>
                            <div class="social header_social">
                                <ul class="d-flex flex-row align-items-center justify-content-start">
                                    <li><a href="#"><i class="fa fa-pinterest" aria-hidden="true"></i></a></li>
                                    <li><a href="#"><i class="fa fa-linkedin" aria-hidden="true"></i></a></li>
                                    <li><a href="#"><i class="fa fa-instagram" aria-hidden="true"></i></a></li>
                                    <li><a href="#"><i class="fa fa-facebook" aria-hidden="true"></i></a></li>
                                    <li><a href="#"><i class="fa fa-twitter" aria-hidden="true"></i></a></li>
                                </ul>
                            </div>
                            <div class="hamburger ml-auto"><i class="fa fa-bars" aria-hidden="true"></i></div>
                        </div>
                    </div>
                </div>
            </div>
        </header>
        <!-- Menu -->
        <div class="menu">
            <div class="menu_content d-flex flex-column align-items-center justify-content-center">
                <ul class="menu_nav_list text-center">
                                        <li><a href="index.html">Home</a></li>
                                        <li><a href="index.html">Home</a></li>
                                        <li><a href="#">关于</a></li>
                    <li><a href="#">联系</a></li>
                </ul>
            </div>
        </div>
        <!-- Home -->
        <div class="home">
            <div class="parallax_background parallax-window" data-parallax="scroll" data-image-src="/assets/addons/xcblog/img/srilankaaddress/about.jpg" data-speed="0.8"></div>
            <div class="home_container">
                <div class="container">
                    <div class="row">
                        <div class="col">
                            <div class="home_content">
                                <div class="home_title">Python中的基本数据类型（7个）</div>
                                <div class="breadcrumbs">
                                    <ul class="d-flex flex-row align-items-center justify-content-start">
                                        <li><a href="/">首页</a></li>
                                        <li><a href="/html/category/">文章分类</a></li>
                                        <li>正文</li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- Classes -->
        <div class="classes">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                        <div class="row row-eq-height">
                            <div class="col-md-12">
                                  				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <dl> <p>  1.Python中的基本数据类型</p> <dd>   1.布尔型  </dd> <dd>   2.数值型  </dd> <dd>   3.字符串  </dd> <dd>   4.列表  </dd> <dd>   5.元组  </dd> <dd>   6.字典  </dd> <dd>   7.集合  </dd> </dl> <h2> 1.布尔型</h2> <p>布尔型数据的算术运算 布尔型的取值只有两个，True 和 False。<br /> 可以拿来做算术运算，此时等价于 1 和 0。<br /> 布尔型数据的逻辑运算计算优先级：先算not ，再算and， 最后算or。</p> <p>下列中 a = 10, b =20<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230110/cff6eb33abb694264102c67684561157.jpg" alt="Python中的基本数据类型（7个）"></p> <h2> 2.数值型</h2> <h3> 2.1整数型</h3> <p>Python中的整型属于int类型，默认用十进制表示，此外，也支持二进制，八进制，十六进制表示方法。<br /> 进制转换<br /> 计算机本质上只认识二进制，但是python里面的数字还是以十进制展示的， 当然里面给我们内置了一些方法帮我们把转换为其他进制。bin()转化为二进制</p> <pre><code class="prism language-python">a <span class="token operator">=</span> <span class="token builtin">bin</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>   <span class="token comment">#0b表示这是一个二进制数</span> <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> </code></pre> <p>oct()转化为八进制</p> <pre><code class="prism language-python">a <span class="token operator">=</span> <span class="token builtin">oct</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment"># 0o表示这是一个八进制数</span> <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> </code></pre> <p>hex()转化为16进制</p> <pre><code class="prism language-python">c<span class="token operator">=</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment"># 0x表示这是一个十六进制数</span> <span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> </code></pre> <h3> 2.2浮点型</h3> <p>浮点数是属于有理数当中的，Python中的浮点数就是数学当中的小数， 在运算中，整数与浮点数运算的结果依旧是浮点数。<br /> 注意：Python默认的是17位 精度，也就是小数点后最多16位。</p> <h3> 2.3复数型</h3> <p>语法： a + bj<br /> 虚数不能单独存在，它们总是和一个不为0的实数一起构成一个复数。<br /> 实数部分和虚数部分都是浮点数<br /> 虚数部分必须有 j 或 J<br /> （1）返回复数的实部</p> <pre><code class="prism language-python">a<span class="token punctuation">.</span>real </code></pre> <p>（2）返回复数的虚部</p> <pre><code class="prism language-python">a<span class="token punctuation">.</span>imag </code></pre> <p>（3）返回复数的共轭复数</p> <pre><code class="prism language-python">a<span class="token punctuation">.</span>conjugate<span class="token punctuation">(</span><span class="token punctuation">)</span> </code></pre> <p>共轭复数<br /> 两个实部相等，虚部互为相反数的复数互为共轭复数。<br /> 当虚部不为零时，共轭复数就是实部相等，虚部相反,如果虚部为零，其共轭复数就是自身（当虚部不等于0时也叫共轭虚数）。</p> <h3> 2.4数值型数据的类型转换</h3> <p>转换为int型<br /> 将int(x)转换成整数类型<br /> 如果x是浮点型，小数点后面的数字都会砍掉，注意不是四舍五入。</p> <pre><code class="prism language-python">a <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token number">2.21</span><span class="token punctuation">)</span> out <span class="token number">2</span> </code></pre> <p>转换为float型</p> <pre><code class="prism language-python">a <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span> out <span class="token number">12.0</span> </code></pre> <h3> 2.5数值型数据的计算</h3> <p>下面面以a=10 ,b=20为例进行计算</p> <pre><code class="prism language-python">加法 a<span class="token operator">+</span>b out <span class="token number">30</span>  减法 a<span class="token operator">-</span>b out <span class="token operator">-</span><span class="token number">10</span>  乘法 a<span class="token operator">*</span>b out <span class="token number">200</span>  除法 a<span class="token operator">/</span>b out <span class="token number">0.5</span>  取整除 <span class="token number">9.0</span><span class="token operator">//</span><span class="token number">2.0</span> out <span class="token number">4</span>  取余 b<span class="token operator">/</span>a out <span class="token number">0</span>  幂运算 a<span class="token operator">**</span>b out <span class="token number">10000000000000000000</span> </code></pre> <p>比较运算法则<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230110/c7718b29d58b93f571e2ea8bfa181d91.jpg" alt="Python中的基本数据类型（7个）"><br /> 复合运算法则<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230110/fded7d19903663bd0ffdf3ae76187766.jpg" alt="Python中的基本数据类型（7个）"><br /> Python内置的一些函数<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230110/408b765ceffd0d3284b04e9023a8cf4d.jpg" alt="Python中的基本数据类型（7个）"></p> <h2> 3.字符串</h2> <p>不可变数据类型<br /> 有序数据类型<br /> 字符串的两种定义方式 ：<br /> （1）通过str（）函数将其他数据类型转化为字符串<br /> （2）直接加引号定义</p> <h3> 3.1字符串一些运算</h3> <pre><code class="prism language-python"><span class="token operator">+</span>号运算，收尾拼接 a <span class="token operator">=</span> <span class="token string">'pyt'</span> b <span class="token operator">=</span> <span class="token string">'hon'</span> a<span class="token operator">+</span>b out python  <span class="token operator">*</span>号运算，重复 a <span class="token operator">=</span> <span class="token string">'pyt'</span> a<span class="token operator">*</span><span class="token number">3</span> out pytpytpyt  <span class="token keyword">in</span> 包含运算 a <span class="token operator">=</span> <span class="token string">'1'</span> b <span class="token operator">=</span> <span class="token string">'2332145'</span> a <span class="token keyword">in</span> b out <span class="token boolean">True</span> </code></pre> <h3> 3.2字符串的索引和切片</h3> <p>字符串切片的标准语法：<br /> str[开始位置: 终止位置:步长和方向]<br /> 开始位置：即开始取的位置，这个位置的元素是能取到的。<br /> 终止位置：即停止的位置，注意该位置的值取不到<br /> 第三个参数:不写默认是1，正数表示从左往右取，负数表示从右往左取，绝对值表示步长。</p> <h3> 3.3字符串对象的常用方法</h3> <p>（1）3个检索的方法：<br /> str.count（）<br /> str…count(要计数的对象，开始索引值，结束索引值) ——返回的是：你寻找的对象，在字符串里面出现的次数。<br /> str.find（）<br /> str.find(要查找的对象，开始位置,结束位置) ——如果对象包含在字符串内，则返回开始的索引值，否则返回-1。<br /> str.rfind（）返回的是最后一次出现的位置。注意：find()返回的是索引值。<br /> str.index（）<br /> str.index（）方法同find（）方法基本一样，也是用于检索字符串类是否包含特定的对象，返回的也是索引值 ，只不过如果要检索的对象如果不存在于字符串内，不会像find（）一样返回-1，而是直接报错 。<br /> str.rindex()是最后一次出现的位置。</p> <p>（2）3个分割的方法：<br /> str.split(“分割符”，分割次数)<br /> str.splitlines(True或False) ——按照行分隔，返回一个包含各行作为元素的列表。 字符串.splitlines()按照行(’\r’, ‘\r\n’, \n’)分隔，返回一个包含各行作为元素的列表。 如果参数 keepends 为 False，不包含换行符，如果为 True，则保留换行符。<br /> str.partition(分隔符) ——把str以分隔符为标准，分割成三部分，str前，str和str后。</p> <p>（3）1个合并的方法 ：<br /> str.join(这里是一个包含字符串的序列)</p> <p>（4）1个替换的方法：<br /> replace（） 字符串.replace(被替换的字符, 用来替换的字符, 替换次数)<br /> 字符串是不可变数据类型，这里的所有操作返回都是新的字符串对象，原来的字符串都是没有发生变化的，如果想要去除字符串里面某个字符，可以用replace（）方法。 用来替换的字符参数为空字符即可。</p> <p>（5）1个中心化的方法 ：<br /> str.center(宽度， 填充的字符串)</p> <p>（6）2个字符大小写转换方法：<br /> str.lower（）转换str 中所有大写字符为小写。<br /> str.upper（）转换 str 中的小写字母为大写。</p> <p>（7）3个去除两端特殊字符的方法：<br /> 去除两边—— 字符串.strip(可以传入指定去除什么) 。——删除str字符串两端的空白字符以及特殊字符 这里的特殊字符包括制表符\t、回车符\r、换行符\n。<br /> 去除单边<br /> str.rstrip（）——只去除右边的空格和特殊字符。<br /> str.lstrip（）——只去除左边的空格和特殊字符。<br /> （8）字符串的格式化输出1方法：<br /> str.fromat（）的普通形式。<br /> str.format（） 接受参数形式。</p> <h2> 4.列表</h2> <p>列表是一种可变的数据类型 ，<br /> 列表中的数据类型不限 ，<br /> 列表中的多个元素之间用逗号进行分割 ，<br /> 最外层用[ ]括起来，<br /> 列表的两种定义方式 ：<br /> 使用list()将其他可迭代的数据类型转换为列表，<br /> 使用[ ]来定义。</p> <h3> 3.1列表的一些运算</h3> <pre><code class="prism language-python"><span class="token operator">+</span>号运算，使得列表中的所有元素存放在一个新的列表当中 a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span> a<span class="token operator">+</span>b  out <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span>  <span class="token operator">*</span>号运算<span class="token punctuation">,</span>重复列表当中的元素 a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> a<span class="token operator">*</span><span class="token number">3</span> out <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>  <span class="token keyword">in</span> 包含运算，判断元素是否在列表当中 a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token number">1</span> <span class="token keyword">in</span> a out <span class="token boolean">True</span> </code></pre> <h3> 4.2列表的索引、切片和修改</h3> <p>列表：有序的序列，所以每一个数据都有唯一对应的索引值。<br /> 第一个元素对应的索引值是0，和字符串是一样的，<br /> 语法：列表[开始位置:终止位置:步长和方向]，<br /> 列表[开始位置:终止位置:步长和方向]，开始的位置包含在内，终止的位置不包含在内，<br /> 步长的默认值为1，当步长设置为正整数，代表方向从左往右，当步长设置为负整数，代表从后往前进行切片，<br /> 起始位置和终止位置，如果不填，代表从头到尾所有数据。</p> <pre><code class="prism language-python">一维列表的切片和索引 list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'life'</span><span class="token punctuation">,</span> <span class="token string">'is'</span><span class="token punctuation">,</span> <span class="token string">'short'</span><span class="token punctuation">,</span> <span class="token string">'I'</span><span class="token punctuation">,</span> <span class="token string">'use'</span><span class="token punctuation">,</span> <span class="token string">'python'</span><span class="token punctuation">]</span> list1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> out <span class="token punctuation">[</span><span class="token string">'is'</span><span class="token punctuation">]</span>  多维列表的切片和索引 list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'Hello'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'我最特殊'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span> <span class="token punctuation">]</span> list2<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> out <span class="token punctuation">[</span><span class="token string">'我最特殊'</span><span class="token punctuation">]</span>  列表的修改 list3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'python'</span><span class="token punctuation">]</span><span class="token punctuation">]</span> list3<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span> list3 out <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'python'</span><span class="token punctuation">]</span><span class="token punctuation">]</span> </code></pre> <h3> 4.3列表对象的常用方法</h3> <p>列表方法之增3方法：<br /> append 语法： 原列表.append(要添加的元素) 在最后添加一个元素。<br /> extend 语法： 原列表.extend(要添加的列表) a.extend(b)是把b每一个元素都添加到a中。<br /> insert 语法： insert(索引，要插入的对象) insert(索引a，b)表示，把b插入到索引a所对应的元素之前。</p> <p>列表方法之删4方法：<br /> del list[要删除元素的索引值]<br /> list.clear（） 清空列表所有元素，<br /> list.pop(要删除元素的索引值) 默认删除最后一个，并返回这个被删除的元素，<br /> list.remove(元素名) 用于移除列表中某个值的第一个匹配项， 若列表有多个匹配值，只会删除第一个，要想多次删除，需要用到后面学习的循环语句。</p> <p>列表方法之查2方法：<br /> list.index(寻找的对象，开始索引，结束索引) 获得某个元素首次出现的索引。<br /> list.count(寻找的对象) 获得某个元素元素出现次数。</p> <p>列表方法之排序2方法：<br /> list.sort(reverse=True/False) 此方法会将列表按特定顺序重新排列，括号内的参数可以不写，默认升序排列，reverse的英文意思是翻转，如果填写了reverse=True就意味着列表会降序排列。<br /> list.reverse（）将list所有元素反转。</p> <p>列表的深浅拷贝：<br /> 浅拷贝只拷贝容器中元素的地址，<br /> 深拷贝，完全拷贝了一个副本，容器内部元素地址都不一样。<br /> 对于深拷贝，目的就是要创建一个玩玩全全独立的副本，就意味着所有的一切都应该在新的地址上。<br /> 1、对于列表或者字典本身，深拷贝结果下，地址是改变了的，也就是说瓶子是换新了的 。<br /> 2、所有可变类型的元素也是有了新的地址的。<br /> 3、对于不可变类型的元素，地址没有变，那岂不是相互有影响？不，如果你改变了不可变类型，就会在新的地址下储存新的数据了，也是没有影响的。</p> <h2> 5.元组</h2> <p>列表是一种可变的数据类型，<br /> 列表中的数据类型不限 ，<br /> 列表中的多个元素之间用逗号进行分割 ，<br /> 最外层用[ ]括起来。<br /> 列表的两种定义方式 ：<br /> 使用list（）将其他可迭代的数据类型转换为列表，<br /> 使用[]来定义。<br /> 只含有一个元素的元组的定义，后面必须加一个逗号。</p> <h3> 5.1元组一些运算</h3> <pre><code class="prism language-python"><span class="token operator">+</span>号运算，把元祖的元素全部添加到一个新的元祖当中 a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span> a<span class="token operator">+</span>b out （<span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span>）   <span class="token operator">*</span>号运算，重复元祖当中的元素 <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">5</span>  out <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token keyword">in</span>包含运算<span class="token punctuation">,</span> 判断元素是否在元祖当中 <span class="token number">1</span> <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> out <span class="token boolean">True</span> </code></pre> <h3> 5.2字符串对象的常用方法</h3> <p>tuple.count（）计数<br /> tuple.index（）索引</p> <p>注意：元组的不可变是指，元组本身自己的元素不可变，同理列表可变是指列表自己本身的元素可变。</p> <pre><code class="prism language-python">tuple2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> tuple2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'X'</span> tuple2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'Y'</span> tuple2 out <span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">,</span> <span class="token string">'Y'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> </code></pre> <h2> 6.字典</h2> <p>字典是一种可变数据类型 ，<br /> 点典的元素存储方式是键值对的形式，键值对之间用逗号隔开 ，<br /> 键值对的形式形如：key:value ，<br /> 最外层用{}括起来 。<br /> d = {key1 : value1, key2 : value2 }<br /> 字典的两种定义方式：<br /> 使用dict（）来定义字典，<br /> 使用{ }来定义字典。<br /> 由于字典是键值对的形式，所以字典是无序的，自然不能切片和索引，而是通过键来取。<br /> 值键 一般是唯一的，如果重复最后的一个键值对会替换前面的。<br /> 值不需要唯一值：可以取任何数据类型，但键必须是不可变的，如字符串，数字或元组。</p> <h3> 6.2字典对象的常用方法</h3> <p>字典对象之增3方法：<br /> dict[键名] = 值 增加一个新的键值对。<br /> dict.setdefault(‘新键名’, 值) 增加一个新的键值对。<br /> dict1.update(dict2) 把所有dic2中的键值对增加到dic1中 这个功能类似于我们在列表中学的extend()扩展功能。</p> <p>字典对像之删5方法：<br /> del 字典名[‘键名’] —— 删除指定键值对 。<br /> 字典名.pop(‘键名’) —— 删除键值+弹出值。<br /> 字典名.popitem() —— 随机删除一对(一般最后一对） 。<br /> 字典名.clear() —— 删除词典内所有元素(和列表对应操作相同） 。<br /> del 字典名 —— 删除整个词典(和列表对应操作相同）。</p> <p>字典对象之改1方法：<br /> Dict[键名]=新值， 如果键名不存在就增加，存在就修改。</p> <p>字典对象之查5方法：<br /> dict[键] 取出该键所对应的值，<br /> dict.get(键) 取出该键所对应的值 ，<br /> dict.keys() 返回包含所有键的列表，这个列表不是严格意义上的list，可以用list()转换成严格意义上的列表，<br /> dict.values() 返回包含所有值的列表，这个列表不是严格意义上的list，可以用list()转换成严格意义上的列表，<br /> dict.items() 返回包含所有键值对的列表，每个键值对用元组储存，这个列表不是严格意义上的list，可以用 list()转换成严格意义上的列表 。</p> <h2> 7.集合</h2> <p>集合是一种可变数据类型 ，<br /> 集合一种无序不重复的集，所有集合的作用主要就是去重 ，<br /> 关系测试，测试两组数据之前的交集、差集、并集等关系。<br /> 集合的定义：<br /> 使用set()定义集合，<br /> 直接使用{}来定义。.</p> <h3> 7.1集合对象的常用方法</h3> <p>集合对象之增2方法：<br /> set.add()添加元素 可以通过add(新元素)方法添加元素到set中，但对于已经存在的值不会有效果。<br /> set.update()添加元素。</p> <p>集合对象之删3方法：<br /> set.remove（）删除指定元素。<br /> set.pop（）随机删除一个元素并且返回这个元素。<br /> set.celar（）清空集合。</p> <p>集合的一些简单运算<br /> in包含运算， 判断元素是否是集合中的元素<br /> 交集set1 & set2—— set1.intersection(set2)<br /> 并集set1 | set2—— set1.union(set2)</p> </p></div> 			
                                <div class="col-md-12 mt-5">
                                                                        <p>上一个：<a href="/html/category/article-1516.htm">Typescript的三种运行方式</a></p>
                                                                        <p>下一个：<a href="/html/category/article-1518.htm">PHP比较对象</a></p>
                                                                    </div>

                                                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-6855.htm" title="卫生纸品牌加盟 开个卫生纸专卖店怎么样(卫生纸品牌加盟 开个卫生纸专卖店要多少钱)">卫生纸品牌加盟 开个卫生纸专卖店怎么样(卫生纸品牌加盟 开个卫生纸专卖店要多少钱)</a></li>
                        <li class="py-2"><a href="/html/category/article-7361.htm" title="哪种猫粮比较健康又不贵（哪种猫粮比较健康又不贵的）">哪种猫粮比较健康又不贵（哪种猫粮比较健康又不贵的）</a></li>
                        <li class="py-2"><a href="/html/category/article-7544.htm" title="宠物医院参观体会（参观宠物医院实验报告）">宠物医院参观体会（参观宠物医院实验报告）</a></li>
                        <li class="py-2"><a href="/html/category/article-6947.htm" title="动物疫病预防控制中心给宠物看病吗 动物疫病预防控制中心给宠物看病吗安全吗">动物疫病预防控制中心给宠物看病吗 动物疫病预防控制中心给宠物看病吗安全吗</a></li>
                        <li class="py-2"><a href="/html/category/article-7545.htm" title="集成吊顶led灯哪个牌子好(集成吊顶灯什么牌子好)">集成吊顶led灯哪个牌子好(集成吊顶灯什么牌子好)</a></li>
                        <li class="py-2"><a href="/html/category/article-6625.htm" title="蓝顶亚马逊鹦鹉是什么品种？(蓝顶亚马逊鹦鹉的饲养知识有哪些？)">蓝顶亚马逊鹦鹉是什么品种？(蓝顶亚马逊鹦鹉的饲养知识有哪些？)</a></li>
                        <li class="py-2"><a href="/html/category/article-6115.htm" title="国内十大宠物粮食品牌排行榜前十名图片（宠物粮品牌大全）">国内十大宠物粮食品牌排行榜前十名图片（宠物粮品牌大全）</a></li>
                        <li class="py-2"><a href="/html/category/article-7407.htm" title="全国宠物领养 全国宠物领养中心官网">全国宠物领养 全国宠物领养中心官网</a></li>
                        <li class="py-2"><a href="/html/category/article-7590.htm" title="茅台 上市时间(茅台上市是哪一年)">茅台 上市时间(茅台上市是哪一年)</a></li>
                        <li class="py-2"><a href="/html/category/article-6203.htm" title="被猫爪子勾了一下出了一点血会死吗会感染吗（被猫爪子勾了一下出了一点血需要打疫苗吗）">被猫爪子勾了一下出了一点血会死吗会感染吗（被猫爪子勾了一下出了一点血需要打疫苗吗）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">24</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </div>
                <!-- Footer -->
        <footer class="footer">
            <div class="parallax_background parallax-window" data-parallax="scroll" data-image-src="/assets/addons/xcblog/img/srilankaaddress/footer.jpg" data-speed="0.8"></div>
            <div class="footer_overlay"></div>
            <div class="container">
                <div class="row">
                    <div class="col">
                        <div class="footer_content text-center d-flex flex-column align-items-center justify-content-center">
                            <p>
                                Sri Lanka Address 版权所有
                                <br />
                                Powered by WordPress
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </footer>
    </div>
    <script src="/assets/addons/xcblog/js/frontend/srilankaaddress/jquery-3.2.1.min.js"></script>
    <script src="/assets/addons/xcblog/css/srilankaaddress/bootstrap-4.1.2/popper.js"></script>
    <script src="/assets/addons/xcblog/css/srilankaaddress/bootstrap-4.1.2/bootstrap.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/owl.carousel.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/easing/easing.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/parallax-js-master/parallax.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/srilankaaddress/about.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>