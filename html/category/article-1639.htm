<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://srilankaaddress.github.io/html/category/article-1639.htm" />
    <title>Spring源码分析Spring BeanFactory 是怎么创建的？ - Sri Lanka Address</title>
        <meta charset="utf-8">
    <link rel="icon" href="/assets/addons/xcblog/img/srilankaaddress/favicon.ico" type="image/x-icon"/>
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="description" content="AerobicsFit template project">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?e8fff5fa52c11c99c5cdad6284174bdb";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/srilankaaddress/bootstrap-4.1.2/bootstrap.min.css">
    <link href="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/font-awesome-4.7.0/css/font-awesome.min.css" rel="stylesheet" type="text/css">
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/owl.carousel.css">
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/owl.theme.default.css">
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/animate.css">
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/srilankaaddress/about.css">
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/srilankaaddress/about_responsive.css">
</head>

<body>
    <div class="super_container">
                <!-- Header -->
        <header class="header">
            <div class="container">
                <div class="row">
                    <div class="col">
                        <div class="header_content d-flex flex-row align-items-center justify-content-start">
                            <div class="logo">Sri Lanka<span> Address</span></div>
                            <nav class="main_nav">
                                <ul class="d-flex flex-row align-items-center justify-content-start">
                                                                        <li><a href="/">首页</a></li>
                                                                        <li><a href="/html/category/">文章分类</a></li>
                                                                        <li><a href="#">关于</a></li>
                                    <li><a href="#">联系</a></li>
                                </ul>
                            </nav>
                            <div class="social header_social">
                                <ul class="d-flex flex-row align-items-center justify-content-start">
                                    <li><a href="#"><i class="fa fa-pinterest" aria-hidden="true"></i></a></li>
                                    <li><a href="#"><i class="fa fa-linkedin" aria-hidden="true"></i></a></li>
                                    <li><a href="#"><i class="fa fa-instagram" aria-hidden="true"></i></a></li>
                                    <li><a href="#"><i class="fa fa-facebook" aria-hidden="true"></i></a></li>
                                    <li><a href="#"><i class="fa fa-twitter" aria-hidden="true"></i></a></li>
                                </ul>
                            </div>
                            <div class="hamburger ml-auto"><i class="fa fa-bars" aria-hidden="true"></i></div>
                        </div>
                    </div>
                </div>
            </div>
        </header>
        <!-- Menu -->
        <div class="menu">
            <div class="menu_content d-flex flex-column align-items-center justify-content-center">
                <ul class="menu_nav_list text-center">
                                        <li><a href="index.html">Home</a></li>
                                        <li><a href="index.html">Home</a></li>
                                        <li><a href="#">关于</a></li>
                    <li><a href="#">联系</a></li>
                </ul>
            </div>
        </div>
        <!-- Home -->
        <div class="home">
            <div class="parallax_background parallax-window" data-parallax="scroll" data-image-src="/assets/addons/xcblog/img/srilankaaddress/about.jpg" data-speed="0.8"></div>
            <div class="home_container">
                <div class="container">
                    <div class="row">
                        <div class="col">
                            <div class="home_content">
                                <div class="home_title">Spring源码分析Spring BeanFactory 是怎么创建的？</div>
                                <div class="breadcrumbs">
                                    <ul class="d-flex flex-row align-items-center justify-content-start">
                                        <li><a href="/">首页</a></li>
                                        <li><a href="/html/category/">文章分类</a></li>
                                        <li>正文</li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- Classes -->
        <div class="classes">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                        <div class="row row-eq-height">
                            <div class="col-md-12">
                                  				  				  				<h3 id="spring创建-beanfactory-的方式">Spring创建 BeanFactory 的方式</h3> <p>按照<code>Bean</code>的配置方式手动创建可以分为两种：</p> <ul> <li> <p>使用<code>XMl</code>配置的<code>Bean</code><br /> 这种方式使用<code>xml</code>配置文件配置<code>Bean</code>的信息并且设置扫描的路径，扫描到的包可以使用注解进行配置<code>Bean</code>信息，一般来说手动创建<code>BeanFactory</code>容器的实现类为<code>ClassPathXmlApplicationContext</code> 和<code>SystemFileXmlApplicationContext</code>，设置<code>xml</code>的路径即可创建出<code>IOC</code>容器。</p> <p>例如：</p> <pre><code class="language-java">ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext("classpath:spring-test.xml"); User user = context.getBean(User.class);</code></pre> </li> <li> <p>使用注解配置的<code>Bean</code></p> <p>这种方式不使用<code>xml</code>配置文件，全部基于注解方式配置<code>Bean</code>的信息，比如使用<code>@Component</code>、<code>@Configuration</code>进行<code>Bean</code>的配置，实现类为<code>AnnotationConfigApplicationContext</code> 设置扫描的包，然后调用<code>refresh</code>方法进行<code>IOC</code>容器的创建。</p> <p>例如：</p> <pre><code class="language-java">AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(); context.scan("com.redwinter.test"); context.refresh();</code></pre> </li> </ul> <p>但是一般来说开发中都是使用<code>web</code>容器进行<code>IOC</code>容器的创建的，比如<code>tomcat</code>容器、<code>jetty</code>容器、<code>undertow</code>容器、<code>netty</code>容器，在<code>Spring</code>中有一个<code>BeanFactory</code>的实现类：<code>GenericApplicationContext</code>，他的子类有一个叫<code>GenericWebApplicationContext</code>，在<code>Spring Boot</code>中，就是通过实现这个类完成<code>Web</code>容器的创建+<code>IOC</code>容器的创建的。在<code>Spring Boot</code>中有个类叫<code>ServletWebServerApplicationContext</code>就是继承了<code>GenericWebApplicationContext</code>这个类，然后<code>ServletWebServerApplicationContext</code>中有个属性叫<code>webServer</code>，这个是一个接口，这个接口对应的实现就是<code>Web</code>容器的实现：</p> <pre><code class="language-java">public class ServletWebServerApplicationContext extends GenericWebApplicationContext 		implements ConfigurableWebServerApplicationContext { 	public static final String DISPATCHER_SERVLET_NAME = "dispatcherServlet"; 	// web 容器，实现类有TomcatWebServer、JettyWebServer、NettyWebServer、UndertowWebServer 	private volatile WebServer webServer; 	// .... 去掉其他代码 	}</code></pre> <p>本文介绍使用<code>XML</code>配置文件手动创建<code>IOC</code>容器的方式</p> <h3 id="spring-使用xml启动ioc容器">Spring 使用Xml启动IOC容器</h3> <p>根据上一篇文章https://www.cnblogs.com/redwinter/p/16151489.html<code>Spring Bean IOC</code> 的创建流程种的第一个方法<code>AbstractApplicationContext#prepareRefresh</code>前戏准备工作继续解读<code>AbstractApplicationContext#refresh</code>方法中的第二方法<code>AbstractApplicationContext#obtainFreshBeanFactory</code>获取<code>BeanFactory</code>，这个方法会创建一个<code>DefaultListableBeanFactory</code> 默认的可列出<code>Bean</code>的工厂。</p> <p><code>AbstractApplicationContext#obtainFreshBeanFactory</code>中主要是刷新<code>BeanFactory</code>，源码如下：</p> <pre><code class="language-java">@Override protected final void refreshBeanFactory() throws BeansException {   // 如果有BeanFactory 就销毁掉并关闭   if (hasBeanFactory()) {     destroyBeans();     closeBeanFactory();   }   try {     // 直接new一个BeanFactory 实现出来 DefaultListableBeanFactory     DefaultListableBeanFactory beanFactory = createBeanFactory();     // 根据上一步创建BeanFactory创建的Id进行获取     beanFactory.setSerializationId(getId());     // 定制化BanFactory ,比如设置allowBeanDefinitionOverriding 和allowCircularReferences 的属性     customizeBeanFactory(beanFactory);     // 加载BeanDefinitions 从xml 和注解定义的Bean     // 从configLocations -> String[] -> String -> Resource[] -> Resource -> InputStream -> Document -> 解析成一个一个的BeanDefinition 对象     loadBeanDefinitions(beanFactory);     this.beanFactory = beanFactory;   }   catch (IOException ex) {     throw new ApplicationContextException("I/O error parsing bean definition source for " + getDisplayName(), ex);   } }</code></pre> <ul> <li>首先判断是否已经有<code>BeanFactory</code>了，如果有就销毁掉并且关闭工厂</li> <li>直接创建一个<code>BeanFactory</code>，默认就是使用<code>new DefaultListableBeanFactory</code>，不过在创建的过程中可能会默认初始化一些属性，比如：<code>allowBeanDefinitionOverriding</code> 和<code>allowCircularReferences</code> 允许<code>Bean</code>覆盖和解决循环依赖的问题，还有就是<code>BeanFactory</code>的序列化id等属性。</li> <li>设置序列化<code>id</code></li> <li>定制<code>BeanFactory</code>，这里是一个扩展点，你可以对<code>BeanFactory</code>进行定制</li> <li>加载<code>BeanDefinition</code>，这里从XML配置文件中去加载，这里面的逻辑非常的复杂繁琐</li> <li>将创建的<code>BeanFactory</code>设置出去</li> </ul> <h3 id="定制个性化的beanfactory">定制个性化的BeanFactory</h3> <p>在<code>customizeBeanFactory(beanFactory);</code>这个方法中，<code>spring</code>设置了两个属性，一个是设置是否可以覆盖<code>Bean</code>，一个是否允许循环依赖，源码如下：</p> <pre><code class="language-java">protected void customizeBeanFactory(DefaultListableBeanFactory beanFactory) {   // 可以定制设置是否允许Bean覆盖   if (this.allowBeanDefinitionOverriding != null) {     beanFactory.setAllowBeanDefinitionOverriding(this.allowBeanDefinitionOverriding);   }   // 可以定制设置是否允许循环依赖   if (this.allowCircularReferences != null) {     beanFactory.setAllowCircularReferences(this.allowCircularReferences);   } }</code></pre> <p><code>spring</code>提供了这个扩展点，那么我们就可以定制<code>BeanFactory</code>，比如我们新建一个类继承<code>ClassPathXmlApplicationContext</code>，然后重写<code>customizeBeanFactory</code>这个方法：</p> <pre><code class="language-java">/**  * @author redwinter  * @since 1.0  **/ public class MyClassPathXmlApplicationContext extends ClassPathXmlApplicationContext {  	public MyClassPathXmlApplicationContext(String... configLocation) throws BeansException { 		super(configLocation); 	}  	@Override 	protected void customizeBeanFactory(DefaultListableBeanFactory beanFactory) { 		// 扩展点 设置不去处理循环依赖或者beanDefinition覆盖 		super.setAllowBeanDefinitionOverriding(true);          // 设置不允许循环依赖 		super.setAllowCircularReferences(false);         // 调用父类的方法 		super.customizeBeanFactory(beanFactory); 	}  }</code></pre> <p>创建两个类，并且设置为循环依赖：</p> <pre><code class="language-java">/**  * @author redwinter  * @since 1.0  **/ @Service public class PersonService {  	@Autowired 	private UserService userService;  	public void test() { 		System.out.println(userService); 	} }  /**  * @author redwinter  * @since 1.0  **/ @Service public class UserService { 	@Autowired 	private PersonService personService;  	public void test(){ 		System.out.println(personService); 	} }</code></pre> <p>创建之后然后使用自定义的<code>MyClassPathXmlApplicationContext</code>类进行启动：</p> <pre><code class="language-java">/**  * @author redwinter  * @since 1.0  **/ public class BeanCreate {    @Test   public void classPathXml() {     //		ClassPathXmlApplicationContext context = new     ClassPathXmlApplicationContext("classpath:spring-test.xml");     ClassPathXmlApplicationContext context = new                       MyClassPathXmlApplicationContext("classpath:spring-test.xml");     UserService userService = context.getBean(UserService.class); 	userService.test();   } }</code></pre> <p>启动之后发现报错了：</p> <pre><code class="language-java">四月 19, 2022 1:26:55 下午 org.springframework.context.support.AbstractApplicationContext refresh 警告: Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'personService': Unsatisfied dependency expressed through field 'userService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'userService': Unsatisfied dependency expressed through field 'personService'; nested exception is org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name 'personService': Requested bean is currently in creation: Is there an unresolvable circular reference?</code></pre> <p>如果设置为<code>true</code>，那么启动不会报错了并且输出了：</p> <pre><code class="language-java">com.redwinter.test.service.PersonService@6fc6f14e</code></pre> <h3 id="beandefinition-的加载">BeanDefinition 的加载</h3> <p>在刷新<code>BeanFactory</code>的方法中，有个方法叫<code>loadBeanDefinitions</code>，这个方法就是进行<code>BeanDefinition</code>的加载的，他的大致流程是这样的：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/47b29204b0771b032b173223a033611f.jpg" alt="Spring源码分析Spring BeanFactory 是怎么创建的？"></p> <p>在<code>BeanDefinition</code>加载的过程中，有个关键点可以让我们自定义标签进行<code>BeanDefinition</code>的加载和解析，在设置解析器的时候，<code>Spring</code>是这样设置解析器的：</p> <pre><code class="language-java">public DelegatingEntityResolver(@Nullable ClassLoader classLoader) { 		// 创建dtd解析器 		this.dtdResolver = new BeansDtdResolver(); 		// 创建schema 解析器 		// 在Debug的时候，这里会调用toString方法，然后去调用getSchemaMappings 方法，将schemaMappings 设置属性进去 		this.schemaResolver = new PluggableSchemaResolver(classLoader); 	}</code></pre> <p>在<code>Spring</code>中一般解析<code>XML</code>文件的时候都是从网上下载对应的标签解析，比如<code>Spring</code>配置文件中的<code>https://www.springframework.org/schema/beans/spring-beans-3.1.xsd</code> ，但是一般来说都是不需要进行下载的，<code>Spring</code>提供了本地文件的<code>xsd</code>文件，这些<code>xsd</code>文件就配置在<code>META-INF/spring.schemas</code>文件中进行配置，由于文件中内容比较多我就不复制出来了。</p> <p>在<code>Spring</code>进行<code>xml</code>解析之前会创建一个<code>namespace</code>的处理器的解析器：</p> <pre><code class="language-java">public NamespaceHandlerResolver getNamespaceHandlerResolver() {   if (this.namespaceHandlerResolver == null) {     // 创建默认的namespace处理器解析器，加载spring.handlers中配置的处理器     this.namespaceHandlerResolver = createDefaultNamespaceHandlerResolver();   }   return this.namespaceHandlerResolver; }</code></pre> <p>这里创建的<code>namespace</code>处理器就是放在<code>META-INF/spring.handlers</code>文件中，比如<code>util</code>标签、<code>context</code>标签的都是在这个文件中配置的处理器，对于util标签的<code>namespace</code>处理器如下：</p> <pre><code class="language-java">public class UtilNamespaceHandler extends NamespaceHandlerSupport {  	private static final String SCOPE_ATTRIBUTE = "scope";  	@Override 	public void init() { 		// 注册constant标签的解析器 		registerBeanDefinitionParser("constant", new ConstantBeanDefinitionParser()); 		// 注册property-path标签的解析器 		registerBeanDefinitionParser("property-path", new PropertyPathBeanDefinitionParser()); 		// 注册list标签的解析器 		registerBeanDefinitionParser("list", new ListBeanDefinitionParser()); 		// 注册set标签的解析器 		registerBeanDefinitionParser("set", new SetBeanDefinitionParser()); 		// 注册map标签的解析器 		registerBeanDefinitionParser("map", new MapBeanDefinitionParser()); 		// 注册properties标签的解析器 		registerBeanDefinitionParser("properties", new PropertiesBeanDefinitionParser()); 	}   // ....省略其他代码 }</code></pre> <p>这些处理器加载完之后就会进行BeanDefinition的解析：</p> <pre><code class="language-java">protected void parseBeanDefinitions(Element root, BeanDefinitionParserDelegate delegate) {   if (delegate.isDefaultNamespace(root)) {     NodeList nl = root.getChildNodes();     for (int i = 0; i < nl.getLength(); i++) {       Node node = nl.item(i);       if (node instanceof Element) {         Element ele = (Element) node;         // 如果节点是默认的命名空间则使用默认的解析         if (delegate.isDefaultNamespace(ele)) {           parseDefaultElement(ele, delegate);         }         else {           // 定制的namespace标签           delegate.parseCustomElement(ele);         }       }     }   }   else {     delegate.parseCustomElement(root);   } }   private void parseDefaultElement(Element ele, BeanDefinitionParserDelegate delegate) {   // 解析import节点   if (delegate.nodeNameEquals(ele, IMPORT_ELEMENT)) {     importBeanDefinitionResource(ele);   }   // 解析alias 别名节点   else if (delegate.nodeNameEquals(ele, ALIAS_ELEMENT)) {     processAliasRegistration(ele);   }   // 解析bean节点   else if (delegate.nodeNameEquals(ele, BEAN_ELEMENT)) {     processBeanDefinition(ele, delegate);   }   // 解析beans节点   else if (delegate.nodeNameEquals(ele, NESTED_BEANS_ELEMENT)) {     // recurse     doRegisterBeanDefinitions(ele);   } }</code></pre> <p>解析完之后就会调用注册，将解析到的<code>BeanDefinition</code>放在<code>beanDefinitionMap</code>和<code>beanDefinitionNames</code>集合中，最终完成了<code>BeanDefinition</code>的加载过程。</p> <p>现在开发基本都是使用<code>Spring Boot</code>，是全注解方式，这种<code>BeanDefinition</code>的加载实际上就是指定了一个包的扫描，然后扫描这些包下标记了<code>@Configuration、@Component、@Service、@Controller</code>等注解的类。感兴趣的可以去看下<code>AnnotationConfigApplicationContext</code>这个类是如何扫描的。</p> <p>这就是<code>Spring BeanFactory</code>的创建过程，并且包括了<code>BeanDefinition</code>的加载过程，接下来我们进行自定义标签，让<code>spring</code>进行解析。</p> 			
                                <div class="col-md-12 mt-5">
                                                                        <p>上一个：<a href="/html/category/article-1628.htm">etcd分布式键值数据库安装（单机版）</a></p>
                                                                        <p>下一个：<a href="/html/category/article-1640.htm">promise和async await的区别</a></p>
                                                                    </div>

                                                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-3765.htm" title="v-model的修饰符">v-model的修饰符</a></li>
                        <li class="py-2"><a href="/html/category/article-4077.htm" title="Vuex状态管理-mapState的基本用法详细介绍">Vuex状态管理-mapState的基本用法详细介绍</a></li>
                        <li class="py-2"><a href="/html/category/article-4413.htm" title="动物医院有宠物卖吗现在多少钱（动物医院贵吗）">动物医院有宠物卖吗现在多少钱（动物医院贵吗）</a></li>
                        <li class="py-2"><a href="/html/category/article-6026.htm" title="如何体香(体香如何有)">如何体香(体香如何有)</a></li>
                        <li class="py-2"><a href="/html/category/article-1963.htm" title="C++默认参数报错">C++默认参数报错</a></li>
                        <li class="py-2"><a href="/html/category/article-4379.htm" title="做梦梦见抱别的女人走路啥意思呀（梦见抱着别人的女人走路）">做梦梦见抱别的女人走路啥意思呀（梦见抱着别人的女人走路）</a></li>
                        <li class="py-2"><a href="/html/category/article-1964.htm" title="python查看包版本、更新单个包、卸载单个包">python查看包版本、更新单个包、卸载单个包</a></li>
                        <li class="py-2"><a href="/html/category/article-4488.htm" title="猫是招鬼还是辟邪的蓝猫（猫是招鬼还是辟邪的蓝猫呢）">猫是招鬼还是辟邪的蓝猫（猫是招鬼还是辟邪的蓝猫呢）</a></li>
                        <li class="py-2"><a href="/html/category/article-4525.htm" title="有哪些牌子的口红适合学生党(哪种口红适合学生党)">有哪些牌子的口红适合学生党(哪种口红适合学生党)</a></li>
                        <li class="py-2"><a href="/html/category/article-4303.htm" title="宠物领养条件和要求（宠物领养的法律法规）">宠物领养条件和要求（宠物领养的法律法规）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </div>
                <!-- Footer -->
        <footer class="footer">
            <div class="parallax_background parallax-window" data-parallax="scroll" data-image-src="/assets/addons/xcblog/img/srilankaaddress/footer.jpg" data-speed="0.8"></div>
            <div class="footer_overlay"></div>
            <div class="container">
                <div class="row">
                    <div class="col">
                        <div class="footer_content text-center d-flex flex-column align-items-center justify-content-center">
                            <p>
                                Sri Lanka Address 版权所有
                                <br />
                                Powered by WordPress
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </footer>
    </div>
    <script src="/assets/addons/xcblog/js/frontend/srilankaaddress/jquery-3.2.1.min.js"></script>
    <script src="/assets/addons/xcblog/css/srilankaaddress/bootstrap-4.1.2/popper.js"></script>
    <script src="/assets/addons/xcblog/css/srilankaaddress/bootstrap-4.1.2/bootstrap.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/owl.carousel.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/easing/easing.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/parallax-js-master/parallax.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/srilankaaddress/about.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>