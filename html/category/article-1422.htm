<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://srilankaaddress.github.io/html/category/article-1422.htm" />
    <title>19-Spring AOP源码分析-代理对象调用目标方法 - Sri Lanka Address</title>
        <meta charset="utf-8">
    <link rel="icon" href="/assets/addons/xcblog/img/srilankaaddress/favicon.ico" type="image/x-icon"/>
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="description" content="AerobicsFit template project">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?e8fff5fa52c11c99c5cdad6284174bdb";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/srilankaaddress/bootstrap-4.1.2/bootstrap.min.css">
    <link href="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/font-awesome-4.7.0/css/font-awesome.min.css" rel="stylesheet" type="text/css">
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/owl.carousel.css">
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/owl.theme.default.css">
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/animate.css">
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/srilankaaddress/about.css">
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/srilankaaddress/about_responsive.css">
</head>

<body>
    <div class="super_container">
                <!-- Header -->
        <header class="header">
            <div class="container">
                <div class="row">
                    <div class="col">
                        <div class="header_content d-flex flex-row align-items-center justify-content-start">
                            <div class="logo">Sri Lanka<span> Address</span></div>
                            <nav class="main_nav">
                                <ul class="d-flex flex-row align-items-center justify-content-start">
                                                                        <li><a href="/">首页</a></li>
                                                                        <li><a href="/html/category/">文章分类</a></li>
                                                                        <li><a href="#">关于</a></li>
                                    <li><a href="#">联系</a></li>
                                </ul>
                            </nav>
                            <div class="social header_social">
                                <ul class="d-flex flex-row align-items-center justify-content-start">
                                    <li><a href="#"><i class="fa fa-pinterest" aria-hidden="true"></i></a></li>
                                    <li><a href="#"><i class="fa fa-linkedin" aria-hidden="true"></i></a></li>
                                    <li><a href="#"><i class="fa fa-instagram" aria-hidden="true"></i></a></li>
                                    <li><a href="#"><i class="fa fa-facebook" aria-hidden="true"></i></a></li>
                                    <li><a href="#"><i class="fa fa-twitter" aria-hidden="true"></i></a></li>
                                </ul>
                            </div>
                            <div class="hamburger ml-auto"><i class="fa fa-bars" aria-hidden="true"></i></div>
                        </div>
                    </div>
                </div>
            </div>
        </header>
        <!-- Menu -->
        <div class="menu">
            <div class="menu_content d-flex flex-column align-items-center justify-content-center">
                <ul class="menu_nav_list text-center">
                                        <li><a href="index.html">Home</a></li>
                                        <li><a href="index.html">Home</a></li>
                                        <li><a href="#">关于</a></li>
                    <li><a href="#">联系</a></li>
                </ul>
            </div>
        </div>
        <!-- Home -->
        <div class="home">
            <div class="parallax_background parallax-window" data-parallax="scroll" data-image-src="/assets/addons/xcblog/img/srilankaaddress/about.jpg" data-speed="0.8"></div>
            <div class="home_container">
                <div class="container">
                    <div class="row">
                        <div class="col">
                            <div class="home_content">
                                <div class="home_title">19-Spring AOP源码分析-代理对象调用目标方法</div>
                                <div class="breadcrumbs">
                                    <ul class="d-flex flex-row align-items-center justify-content-start">
                                        <li><a href="/">首页</a></li>
                                        <li><a href="/html/category/">文章分类</a></li>
                                        <li>正文</li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- Classes -->
        <div class="classes">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                        <div class="row row-eq-height">
                            <div class="col-md-12">
                                  				  				  				<div id="content_views" class="markdown_views prism-atom-one-light"> <h1> 专栏目录</h1> <ol> <li>1-Spring架构源码分析-Spring源码搭建</li> <li>2-Spring架构源码分析-SSM框架说明</li> <li>3-Spring架构源码分析-spring体系</li> <li>4-Spring架构源码分析-Spring IOC机制设计思想和源码解读</li> <li>5-Spring架构源码分析-Spring IOC之 Spring 统一资源加载策略</li> <li>6-Spring架构源码分析-IoC 之加载 BeanDefinition</li> <li>7-Spring架构源码分析-IoC 之注册 BeanDefinitions</li> <li>8-Spring架构源码分析-IoC 之解析Bean：解析 import 标签</li> <li>9-Spring架构源码分析-IoC 之解析 bean 标签：开启解析进程</li> <li>10-Spring架构源码分析-IoC 之解析 bean标签：BeanDefinition</li> <li>11-Spring架构源码分析-IoC 之注册解析的 BeanDefinitions</li> <li>12-Spring架构源码分析-IoC 之装载 BeanDefinitions 总结</li> <li>13-Spring架构源码分析-IoC 之开启 Bean 的加载</li> <li>14-Spring架构源码分析-IoC 之加载 Bean：总结</li> <li>15-Spring架构源码分析-Spring代理与AOP</li> <li>16-Spring AOP源码分析-@EnableAspectJAutoProxy和AspectJAutoProxyRegistrar</li> <li>17-Spring AOP源码分析-AnnotationAwareAspectJAutoProxyCreator</li> <li>18-Spring AOP源码分析-AOP与BeanPostProcessor处理器</li> <li>19-Spring AOP源码分析-代理对象调用目标方法</li> <li>20-spring mvc设计思想和源码解读-spring mvc 功能特性</li> <li>21-mvc 体系结构源码详解</li> <li>22-Spring MVC源码跟踪</li> <li>23-Spring事务源码分析</li> </ol> <h5> 代理对象调用目标方法</h5> <p><strong>背景知识:</strong></p> <p><strong>@EnableAspectJAutoProxy(exposeProxy = true)﻿ 这个东东是用来干什么的？</strong></p> <p><strong>没有配置exposeProxy 暴露代理对象的时候我们方法调用</strong></p> <p><strong>我们在Mod方法中 通过this来调用本类的方法add()方法的时候，发现add()的方法不会被拦截</strong></p> <p><strong>而我们配置了后exposeProxy的属性，我们发现可以通过</strong></p> <p>**int retVal = ((Calculate) AopContext.currentProxy()).add(numA,numB);</p> <p>**</p> <p><strong>调用的时候，发现了add()方法可以被拦截</strong></p> <p><strong>原理:把这个exposeProxy设置为true，会把代理对象存放在线程变量中,</strong></p> <p><strong>AopContext.currentProxy())是从线程变量中获取代理对象（源码中分析）</strong></p> <p><strong>应用场景(事物方法调用事物方法需要二个都起作用需要配置这个东东)</strong></p> <pre><code class="prism language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Calculate</span> <span class="token punctuation">{<!-- --></span>      <span class="token comment">/**      * 加法      * @param numA      * @param numB      * @return      */</span>      <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> numA<span class="token punctuation">,</span><span class="token keyword">int</span> numB<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">/**      * 减法      * @param numA      * @param numB      * @return      */</span>      <span class="token keyword">int</span> <span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">int</span> numA<span class="token punctuation">,</span><span class="token keyword">int</span> numB<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">/**      * 除法      * @param numA      * @param numB      * @return      */</span>      <span class="token keyword">int</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token keyword">int</span> numA<span class="token punctuation">,</span><span class="token keyword">int</span> numB<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">/**      * 乘法      * @param numA      * @param numB      * @return      */</span>      <span class="token keyword">int</span> <span class="token function">multi</span><span class="token punctuation">(</span><span class="token keyword">int</span> numA<span class="token punctuation">,</span><span class="token keyword">int</span> numB<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> <span class="token function">mod</span><span class="token punctuation">(</span><span class="token keyword">int</span> numA<span class="token punctuation">,</span><span class="token keyword">int</span> numB<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TulingCalculate</span> <span class="token keyword">implements</span> <span class="token class-name">Calculate</span> <span class="token punctuation">{<!-- --></span>      <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> numA<span class="token punctuation">,</span> <span class="token keyword">int</span> numB<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>          <span class="token keyword">return</span> numA<span class="token operator">+</span>numB<span class="token punctuation">;</span>     <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">int</span> numA<span class="token punctuation">,</span> <span class="token keyword">int</span> numB<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">return</span> numA<span class="token operator">-</span>numB<span class="token punctuation">;</span>     <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token keyword">int</span> numA<span class="token punctuation">,</span> <span class="token keyword">int</span> numB<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">return</span> numA<span class="token operator">/</span>numB<span class="token punctuation">;</span>     <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">multi</span><span class="token punctuation">(</span><span class="token keyword">int</span> numA<span class="token punctuation">,</span> <span class="token keyword">int</span> numB<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">return</span> numA<span class="token operator">*</span>numB<span class="token punctuation">;</span>     <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">mod</span><span class="token punctuation">(</span><span class="token keyword">int</span> numA<span class="token punctuation">,</span><span class="token keyword">int</span> numB<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         <span class="token keyword">int</span> retVal <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Calculate</span><span class="token punctuation">)</span> <span class="token class-name">AopContext</span><span class="token punctuation">.</span><span class="token function">currentProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>numA<span class="token punctuation">,</span>numB<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//int retVal = this.add(numA,numB);</span>         <span class="token keyword">return</span> retVal<span class="token operator">%</span>numA<span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <p><em><strong>*代理对象调用源代码:*</strong></em></p> <pre><code class="prism language-java">	<span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{<!-- --></span> 		<span class="token class-name">MethodInvocation</span> invocation<span class="token punctuation">;</span> 		<span class="token class-name">Object</span> oldProxy <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> 		<span class="token keyword">boolean</span> setProxyContext <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  		<span class="token class-name">TargetSource</span> targetSource <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span>targetSource<span class="token punctuation">;</span> 		<span class="token class-name">Class</span><span class="token generics"><span class="token punctuation"><</span><span class="token operator">?</span><span class="token punctuation">></span></span> targetClass <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> 		<span class="token class-name">Object</span> target <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  		<span class="token keyword">try</span> <span class="token punctuation">{<!-- --></span> 		   			<span class="token class-name">Object</span> retVal<span class="token punctuation">;</span>                          <span class="token comment">//是否暴露代理对象</span> 			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span>exposeProxy<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 				<span class="token comment">//把代理对象添加到TheadLocal中</span> 				oldProxy <span class="token operator">=</span> <span class="token class-name">AopContext</span><span class="token punctuation">.</span><span class="token function">setCurrentProxy</span><span class="token punctuation">(</span>proxy<span class="token punctuation">)</span><span class="token punctuation">;</span> 				setProxyContext <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> 			<span class="token punctuation">}</span>              <span class="token comment">//获取被代理对象</span> 			target <span class="token operator">=</span> targetSource<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 			<span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 			    <span class="token comment">//设置被代理对象的class</span> 				targetClass <span class="token operator">=</span> target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 			<span class="token punctuation">}</span>  			<span class="token comment">//把增强器转为方法拦截器链</span> 			<span class="token class-name">List</span><span class="token generics"><span class="token punctuation"><</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> chain <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span><span class="token function">getInterceptorsAndDynamicInterceptionAdvice</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> targetClass<span class="token punctuation">)</span><span class="token punctuation">;</span>  		    <span class="token comment">//若方法拦截器链为空</span> 			<span class="token keyword">if</span> <span class="token punctuation">(</span>chain<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>                 <span class="token comment">//通过反射直接调用目标方法</span> 				<span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> argsToUse <span class="token operator">=</span> <span class="token class-name">AopProxyUtils</span><span class="token punctuation">.</span><span class="token function">adaptArgumentsIfNecessary</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span> 				retVal <span class="token operator">=</span> <span class="token class-name">AopUtils</span><span class="token punctuation">.</span><span class="token function">invokeJoinpointUsingReflection</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> method<span class="token punctuation">,</span> argsToUse<span class="token punctuation">)</span><span class="token punctuation">;</span> 			<span class="token punctuation">}</span> 			<span class="token keyword">else</span> <span class="token punctuation">{<!-- --></span> 				<span class="token comment">//创建方法拦截器调用链条</span> 				invocation <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReflectiveMethodInvocation</span><span class="token punctuation">(</span>proxy<span class="token punctuation">,</span> target<span class="token punctuation">,</span> method<span class="token punctuation">,</span> args<span class="token punctuation">,</span> targetClass<span class="token punctuation">,</span> chain<span class="token punctuation">)</span><span class="token punctuation">;</span> 				<span class="token comment">//执行拦截器链</span> 				retVal <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 			<span class="token punctuation">}</span>  			<span class="token comment">//获取方法的返回值类型</span> 			<span class="token class-name">Class</span><span class="token generics"><span class="token punctuation"><</span><span class="token operator">?</span><span class="token punctuation">></span></span> returnType <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 			<span class="token keyword">if</span> <span class="token punctuation">(</span>retVal <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&&</span> retVal <span class="token operator">==</span> target <span class="token operator">&&</span> 					returnType <span class="token operator">!=</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">&&</span> returnType<span class="token punctuation">.</span><span class="token function">isInstance</span><span class="token punctuation">(</span>proxy<span class="token punctuation">)</span> <span class="token operator">&&</span> 					<span class="token operator">!</span><span class="token class-name">RawTargetAccess</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 				<span class="token comment">//如果方法返回值为 this，即 return this; 则将代理对象 proxy 赋值给 retVal </span> 				retVal <span class="token operator">=</span> proxy<span class="token punctuation">;</span> 			<span class="token punctuation">}</span> 			<span class="token comment">//如果返回值类型为基础类型，比如 int，long 等，当返回值为 null，抛出异常</span> 			<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>retVal <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&&</span> returnType <span class="token operator">!=</span> <span class="token class-name">Void</span><span class="token punctuation">.</span>TYPE <span class="token operator">&&</span> returnType<span class="token punctuation">.</span><span class="token function">isPrimitive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 				<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AopInvocationException</span><span class="token punctuation">(</span> 						<span class="token string">"Null return value from advice does not match primitive return type for: "</span> <span class="token operator">+</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span> 			<span class="token punctuation">}</span> 			<span class="token keyword">return</span> retVal<span class="token punctuation">;</span> 		<span class="token punctuation">}</span> 		<span class="token keyword">finally</span> <span class="token punctuation">{<!-- --></span> 			<span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&&</span> <span class="token operator">!</span>targetSource<span class="token punctuation">.</span><span class="token function">isStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 				<span class="token comment">// Must have come from TargetSource.</span> 				targetSource<span class="token punctuation">.</span><span class="token function">releaseTarget</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span> 			<span class="token punctuation">}</span> 			<span class="token keyword">if</span> <span class="token punctuation">(</span>setProxyContext<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 				<span class="token comment">// Restore old proxy.</span> 				<span class="token class-name">AopContext</span><span class="token punctuation">.</span><span class="token function">setCurrentProxy</span><span class="token punctuation">(</span>oldProxy<span class="token punctuation">)</span><span class="token punctuation">;</span> 			<span class="token punctuation">}</span> 		<span class="token punctuation">}</span> 	<span class="token punctuation">}</span>  <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>framework<span class="token punctuation">.</span></span>AdvisedSupport</span>#getInterceptorsAndDynamicInterceptionAdvice<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> 把增强器中转为方法拦截器链 	<span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation"><</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">getInterceptorsAndDynamicInterceptionAdvice</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation"><</span><span class="token operator">?</span><span class="token punctuation">></span></span> targetClass<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 		<span class="token comment">//从缓存中获取缓存key 第一次肯定获取不到</span> 		<span class="token class-name">MethodCacheKey</span> cacheKey <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MethodCacheKey</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span> 		<span class="token comment">//通过cacheKey获取缓存值</span> 		<span class="token class-name">List</span><span class="token generics"><span class="token punctuation"><</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> cached <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>methodCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">)</span><span class="token punctuation">;</span> 		 		<span class="token comment">//从缓存中没有获取到</span> 		<span class="token keyword">if</span> <span class="token punctuation">(</span>cached <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 		    <span class="token comment">//获取所有的拦截器</span> 			cached <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>advisorChainFactory<span class="token punctuation">.</span><span class="token function">getInterceptorsAndDynamicInterceptionAdvice</span><span class="token punctuation">(</span> 					<span class="token keyword">this</span><span class="token punctuation">,</span> method<span class="token punctuation">,</span> targetClass<span class="token punctuation">)</span><span class="token punctuation">;</span> 		    <span class="token comment">//放入缓存.....</span> 			<span class="token keyword">this</span><span class="token punctuation">.</span>methodCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> cached<span class="token punctuation">)</span><span class="token punctuation">;</span> 		<span class="token punctuation">}</span> 		<span class="token keyword">return</span> cached<span class="token punctuation">;</span> 	<span class="token punctuation">}</span>  <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>framework<span class="token punctuation">.</span></span>AdvisorChainFactory</span>#getInterceptorsAndDynamicInterceptionAdvice<span class="token operator">==</span><span class="token operator">==</span> 	<span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation"><</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">getInterceptorsAndDynamicInterceptionAdvice</span><span class="token punctuation">(</span> 			<span class="token class-name">Advised</span> config<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation"><</span><span class="token operator">?</span><span class="token punctuation">></span></span> targetClass<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>  	    <span class="token comment">//创建拦截器集合长度是增强器的长度</span> 		<span class="token class-name">List</span><span class="token generics"><span class="token punctuation"><</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> interceptorList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation"><</span><span class="token class-name">Object</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getAdvisors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> 		 		<span class="token class-name">Class</span><span class="token generics"><span class="token punctuation"><</span><span class="token operator">?</span><span class="token punctuation">></span></span> actualClass <span class="token operator">=</span> <span class="token punctuation">(</span>targetClass <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> targetClass <span class="token operator">:</span> method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		<span class="token keyword">boolean</span> hasIntroductions <span class="token operator">=</span> <span class="token function">hasMatchingIntroductions</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> actualClass<span class="token punctuation">)</span><span class="token punctuation">;</span> 		<span class="token class-name">AdvisorAdapterRegistry</span> registry <span class="token operator">=</span> <span class="token class-name">GlobalAdvisorAdapterRegistry</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">//遍历所有的增强器集合</span> 		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Advisor</span> advisor <span class="token operator">:</span> config<span class="token punctuation">.</span><span class="token function">getAdvisors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 			<span class="token comment">//判断增强器是不是PointcutAdvisor</span> 			<span class="token keyword">if</span> <span class="token punctuation">(</span>advisor <span class="token keyword">instanceof</span> <span class="token class-name">PointcutAdvisor</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 				<span class="token comment">//把增强器转为PointcutAdvisor</span> 				<span class="token class-name">PointcutAdvisor</span> pointcutAdvisor <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">PointcutAdvisor</span><span class="token punctuation">)</span> advisor<span class="token punctuation">;</span> 				<span class="token comment">//通过方法匹配器对增强器进行匹配</span> 				<span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">isPreFiltered</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> pointcutAdvisor<span class="token punctuation">.</span><span class="token function">getPointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>actualClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 					<span class="token class-name">MethodMatcher</span> mm <span class="token operator">=</span> pointcutAdvisor<span class="token punctuation">.</span><span class="token function">getPointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethodMatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 					<span class="token comment">//能够匹配</span> 					<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">MethodMatchers</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>mm<span class="token punctuation">,</span> method<span class="token punctuation">,</span> actualClass<span class="token punctuation">,</span> hasIntroductions<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 						<span class="token comment">//把增强器转为拦截器</span> 						<span class="token class-name">MethodInterceptor</span><span class="token punctuation">[</span><span class="token punctuation">]</span> interceptors <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">getInterceptors</span><span class="token punctuation">(</span>advisor<span class="token punctuation">)</span><span class="token punctuation">;</span> 						<span class="token keyword">if</span> <span class="token punctuation">(</span>mm<span class="token punctuation">.</span><span class="token function">isRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 							<span class="token comment">// Creating a new object instance in the getInterceptors() method</span> 							<span class="token comment">// isn't a problem as we normally cache created chains.</span> 							<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">MethodInterceptor</span> interceptor <span class="token operator">:</span> interceptors<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 								interceptorList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InterceptorAndDynamicMethodMatcher</span><span class="token punctuation">(</span>interceptor<span class="token punctuation">,</span> mm<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 							<span class="token punctuation">}</span> 						<span class="token punctuation">}</span> 						<span class="token keyword">else</span> <span class="token punctuation">{<!-- --></span> 							interceptorList<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>interceptors<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 						<span class="token punctuation">}</span> 					<span class="token punctuation">}</span> 				<span class="token punctuation">}</span> 			<span class="token punctuation">}</span> 			<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>advisor <span class="token keyword">instanceof</span> <span class="token class-name">IntroductionAdvisor</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 				<span class="token class-name">IntroductionAdvisor</span> ia <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">IntroductionAdvisor</span><span class="token punctuation">)</span> advisor<span class="token punctuation">;</span> 				<span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">isPreFiltered</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> ia<span class="token punctuation">.</span><span class="token function">getClassFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>actualClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 					<span class="token class-name">Interceptor</span><span class="token punctuation">[</span><span class="token punctuation">]</span> interceptors <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">getInterceptors</span><span class="token punctuation">(</span>advisor<span class="token punctuation">)</span><span class="token punctuation">;</span> 					interceptorList<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>interceptors<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 				<span class="token punctuation">}</span> 			<span class="token punctuation">}</span> 			<span class="token keyword">else</span> <span class="token punctuation">{<!-- --></span> 				<span class="token class-name">Interceptor</span><span class="token punctuation">[</span><span class="token punctuation">]</span> interceptors <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">getInterceptors</span><span class="token punctuation">(</span>advisor<span class="token punctuation">)</span><span class="token punctuation">;</span> 				interceptorList<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>interceptors<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 			<span class="token punctuation">}</span> 		<span class="token punctuation">}</span>  		<span class="token keyword">return</span> interceptorList<span class="token punctuation">;</span> 	<span class="token punctuation">}</span> </code></pre> <p>------------------------------------------------------------ 完 --------------------------------------------------------------------</p> <p><strong>背景知识:</strong></p> <p><strong>@EnableAspectJAutoProxy(exposeProxy = true)﻿ 这个东东是用来干什么的？</strong></p> <p><strong>没有配置exposeProxy 暴露代理对象的时候我们方法调用</strong></p> <p><strong>我们在Mod方法中 通过this来调用本类的方法add()方法的时候，发现add()的方法不会被拦截</strong></p> <p><strong>而我们配置了后exposeProxy的属性，我们发现可以通过</strong></p> <p>**int retVal = ((Calculate) AopContext.currentProxy()).add(numA,numB);</p> <p>**</p> <p><strong>调用的时候，发现了add()方法可以被拦截</strong></p> <p><strong>原理:把这个exposeProxy设置为true，会把代理对象存放在线程变量中,</strong></p> <p><strong>AopContext.currentProxy())是从线程变量中获取代理对象（源码中分析）</strong></p> <p><strong>应用场景(事物方法调用事物方法需要二个都起作用需要配置这个东东)</strong></p> <ol> </ol> </div> 			
                                <div class="col-md-12 mt-5">
                                                                        <p>上一个：<a href="/html/category/article-1421.htm">关于Jeecg uniapp 使用 mescroll 无法上拉加载</a></p>
                                                                        <p>下一个：<a href="/html/category/article-1423.htm">RabbitMQ Exchange Queue RoutingKey BindingKey解析</a></p>
                                                                    </div>

                                                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-7774.htm" title="青岛市动物疾病防控中心（青岛市动物疫病防疫中心）">青岛市动物疾病防控中心（青岛市动物疫病防疫中心）</a></li>
                        <li class="py-2"><a href="/html/category/article-7177.htm" title="预制菜第一品牌（新疆预制菜第一品牌）">预制菜第一品牌（新疆预制菜第一品牌）</a></li>
                        <li class="py-2"><a href="/html/category/article-7085.htm" title="有名的宠物品牌（宠物类品牌名）">有名的宠物品牌（宠物类品牌名）</a></li>
                        <li class="py-2"><a href="/html/category/article-7314.htm" title="动物疫苗的作用是什么 动物疫苗的作用是什么呢">动物疫苗的作用是什么 动物疫苗的作用是什么呢</a></li>
                        <li class="py-2"><a href="/html/category/article-7084.htm" title="动物疫苗在常温下能放多久不变质呢视频（动物疫苗未冷藏几小时失效）">动物疫苗在常温下能放多久不变质呢视频（动物疫苗未冷藏几小时失效）</a></li>
                        <li class="py-2"><a href="/html/category/article-7637.htm" title="动物医院社会实践报告范文 动物医院社会实践报告范文怎么写">动物医院社会实践报告范文 动物医院社会实践报告范文怎么写</a></li>
                        <li class="py-2"><a href="/html/category/article-6579.htm" title="学美容要学多久才能出师名校广州一路时尚好（学美容美发有什么要求吗全选广州一路时尚好）">学美容要学多久才能出师名校广州一路时尚好（学美容美发有什么要求吗全选广州一路时尚好）</a></li>
                        <li class="py-2"><a href="/html/category/article-7268.htm" title="动物防疫相关防控制度有哪些（动物防疫相关防控制度有哪些内容）">动物防疫相关防控制度有哪些（动物防疫相关防控制度有哪些内容）</a></li>
                        <li class="py-2"><a href="/html/category/article-6992.htm" title="三国杀击杀特效哪个好看（三国杀哪些皮肤有击杀特效）">三国杀击杀特效哪个好看（三国杀哪些皮肤有击杀特效）</a></li>
                        <li class="py-2"><a href="/html/category/article-6202.htm" title="南京领养狗狗的地方有哪些（南京哪里有领养狗狗的地方）">南京领养狗狗的地方有哪些（南京哪里有领养狗狗的地方）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </div>
                <!-- Footer -->
        <footer class="footer">
            <div class="parallax_background parallax-window" data-parallax="scroll" data-image-src="/assets/addons/xcblog/img/srilankaaddress/footer.jpg" data-speed="0.8"></div>
            <div class="footer_overlay"></div>
            <div class="container">
                <div class="row">
                    <div class="col">
                        <div class="footer_content text-center d-flex flex-column align-items-center justify-content-center">
                            <p>
                                Sri Lanka Address 版权所有
                                <br />
                                Powered by WordPress
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </footer>
    </div>
    <script src="/assets/addons/xcblog/js/frontend/srilankaaddress/jquery-3.2.1.min.js"></script>
    <script src="/assets/addons/xcblog/css/srilankaaddress/bootstrap-4.1.2/popper.js"></script>
    <script src="/assets/addons/xcblog/css/srilankaaddress/bootstrap-4.1.2/bootstrap.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/owl.carousel.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/easing/easing.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/srilankaaddress/plugins/parallax-js-master/parallax.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/srilankaaddress/about.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>